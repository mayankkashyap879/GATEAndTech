{"file_contents":{"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/TestimonialsSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function TestimonialsSection() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const testimonials = [\n    {\n      name: \"Priya S.\",\n      initials: \"PS\",\n      exam: \"GATE EE 2025 AIR 112\",\n      percentile: \"+14 percentile\",\n      quote: \"The mock felt scarier than the real thing—so the actual exam was a breeze.\",\n    },\n    {\n      name: \"Rahul K.\",\n      initials: \"RK\",\n      exam: \"GATE CS 2025 AIR 89\",\n      percentile: \"+18 percentile\",\n      quote: \"The AI analytics helped me identify my weak areas and improve systematically.\",\n    },\n    {\n      name: \"Anjali M.\",\n      initials: \"AM\",\n      exam: \"GATE ME 2025 AIR 156\",\n      percentile: \"+12 percentile\",\n      quote: \"Community support and mentor guidance made all the difference in my preparation.\",\n    },\n  ];\n\n  const nextTestimonial = () => {\n    setCurrentIndex((prev) => (prev + 1) % testimonials.length);\n    console.log(\"Next testimonial\");\n  };\n\n  const prevTestimonial = () => {\n    setCurrentIndex((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n    console.log(\"Previous testimonial\");\n  };\n\n  const currentTestimonial = testimonials[currentIndex];\n\n  return (\n    <section className=\"py-16 md:py-24 bg-accent/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Success Stories</h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Real results from real students\n          </p>\n        </div>\n\n        <div className=\"max-w-3xl mx-auto\">\n          <Card className=\"p-8 md:p-12 hover-elevate\">\n            <div className=\"flex flex-col items-center text-center space-y-6\">\n              <Avatar className=\"w-16 h-16 bg-primary text-primary-foreground text-xl font-semibold\">\n                <AvatarFallback>{currentTestimonial.initials}</AvatarFallback>\n              </Avatar>\n\n              <div>\n                <h4 className=\"text-xl font-semibold mb-1\">{currentTestimonial.name}</h4>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  {currentTestimonial.exam}\n                </p>\n                <Badge className=\"shadow-sm\">{currentTestimonial.percentile}</Badge>\n              </div>\n\n              <blockquote className=\"text-lg md:text-xl text-muted-foreground italic max-w-2xl\">\n                \"{currentTestimonial.quote}\"\n              </blockquote>\n\n              <div className=\"flex items-center gap-4 pt-4\">\n                <button\n                  onClick={prevTestimonial}\n                  className=\"w-10 h-10 rounded-full border border-border hover-elevate flex items-center justify-center\"\n                  data-testid=\"button-prev-testimonial\"\n                >\n                  <ChevronLeft className=\"w-5 h-5\" />\n                </button>\n\n                <div className=\"flex gap-2\">\n                  {testimonials.map((_, index) => (\n                    <button\n                      key={index}\n                      onClick={() => {\n                        setCurrentIndex(index);\n                        console.log(`Navigate to testimonial ${index}`);\n                      }}\n                      className={`w-2 h-2 rounded-full transition-all ${\n                        index === currentIndex\n                          ? \"bg-primary w-6\"\n                          : \"bg-muted-foreground/30\"\n                      }`}\n                      data-testid={`button-dot-${index}`}\n                    />\n                  ))}\n                </div>\n\n                <button\n                  onClick={nextTestimonial}\n                  className=\"w-10 h-10 rounded-full border border-border hover-elevate flex items-center justify-center\"\n                  data-testid=\"button-next-testimonial\"\n                >\n                  <ChevronRight className=\"w-5 h-5\" />\n                </button>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4292},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/EmailSignupSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Check } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function EmailSignupSection() {\n  const [email, setEmail] = useState(\"\");\n  const [agreed, setAgreed] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Email submitted:\", email, \"Agreed:\", agreed);\n  };\n\n  return (\n    <section className=\"py-16 md:py-24 bg-accent/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-2xl mx-auto text-center space-y-8\">\n          <div>\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Get a free GATE-style question every day\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Sharpen your instincts in under 2 minutes—straight to your inbox.\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"flex-1\"\n                required\n                data-testid=\"input-email\"\n              />\n              <Button\n                type=\"submit\"\n                className=\"shadow-lg shadow-primary/30\"\n                data-testid=\"button-send-question\"\n              >\n                Send Today's Question\n              </Button>\n            </div>\n\n            <div className=\"flex items-start gap-2 justify-center\">\n              <Checkbox\n                id=\"terms\"\n                checked={agreed}\n                onCheckedChange={(checked) => setAgreed(checked as boolean)}\n                data-testid=\"checkbox-terms\"\n              />\n              <label\n                htmlFor=\"terms\"\n                className=\"text-sm text-muted-foreground cursor-pointer\"\n              >\n                I'm okay with occasional product tips.\n              </label>\n            </div>\n\n            <p className=\"text-sm text-muted-foreground\">\n              Zero spam. Unsubscribe anytime.\n            </p>\n          </form>\n\n          <div className=\"flex flex-wrap items-center justify-center gap-6 pt-4\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Check className=\"w-4 h-4 text-primary\" />\n              <span>27k+ active learners</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Check className=\"w-4 h-4 text-primary\" />\n              <span>Daily brain training</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Check className=\"w-4 h-4 text-primary\" />\n              <span>Free forever</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3081},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  timestamp, \n  boolean, \n  integer, \n  numeric,\n  jsonb,\n  pgEnum,\n  index,\n  unique\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// ============================================================================\n// ENUMS\n// ============================================================================\n\nexport const roleEnum = pgEnum(\"role\", [\"student\", \"moderator\", \"admin\"]);\nexport const authProviderEnum = pgEnum(\"auth_provider\", [\"credentials\", \"google\", \"github\"]);\nexport const themeEnum = pgEnum(\"theme\", [\"light\", \"dark\", \"system\"]);\nexport const questionTypeEnum = pgEnum(\"question_type\", [\"mcq_single\", \"mcq_multiple\", \"numerical\"]);\nexport const difficultyEnum = pgEnum(\"difficulty\", [\"easy\", \"medium\", \"hard\"]);\nexport const testStatusEnum = pgEnum(\"test_status\", [\"draft\", \"published\", \"archived\"]);\nexport const attemptStatusEnum = pgEnum(\"attempt_status\", [\"in_progress\", \"processing\", \"submitted\", \"evaluated\"]);\nexport const paymentStatusEnum = pgEnum(\"payment_status\", [\"pending\", \"success\", \"failed\", \"refunded\"]);\nexport const purchaseStatusEnum = pgEnum(\"purchase_status\", [\"active\", \"expired\"]);\n\n// ============================================================================\n// USERS & AUTHENTICATION\n// ============================================================================\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: timestamp(\"email_verified\"),\n  passwordHash: text(\"password_hash\"),\n  authProvider: authProviderEnum(\"auth_provider\").default(\"credentials\").notNull(),\n  providerId: text(\"provider_id\"),\n  avatar: text(\"avatar\"),\n  role: roleEnum(\"role\").default(\"student\").notNull(),\n  theme: themeEnum(\"theme\").default(\"system\").notNull(),\n  twofaEnabled: boolean(\"twofa_enabled\").default(false).notNull(),\n  twofaSecret: text(\"twofa_secret\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  providerIdx: index(\"users_provider_idx\").on(table.authProvider, table.providerId),\n}));\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  userIdx: index(\"sessions_user_idx\").on(table.userId),\n}));\n\nexport const verificationTokens = pgTable(\"verification_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: text(\"token\").notNull().unique(),\n  type: text(\"type\").notNull(), // 'email_verification', 'password_reset'\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// ============================================================================\n// QUESTION BANK\n// ============================================================================\n\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  displayOrder: integer(\"display_order\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  displayOrderIdx: index(\"subjects_display_order_idx\").on(table.displayOrder),\n}));\n\nexport const topics = pgTable(\"topics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull(),\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id, { onDelete: \"cascade\" }),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  subjectIdx: index(\"topics_subject_idx\").on(table.subjectId),\n  slugSubjectUniq: unique().on(table.slug, table.subjectId),\n}));\n\nexport const questions = pgTable(\"questions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  type: questionTypeEnum(\"type\").notNull(),\n  difficulty: difficultyEnum(\"difficulty\").notNull(),\n  options: jsonb(\"options\"), // Array of options for MCQ [{id: 'A', text: '...', isCorrect: boolean}]\n  correctAnswer: text(\"correct_answer\"), // For numerical type\n  explanation: text(\"explanation\"),\n  marks: integer(\"marks\").default(1).notNull(),\n  negativeMarks: integer(\"negative_marks\").default(0).notNull(),\n  imageUrl: text(\"image_url\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  isPublished: boolean(\"is_published\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  typeIdx: index(\"questions_type_idx\").on(table.type),\n  difficultyIdx: index(\"questions_difficulty_idx\").on(table.difficulty),\n  createdByIdx: index(\"questions_created_by_idx\").on(table.createdBy),\n  createdAtIdx: index(\"questions_created_at_idx\").on(table.createdAt),\n  // Composite index for: WHERE isPublished = ? ORDER BY createdAt DESC\n  publishedCreatedIdx: index(\"questions_published_created_idx\").on(table.isPublished, table.createdAt.desc()),\n}));\n\nexport const questionTopics = pgTable(\"question_topics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  questionId: varchar(\"question_id\").notNull().references(() => questions.id, { onDelete: \"cascade\" }),\n  topicId: varchar(\"topic_id\").notNull().references(() => topics.id, { onDelete: \"cascade\" }),\n}, (table) => ({\n  questionIdx: index(\"question_topics_question_idx\").on(table.questionId),\n  topicIdx: index(\"question_topics_topic_idx\").on(table.topicId),\n  uniq: unique().on(table.questionId, table.topicId),\n}));\n\n// ============================================================================\n// TESTS & ATTEMPTS\n// ============================================================================\n\nexport const tests = pgTable(\"tests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  duration: integer(\"duration\").notNull(), // in minutes\n  totalMarks: integer(\"total_marks\").notNull(),\n  status: testStatusEnum(\"status\").default(\"draft\").notNull(),\n  isPro: boolean(\"is_pro\").default(false).notNull(), // Only for pro users\n  scheduledAt: timestamp(\"scheduled_at\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  statusIdx: index(\"tests_status_idx\").on(table.status),\n  scheduledIdx: index(\"tests_scheduled_idx\").on(table.scheduledAt),\n  createdByIdx: index(\"tests_created_by_idx\").on(table.createdBy),\n  createdAtIdx: index(\"tests_created_at_idx\").on(table.createdAt),\n  // Composite index for: WHERE status = ? AND isPro = ? ORDER BY scheduledAt\n  statusProScheduledIdx: index(\"tests_status_pro_scheduled_idx\").on(table.status, table.isPro, table.scheduledAt),\n}));\n\nexport const testQuestions = pgTable(\"test_questions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testId: varchar(\"test_id\").notNull().references(() => tests.id, { onDelete: \"cascade\" }),\n  questionId: varchar(\"question_id\").notNull().references(() => questions.id, { onDelete: \"cascade\" }),\n  order: integer(\"order\").notNull(),\n}, (table) => ({\n  testIdx: index(\"test_questions_test_idx\").on(table.testId),\n  uniq: unique().on(table.testId, table.questionId),\n}));\n\nexport const testAttempts = pgTable(\"test_attempts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testId: varchar(\"test_id\").notNull().references(() => tests.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  status: attemptStatusEnum(\"status\").default(\"in_progress\").notNull(),\n  startedAt: timestamp(\"started_at\").defaultNow().notNull(),\n  submittedAt: timestamp(\"submitted_at\"),\n  score: integer(\"score\"),\n  maxScore: integer(\"max_score\"),\n  percentile: integer(\"percentile\"),\n  timeTaken: integer(\"time_taken\"), // in seconds\n  responses: jsonb(\"responses\"), // Stores all responses for quick access\n}, (table) => ({\n  testIdx: index(\"test_attempts_test_idx\").on(table.testId),\n  statusIdx: index(\"test_attempts_status_idx\").on(table.status),\n  submittedAtIdx: index(\"test_attempts_submitted_at_idx\").on(table.submittedAt),\n  // Composite index for: WHERE userId = ? ORDER BY startedAt DESC\n  userStartedIdx: index(\"test_attempts_user_started_idx\").on(table.userId, table.startedAt.desc()),\n  // Composite index for: WHERE userId = ? AND status = ? ORDER BY startedAt DESC\n  userStatusStartedIdx: index(\"test_attempts_user_status_started_idx\").on(table.userId, table.status, table.startedAt.desc()),\n}));\n\nexport const testResponses = pgTable(\"test_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  attemptId: varchar(\"attempt_id\").notNull().references(() => testAttempts.id, { onDelete: \"cascade\" }),\n  questionId: varchar(\"question_id\").notNull().references(() => questions.id, { onDelete: \"cascade\" }),\n  selectedAnswer: text(\"selected_answer\"), // Option ID or numerical value\n  isCorrect: boolean(\"is_correct\"),\n  marksAwarded: integer(\"marks_awarded\").default(0),\n  timeTaken: integer(\"time_taken\"), // in seconds\n  isMarkedForReview: boolean(\"is_marked_for_review\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  attemptIdx: index(\"test_responses_attempt_idx\").on(table.attemptId),\n  uniq: unique().on(table.attemptId, table.questionId),\n}));\n\n// ============================================================================\n// TEST SERIES & PURCHASES\n// ============================================================================\n\nexport const testSeries = pgTable(\"test_series\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  price: numeric(\"price\", { precision: 10, scale: 2 }).notNull(),\n  validityDays: integer(\"validity_days\").notNull().default(90),\n  tier: varchar(\"tier\", { length: 20 }).notNull().default(\"free\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const testSeriesTests = pgTable(\"test_series_tests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testSeriesId: varchar(\"test_series_id\").notNull().references(() => testSeries.id, { onDelete: \"cascade\" }),\n  testId: varchar(\"test_id\").notNull().references(() => tests.id, { onDelete: \"cascade\" }),\n  order: integer(\"sequence_order\").notNull(),\n}, (table) => ({\n  seriesIdx: index(\"test_series_tests_series_idx\").on(table.testSeriesId),\n  uniq: unique().on(table.testSeriesId, table.testId),\n}));\n\nexport const userPurchases = pgTable(\"user_purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  testSeriesId: varchar(\"test_series_id\").notNull().references(() => testSeries.id, { onDelete: \"cascade\" }),\n  status: purchaseStatusEnum(\"status\").default(\"active\").notNull(),\n  purchaseDate: timestamp(\"purchase_date\").defaultNow().notNull(),\n  expiryDate: timestamp(\"expiry_date\").notNull(),\n  transactionId: varchar(\"transaction_id\").references(() => transactions.id),\n}, (table) => ({\n  testSeriesIdx: index(\"user_purchases_test_series_idx\").on(table.testSeriesId),\n  // Composite index for: WHERE userId = ? [AND status = ?] ORDER BY purchaseDate DESC\n  userStatusDateIdx: index(\"user_purchases_user_status_date_idx\").on(table.userId, table.status, table.purchaseDate.desc()),\n  uniq: unique().on(table.userId, table.testSeriesId),\n}));\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  testSeriesId: varchar(\"test_series_id\").references(() => testSeries.id),\n  amount: integer(\"amount\").notNull(), // in paise/cents\n  currency: text(\"currency\").default(\"INR\").notNull(),\n  razorpayPaymentId: text(\"razorpay_payment_id\"),\n  razorpayOrderId: text(\"razorpay_order_id\").notNull(),\n  razorpaySignature: text(\"razorpay_signature\"),\n  status: paymentStatusEnum(\"status\").default(\"pending\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  userIdx: index(\"transactions_user_idx\").on(table.userId),\n  orderIdx: index(\"transactions_order_idx\").on(table.razorpayOrderId),\n  statusIdx: index(\"transactions_status_idx\").on(table.status),\n  testSeriesIdx: index(\"transactions_test_series_idx\").on(table.testSeriesId),\n}));\n\n// ============================================================================\n// COMMUNITY & DISCUSSIONS\n// ============================================================================\n\nexport const discussionThreads = pgTable(\"discussion_threads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  topicId: varchar(\"topic_id\").references(() => topics.id),\n  questionId: varchar(\"question_id\").references(() => questions.id),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  viewCount: integer(\"view_count\").default(0).notNull(),\n  isPinned: boolean(\"is_pinned\").default(false).notNull(),\n  isClosed: boolean(\"is_closed\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  authorIdx: index(\"discussion_threads_author_idx\").on(table.authorId),\n  questionIdx: index(\"discussion_threads_question_idx\").on(table.questionId),\n  createdAtIdx: index(\"discussion_threads_created_at_idx\").on(table.createdAt),\n  // Composite index for: WHERE topicId = ? ORDER BY isPinned DESC, updatedAt DESC\n  topicPinnedUpdatedIdx: index(\"discussion_threads_topic_pinned_updated_idx\").on(table.topicId, table.isPinned.desc(), table.updatedAt.desc()),\n}));\n\nexport const discussionPosts = pgTable(\"discussion_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  threadId: varchar(\"thread_id\").notNull().references(() => discussionThreads.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  isAcceptedAnswer: boolean(\"is_accepted_answer\").default(false),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  authorIdx: index(\"discussion_posts_author_idx\").on(table.authorId),\n  // Composite index for: WHERE threadId = ? ORDER BY createdAt ASC\n  threadCreatedIdx: index(\"discussion_posts_thread_created_idx\").on(table.threadId, table.createdAt.asc()),\n}));\n\n// ============================================================================\n// NOTIFICATIONS\n// ============================================================================\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // 'test_reminder', 'result_available', 'discussion_reply', etc.\n  relatedId: varchar(\"related_id\"), // ID of related entity (test, thread, etc.)\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  // Composite index for: WHERE userId = ? [AND isRead = ?] ORDER BY createdAt DESC\n  userReadCreatedIdx: index(\"notifications_user_read_created_idx\").on(table.userId, table.isRead, table.createdAt.desc()),\n}));\n\n// ============================================================================\n// RELATIONS\n// ============================================================================\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  sessions: many(sessions),\n  questionsCreated: many(questions),\n  testsCreated: many(tests),\n  testSeriesCreated: many(testSeries),\n  testAttempts: many(testAttempts),\n  purchases: many(userPurchases),\n  transactions: many(transactions),\n  threadsCreated: many(discussionThreads),\n  postsCreated: many(discussionPosts),\n  notifications: many(notifications),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const questionsRelations = relations(questions, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [questions.createdBy],\n    references: [users.id],\n  }),\n  questionTopics: many(questionTopics),\n  testQuestions: many(testQuestions),\n}));\n\nexport const topicsRelations = relations(topics, ({ many }) => ({\n  questionTopics: many(questionTopics),\n  threads: many(discussionThreads),\n}));\n\nexport const questionTopicsRelations = relations(questionTopics, ({ one }) => ({\n  question: one(questions, {\n    fields: [questionTopics.questionId],\n    references: [questions.id],\n  }),\n  topic: one(topics, {\n    fields: [questionTopics.topicId],\n    references: [topics.id],\n  }),\n}));\n\nexport const testsRelations = relations(tests, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [tests.createdBy],\n    references: [users.id],\n  }),\n  testQuestions: many(testQuestions),\n  attempts: many(testAttempts),\n}));\n\nexport const testQuestionsRelations = relations(testQuestions, ({ one }) => ({\n  test: one(tests, {\n    fields: [testQuestions.testId],\n    references: [tests.id],\n  }),\n  question: one(questions, {\n    fields: [testQuestions.questionId],\n    references: [questions.id],\n  }),\n}));\n\nexport const testAttemptsRelations = relations(testAttempts, ({ one, many }) => ({\n  test: one(tests, {\n    fields: [testAttempts.testId],\n    references: [tests.id],\n  }),\n  user: one(users, {\n    fields: [testAttempts.userId],\n    references: [users.id],\n  }),\n  responses: many(testResponses),\n}));\n\nexport const testResponsesRelations = relations(testResponses, ({ one }) => ({\n  attempt: one(testAttempts, {\n    fields: [testResponses.attemptId],\n    references: [testAttempts.id],\n  }),\n  question: one(questions, {\n    fields: [testResponses.questionId],\n    references: [questions.id],\n  }),\n}));\n\nexport const testSeriesRelations = relations(testSeries, ({ many }) => ({\n  testSeriesTests: many(testSeriesTests),\n  purchases: many(userPurchases),\n  transactions: many(transactions),\n}));\n\nexport const testSeriesTestsRelations = relations(testSeriesTests, ({ one }) => ({\n  testSeries: one(testSeries, {\n    fields: [testSeriesTests.testSeriesId],\n    references: [testSeries.id],\n  }),\n  test: one(tests, {\n    fields: [testSeriesTests.testId],\n    references: [tests.id],\n  }),\n}));\n\nexport const userPurchasesRelations = relations(userPurchases, ({ one }) => ({\n  user: one(users, {\n    fields: [userPurchases.userId],\n    references: [users.id],\n  }),\n  testSeries: one(testSeries, {\n    fields: [userPurchases.testSeriesId],\n    references: [testSeries.id],\n  }),\n  transaction: one(transactions, {\n    fields: [userPurchases.transactionId],\n    references: [transactions.id],\n  }),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n  testSeries: one(testSeries, {\n    fields: [transactions.testSeriesId],\n    references: [testSeries.id],\n  }),\n}));\n\nexport const discussionThreadsRelations = relations(discussionThreads, ({ one, many }) => ({\n  author: one(users, {\n    fields: [discussionThreads.authorId],\n    references: [users.id],\n  }),\n  topic: one(topics, {\n    fields: [discussionThreads.topicId],\n    references: [topics.id],\n  }),\n  question: one(questions, {\n    fields: [discussionThreads.questionId],\n    references: [questions.id],\n  }),\n  posts: many(discussionPosts),\n}));\n\nexport const discussionPostsRelations = relations(discussionPosts, ({ one }) => ({\n  thread: one(discussionThreads, {\n    fields: [discussionPosts.threadId],\n    references: [discussionThreads.id],\n  }),\n  author: one(users, {\n    fields: [discussionPosts.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\n// ============================================================================\n// ZOD SCHEMAS FOR VALIDATION\n// ============================================================================\n\n// User schemas\nexport const insertUserSchema = createInsertSchema(users, {\n  email: z.string().email(),\n  name: z.string().min(2).max(100),\n  passwordHash: z.string().optional(),\n}).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Registration schema - only allows user-provided fields\nexport const registerUserSchema = z.object({\n  name: z.string().min(2).max(100),\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\n// User profile update schema - only safe fields users can modify\nexport const updateUserProfileSchema = z.object({\n  name: z.string().min(2).max(100).optional(),\n  avatar: z.string().url().optional().nullable(),\n  theme: z.enum([\"light\", \"dark\", \"system\"]).optional(),\n});\n\n// Admin-only user update schema\nexport const adminUpdateUserSchema = z.object({\n  name: z.string().min(2).max(100).optional(),\n  email: z.string().email().optional(),\n  avatar: z.string().url().optional().nullable(),\n  theme: z.enum([\"light\", \"dark\", \"system\"]).optional(),\n  role: z.enum([\"student\", \"moderator\", \"admin\"]).optional(),\n  twofaEnabled: z.boolean().optional(),\n});\n\nexport const selectUserSchema = createSelectSchema(users);\n\nexport const updateUserSchema = insertUserSchema.partial().omit({ \n  role: true, \n  authProvider: true, \n  providerId: true \n});\n\n// Question schemas\nexport const insertQuestionSchema = createInsertSchema(questions, {\n  content: z.string().min(10),\n  marks: z.number().int().positive(),\n  negativeMarks: z.number().int().nonnegative(),\n}).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Update schema - only allows safe fields, excludes id, createdBy, createdAt, updatedAt\nexport const updateQuestionSchema = z.object({\n  content: z.string().min(10).optional(),\n  type: z.enum([\"mcq_single\", \"mcq_multiple\", \"numerical\"]).optional(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]).optional(),\n  options: z.any().optional(), // jsonb field\n  correctAnswer: z.string().optional(),\n  explanation: z.string().optional(),\n  marks: z.number().int().positive().optional(),\n  negativeMarks: z.number().int().nonnegative().optional(),\n  imageUrl: z.string().url().optional().nullable(),\n  isPublished: z.boolean().optional(),\n});\n\nexport const selectQuestionSchema = createSelectSchema(questions);\n\n// Subject schemas\nexport const insertSubjectSchema = createInsertSchema(subjects, {\n  name: z.string().min(2).max(100),\n  slug: z.string().min(2).max(100),\n  description: z.string().optional(),\n  displayOrder: z.number().int().nonnegative().optional(),\n}).omit({ id: true, createdAt: true });\n\nexport const selectSubjectSchema = createSelectSchema(subjects);\n\n// Topic schemas  \nexport const insertTopicSchema = createInsertSchema(topics, {\n  name: z.string().min(2).max(100),\n  slug: z.string().min(2).max(100),\n  description: z.string().optional(),\n}).omit({ id: true, createdAt: true });\n\nexport const selectTopicSchema = createSelectSchema(topics);\n\n// Test schemas\nexport const insertTestSchema = createInsertSchema(tests, {\n  title: z.string().min(3).max(200),\n  duration: z.number().int().positive(),\n  totalMarks: z.number().int().positive(),\n}).omit({ id: true, createdAt: true, updatedAt: true });\n\nexport const selectTestSchema = createSelectSchema(tests);\n\n// Test Attempt schemas\nexport const insertTestAttemptSchema = createInsertSchema(testAttempts).omit({ \n  id: true, \n  startedAt: true, \n});\n\nexport const selectTestAttemptSchema = createSelectSchema(testAttempts);\n\n// Test Series schemas\nexport const insertTestSeriesSchema = createInsertSchema(testSeries, {\n  title: z.string().min(3).max(200),\n  description: z.string().min(10),\n  price: z.string(), // numeric field comes as string\n  validityDays: z.number().int().positive(),\n  tier: z.enum([\"free\", \"premium\", \"pro\"]),\n}).omit({ id: true, createdAt: true });\n\nexport const selectTestSeriesSchema = createSelectSchema(testSeries);\n\n// User Purchase schemas\nexport const insertUserPurchaseSchema = createInsertSchema(userPurchases).omit({ \n  id: true, \n  purchaseDate: true \n});\n\nexport const selectUserPurchaseSchema = createSelectSchema(userPurchases);\n\n// Transaction schemas\nexport const insertTransactionSchema = createInsertSchema(transactions, {\n  amount: z.number().int().positive(),\n}).omit({ id: true, createdAt: true });\n\nexport const selectTransactionSchema = createSelectSchema(transactions);\n\n// Payment verification schema\nexport const verifyPaymentSchema = z.object({\n  razorpay_order_id: z.string(),\n  razorpay_payment_id: z.string(),\n  razorpay_signature: z.string(),\n});\n\n// Discussion schemas\nexport const insertThreadSchema = createInsertSchema(discussionThreads, {\n  title: z.string().min(5).max(200),\n  content: z.string().min(10),\n}).omit({ id: true, createdAt: true, updatedAt: true, viewCount: true });\n\nexport const insertPostSchema = createInsertSchema(discussionPosts, {\n  content: z.string().min(1),\n}).omit({ id: true, createdAt: true, updatedAt: true, upvotes: true });\n\n// ============================================================================\n// PERMISSIONS & RBAC (CASL)\n// ============================================================================\n\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n  description: text(\"description\"),\n  isSystem: boolean(\"is_system\").default(false).notNull(), // true for student, moderator, admin\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  nameIdx: index(\"roles_name_idx\").on(table.name),\n}));\n\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  action: varchar(\"action\", { length: 50 }).notNull(), // create, read, update, delete, publish, manage\n  subject: varchar(\"subject\", { length: 50 }).notNull(), // Question, Test, User, Role, etc.\n  conditions: jsonb(\"conditions\"), // Optional CASL conditions\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  actionSubjectIdx: unique(\"permissions_action_subject_idx\").on(table.action, table.subject),\n}));\n\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").notNull().references(() => roles.id, { onDelete: \"cascade\" }),\n  permissionId: varchar(\"permission_id\").notNull().references(() => permissions.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  roleIdx: index(\"role_permissions_role_idx\").on(table.roleId),\n  permissionIdx: index(\"role_permissions_permission_idx\").on(table.permissionId),\n  uniq: unique().on(table.roleId, table.permissionId),\n}));\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  action: varchar(\"action\", { length: 100 }).notNull(), // e.g., 'role.create', 'permission.assign'\n  resource: varchar(\"resource\", { length: 100 }).notNull(), // e.g., 'Role', 'Permission'\n  resourceId: varchar(\"resource_id\"),\n  details: jsonb(\"details\"), // Old/new values, additional context\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  userIdx: index(\"audit_logs_user_idx\").on(table.userId),\n  actionIdx: index(\"audit_logs_action_idx\").on(table.action),\n  resourceIdx: index(\"audit_logs_resource_idx\").on(table.resource, table.resourceId),\n  createdAtIdx: index(\"audit_logs_created_at_idx\").on(table.createdAt),\n}));\n\n// Permission schemas\nexport const insertRoleSchema = createInsertSchema(roles, {\n  name: z.string().min(2).max(50),\n  description: z.string().optional(),\n}).omit({ id: true, createdAt: true, updatedAt: true });\n\nexport const insertPermissionSchema = createInsertSchema(permissions, {\n  action: z.string().min(2).max(50),\n  subject: z.string().min(2).max(50),\n  description: z.string().optional(),\n}).omit({ id: true, createdAt: true });\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({ id: true, createdAt: true });\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\n\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = typeof sessions.$inferInsert;\n\nexport type VerificationToken = typeof verificationTokens.$inferSelect;\nexport type InsertVerificationToken = typeof verificationTokens.$inferInsert;\n\nexport type Question = typeof questions.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\n\nexport type Subject = typeof subjects.$inferSelect;\nexport type InsertSubject = z.infer<typeof insertSubjectSchema>;\n\nexport type Topic = typeof topics.$inferSelect;\nexport type InsertTopic = z.infer<typeof insertTopicSchema>;\n\nexport type Test = typeof tests.$inferSelect;\nexport type InsertTest = z.infer<typeof insertTestSchema>;\n\nexport type TestAttempt = typeof testAttempts.$inferSelect;\nexport type InsertTestAttempt = z.infer<typeof insertTestAttemptSchema>;\n\nexport type TestResponse = typeof testResponses.$inferSelect;\nexport type InsertTestResponse = typeof testResponses.$inferInsert;\n\nexport type TestSeries = typeof testSeries.$inferSelect;\nexport type InsertTestSeries = z.infer<typeof insertTestSeriesSchema>;\n\nexport type TestSeriesTest = typeof testSeriesTests.$inferSelect;\nexport type InsertTestSeriesTest = typeof testSeriesTests.$inferInsert;\n\nexport type UserPurchase = typeof userPurchases.$inferSelect;\nexport type InsertUserPurchase = z.infer<typeof insertUserPurchaseSchema>;\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\nexport type DiscussionThread = typeof discussionThreads.$inferSelect;\nexport type InsertDiscussionThread = z.infer<typeof insertThreadSchema>;\n\nexport type DiscussionPost = typeof discussionPosts.$inferSelect;\nexport type InsertDiscussionPost = z.infer<typeof insertPostSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = typeof notifications.$inferInsert;\n\nexport type Role = typeof roles.$inferSelect;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\n\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\n\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type InsertRolePermission = typeof rolePermissions.$inferInsert;\n\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n","size_bytes":32497},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/routes/discussion.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth\";\nimport { insertThreadSchema, insertPostSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { cache } from \"../redis\";\n\nexport function discussionRoutes(app: Express): void {\n  // ============================================================================\n  // DISCUSSION ROUTES\n  // ============================================================================\n\n  // Get discussion threads with caching for hot threads\n  app.get(\"/api/discussions\", async (req: Request, res: Response) => {\n    try {\n      const filters = {\n        topicId: req.query.topicId as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : 20,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : 0,\n      };\n      \n      // Cache hot threads (first page, no topic filter)\n      const cacheKey = `discussions:${filters.topicId || 'all'}:${filters.limit}:${filters.offset}`;\n      \n      // Try cache first for first page\n      if (filters.offset === 0) {\n        const cached = await cache.get(cacheKey);\n        if (cached) {\n          return res.json(cached);\n        }\n      }\n      \n      // Fetch from database\n      const threads = await storage.getThreads(filters);\n      \n      // Cache first page results (2 minutes TTL)\n      if (filters.offset === 0) {\n        await cache.set(cacheKey, threads, 120);\n      }\n      \n      res.json(threads);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create discussion thread\n  app.post(\"/api/discussions\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const validatedData = insertThreadSchema.parse({\n        ...req.body,\n        authorId: currentUser.id,\n      });\n      \n      const thread = await storage.createThread(validatedData);\n      \n      // Invalidate discussion cache for this topic and 'all'\n      await cache.clearPattern(`discussions:${thread.topicId}:*`);\n      await cache.clearPattern(`discussions:all:*`);\n      \n      res.status(201).json(thread);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating thread:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get thread posts\n  app.get(\"/api/discussions/:id/posts\", async (req: Request, res: Response) => {\n    try {\n      const posts = await storage.getThreadPosts(req.params.id);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create post in thread\n  app.post(\"/api/discussions/:id/posts\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const validatedData = insertPostSchema.parse({\n        ...req.body,\n        threadId: req.params.id,\n        authorId: currentUser.id,\n      });\n      \n      const post = await storage.createPost(validatedData);\n      \n      // Get thread to know its topicId for cache invalidation\n      const thread = await storage.getThread(req.params.id);\n      if (thread) {\n        // Invalidate discussion cache since post updates thread's updatedAt\n        await cache.clearPattern(`discussions:${thread.topicId}:*`);\n        await cache.clearPattern(`discussions:all:*`);\n      }\n      \n      res.status(201).json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating post:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Upvote a post (Redis-backed fast increment)\n  app.post(\"/api/discussions/:threadId/posts/:postId/upvote\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { postId } = req.params;\n      const currentUser = req.user as any;\n      \n      // Atomic check-and-set: only vote if not already voted (24 hour TTL)\n      const voteKey = `vote:${currentUser.id}:${postId}`;\n      const canVote = await cache.setnx(voteKey, true, 86400);\n      \n      if (!canVote) {\n        return res.status(400).json({ error: \"You have already voted on this post\" });\n      }\n      \n      // Check if count exists in Redis\n      const cacheKey = `post:upvotes:${postId}`;\n      let currentCount = await cache.get<number>(cacheKey);\n      \n      // Initialize from database if not cached\n      if (currentCount === null) {\n        const post = await storage.getPost(postId);\n        currentCount = post?.upvotes || 0;\n        await cache.set(cacheKey, currentCount, 300);\n      }\n      \n      // Fast increment in Redis\n      const newCount = await cache.increment(cacheKey, 1);\n      \n      // Refresh TTL to prevent expiration\n      await cache.expire(cacheKey, 300);\n      \n      // Persist to database with error handling (await for reliability)\n      try {\n        await storage.incrementPostUpvotes(postId, 1);\n      } catch (dbError) {\n        console.error(`Failed to persist upvote to DB for post ${postId}:`, dbError);\n        // DB failed but Redis updated - acceptable eventual consistency\n      }\n      \n      res.json({ upvotes: newCount, success: true });\n    } catch (error) {\n      console.error(\"Error upvoting post:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Remove upvote from a post\n  app.delete(\"/api/discussions/:threadId/posts/:postId/upvote\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { postId } = req.params;\n      const currentUser = req.user as any;\n      \n      // Check if user has voted\n      const voteKey = `vote:${currentUser.id}:${postId}`;\n      const hasVoted = await cache.get(voteKey);\n      \n      if (!hasVoted) {\n        return res.status(400).json({ error: \"You have not voted on this post\" });\n      }\n      \n      // Check if count exists in Redis\n      const cacheKey = `post:upvotes:${postId}`;\n      let currentCount = await cache.get<number>(cacheKey);\n      \n      // Initialize from database if not cached\n      if (currentCount === null) {\n        const post = await storage.getPost(postId);\n        currentCount = post?.upvotes || 0;\n        await cache.set(cacheKey, currentCount, 300);\n      }\n      \n      // Fast decrement in Redis (ensure non-negative)\n      let newCount = await cache.increment(cacheKey, -1);\n      if (newCount < 0) {\n        // Clamp to 0 and update Redis\n        await cache.set(cacheKey, 0, 300);\n        newCount = 0;\n      } else {\n        // Refresh TTL to prevent expiration\n        await cache.expire(cacheKey, 300);\n      }\n      \n      // Remove vote marker\n      await cache.del(voteKey);\n      \n      // Persist to database asynchronously (fire-and-forget for speed)\n      storage.incrementPostUpvotes(postId, -1).catch(err => \n        console.error(`Failed to persist downvote to DB for post ${postId}:`, err)\n      );\n      \n      res.json({ upvotes: newCount, success: true });\n    } catch (error) {\n      console.error(\"Error removing upvote:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}\n","size_bytes":7454},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/PricingSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Shield, CreditCard, RefreshCw, BookOpen, Clock } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\ninterface TestSeries {\n  id: string;\n  title: string;\n  description: string;\n  price: number;\n  validityDays: number;\n  tier: string;\n  isActive: boolean;\n}\n\nexport default function PricingSection() {\n  const [, setLocation] = useLocation();\n\n  const { data: testSeriesList } = useQuery<TestSeries[]>({\n    queryKey: [\"/api/test-series\"],\n    enabled: true,\n  });\n\n  // Get top 3 test series for display (1 free, 2 premium)\n  const displaySeries = testSeriesList\n    ?.filter((ts) => ts.isActive)\n    .sort((a, b) => {\n      // Free tier first, then by price\n      if (a.tier === \"free\" && b.tier !== \"free\") return -1;\n      if (a.tier !== \"free\" && b.tier === \"free\") return 1;\n      return a.price - b.price;\n    })\n    .slice(0, 3) || [];\n\n  return (\n    <section id=\"pricing\" className=\"py-16 md:py-24\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Choose Your Test Series\n          </h2>\n          <p className=\"text-lg text-muted-foreground\">\n            One-time purchase with flexible validity periods\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto mb-8\">\n          {displaySeries.length > 0 ? (\n            displaySeries.map((series, index) => (\n              <Card\n                key={series.id}\n                className={`p-8 relative hover-elevate ${\n                  series.tier === \"pro\" ? \"border-primary shadow-xl shadow-primary/20\" : \"\"\n                }`}\n                data-testid={`card-pricing-${series.id}`}\n              >\n                {series.tier === \"pro\" && (\n                  <Badge className=\"absolute -top-3 left-1/2 -translate-x-1/2 shadow-lg\">\n                    Most Popular\n                  </Badge>\n                )}\n\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-2xl font-bold mb-1\">{series.title}</h3>\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">{series.description}</p>\n                  </div>\n\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-4xl font-bold\">\n                      {series.tier === \"free\" ? \"Free\" : `₹${series.price}`}\n                    </span>\n                    {series.tier !== \"free\" && (\n                      <span className=\"text-muted-foreground\">one-time</span>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {series.tier !== \"free\" && (\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Clock className=\"w-4 h-4 text-primary\" />\n                        <span>{series.validityDays} days access</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <BookOpen className=\"w-4 h-4 text-primary\" />\n                      <span>Full-length mock tests</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Check className=\"w-4 h-4 text-primary\" />\n                      <span>Detailed analytics</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Check className=\"w-4 h-4 text-primary\" />\n                      <span>GATE-authentic interface</span>\n                    </div>\n                  </div>\n\n                  <Button\n                    className={`w-full ${series.tier === \"pro\" ? \"shadow-lg shadow-primary/30\" : \"\"}`}\n                    variant={series.tier === \"pro\" ? \"default\" : \"outline\"}\n                    onClick={() => setLocation(\"/shop\")}\n                    data-testid={`button-view-series-${series.id}`}\n                  >\n                    {series.tier === \"free\" ? \"Get Started\" : \"View Details\"}\n                  </Button>\n                </div>\n              </Card>\n            ))\n          ) : (\n            <div className=\"col-span-3 text-center py-8 text-muted-foreground\">\n              Test series coming soon...\n            </div>\n          )}\n        </div>\n\n        <div className=\"text-center mb-6\">\n          <Button variant=\"outline\" size=\"lg\" onClick={() => setLocation(\"/shop\")} data-testid=\"button-view-all\">\n            View All Test Series\n          </Button>\n        </div>\n\n        <div className=\"flex flex-wrap items-center justify-center gap-6 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"w-4 h-4\" />\n            <span>No hidden fees</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <CreditCard className=\"w-4 h-4\" />\n            <span>Razorpay secure</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <RefreshCw className=\"w-4 h-4\" />\n            <span>7-day money-back guarantee</span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5465},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/middleware/rate-limit.ts":{"content":"import rateLimit from 'express-rate-limit';\nimport { redis } from '../redis.js';\n\n/**\n * Redis store for rate limiting (optional)\n * Falls back to memory store when Redis is unavailable\n */\nclass RedisStore {\n  prefix: string;\n  windowMs: number;\n\n  constructor(prefix: string = 'rl:', windowMs: number = 60000) {\n    this.prefix = prefix;\n    this.windowMs = windowMs;\n  }\n\n  async increment(key: string): Promise<{ totalHits: number; resetTime: Date | undefined }> {\n    // If Redis is not configured, skip (will use default memory store)\n    if (!redis) {\n      return { totalHits: 1, resetTime: new Date(Date.now() + this.windowMs) };\n    }\n\n    const prefixedKey = this.prefix + key;\n    \n    try {\n      // Runtime check: attempt to ping Redis\n      const status = redis.status;\n      if (status !== 'ready' && status !== 'connect') {\n        return { totalHits: 1, resetTime: new Date(Date.now() + this.windowMs) };\n      }\n\n      const multi = redis.multi();\n      multi.incr(prefixedKey);\n      multi.pttl(prefixedKey);\n      \n      const results = await multi.exec();\n      if (!results) {\n        throw new Error('Redis transaction failed');\n      }\n\n      const hits = results[0][1] as number;\n      const ttl = results[1][1] as number;\n      \n      let resetTime: Date;\n      if (ttl === -1) {\n        // Key has no expiration, set it using windowMs\n        const expirySeconds = Math.ceil(this.windowMs / 1000);\n        await redis.expire(prefixedKey, expirySeconds);\n        resetTime = new Date(Date.now() + this.windowMs);\n      } else if (ttl > 0) {\n        resetTime = new Date(Date.now() + ttl);\n      } else {\n        resetTime = new Date(Date.now() + this.windowMs);\n      }\n\n      return {\n        totalHits: hits,\n        resetTime,\n      };\n    } catch (error) {\n      console.error('Rate limit Redis error:', error);\n      // Fail open (allow request) on Redis errors\n      return { totalHits: 1, resetTime: new Date(Date.now() + this.windowMs) };\n    }\n  }\n\n  async decrement(key: string): Promise<void> {\n    if (!redis) return;\n    \n    try {\n      const status = redis.status;\n      if (status !== 'ready' && status !== 'connect') {\n        return;\n      }\n      \n      await redis.decr(this.prefix + key);\n    } catch (error) {\n      console.error('Rate limit decrement error:', error);\n      // Non-critical operation, just log\n    }\n  }\n\n  async resetKey(key: string): Promise<void> {\n    if (!redis) return;\n    \n    try {\n      const status = redis.status;\n      if (status !== 'ready' && status !== 'connect') {\n        return;\n      }\n      \n      await redis.del(this.prefix + key);\n    } catch (error) {\n      console.error('Rate limit reset error:', error);\n      // Non-critical operation, just log\n    }\n  }\n}\n\n// Log warning if Redis is not configured\nif (!redis && process.env.NODE_ENV === 'production') {\n  console.warn('⚠️ Redis not configured. Using memory-based rate limiting. For production scalability across multiple instances, set REDIS_URL.');\n}\n\n/**\n * Strict rate limiter for authentication endpoints\n * 5 requests per 15 minutes per IP\n */\nexport const authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5,\n  message: 'Too many authentication attempts, please try again after 15 minutes',\n  standardHeaders: true,\n  legacyHeaders: false,\n  store: new RedisStore('rl:auth:', 15 * 60 * 1000),\n  // Don't skip in production - always enforce\n  skip: (req) => false,\n});\n\n/**\n * Moderate rate limiter for API endpoints\n * 100 requests per 15 minutes per IP\n */\nexport const apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100,\n  message: 'Too many requests, please try again later',\n  standardHeaders: true,\n  legacyHeaders: false,\n  store: new RedisStore('rl:api:', 15 * 60 * 1000),\n  skip: (req) => false,\n});\n\n/**\n * Lenient rate limiter for general routes\n * 1000 requests per 15 minutes per IP\n */\nexport const generalLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 1000,\n  message: 'Too many requests, please slow down',\n  standardHeaders: true,\n  legacyHeaders: false,\n  store: new RedisStore('rl:general:', 15 * 60 * 1000),\n  skip: (req) => false,\n});\n\n/**\n * Strict limiter for test submission\n * 30 requests per 15 minutes per IP\n */\nexport const testSubmitLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 30,\n  message: 'Too many test submissions, please wait before submitting again',\n  standardHeaders: true,\n  legacyHeaders: false,\n  store: new RedisStore('rl:test:', 15 * 60 * 1000),\n  skip: (req) => false,\n});\n","size_bytes":4577},"client/src/pages/ThreadDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ArrowLeft, MessageSquare, ThumbsUp, CheckCircle } from \"lucide-react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Thread {\n  id: string;\n  title: string;\n  content: string;\n  authorId: string;\n  viewCount: number;\n  createdAt: string;\n  author?: {\n    id: string;\n    name: string;\n  };\n}\n\ninterface Post {\n  id: string;\n  threadId: string;\n  content: string;\n  authorId: string;\n  isAcceptedAnswer: boolean;\n  upvotes: number;\n  createdAt: string;\n  author?: {\n    id: string;\n    name: string;\n  };\n}\n\nexport default function ThreadDetail() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [, params] = useRoute(\"/discussions/:id\");\n  const { toast } = useToast();\n  const [answer, setAnswer] = useState(\"\");\n  const [isPosting, setIsPosting] = useState(false);\n  \n  const threadId = params?.id;\n\n  const { data: thread } = useQuery<Thread>({\n    queryKey: [\"/api/discussions\", threadId],\n    enabled: !!threadId,\n  });\n\n  const { data: posts = [], isLoading: postsLoading } = useQuery<Post[]>({\n    queryKey: [\"/api/discussions\", threadId, \"posts\"],\n    enabled: !!threadId,\n  });\n\n  const handlePostAnswer = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!answer.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please write an answer\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsPosting(true);\n    try {\n      await apiRequest(\"POST\", `/api/discussions/${threadId}/posts`, { content: answer });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/discussions\", threadId, \"posts\"] });\n      setAnswer(\"\");\n      \n      toast({\n        title: \"Success\",\n        description: \"Answer posted successfully!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to post answer. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsPosting(false);\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  if (!user || !threadId) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        {/* Back Button */}\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/discussions\")}\n          data-testid=\"button-back-to-discussions\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Q&A Forum\n        </Button>\n\n        {/* Thread Question */}\n        {thread && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-2xl\" data-testid=\"text-thread-title\">\n                    {thread.title}\n                  </CardTitle>\n                  <CardDescription className=\"mt-2 flex items-center gap-2\">\n                    {thread.author && (\n                      <div className=\"flex items-center gap-2\">\n                        <Avatar className=\"h-6 w-6\">\n                          <AvatarFallback className=\"text-xs\">\n                            {getInitials(thread.author.name)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"font-medium text-foreground\">{thread.author.name}</span>\n                      </div>\n                    )}\n                    <span>•</span>\n                    <span>{formatDistanceToNow(new Date(thread.createdAt), { addSuffix: true })}</span>\n                    <span>•</span>\n                    <span>{thread.viewCount} views</span>\n                  </CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-foreground whitespace-pre-wrap\" data-testid=\"text-thread-content\">\n                {thread.content}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        <Separator />\n\n        {/* Answers Section */}\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n            <MessageSquare className=\"h-5 w-5\" />\n            {posts.length} {posts.length === 1 ? \"Answer\" : \"Answers\"}\n          </h2>\n\n          {postsLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2].map((i) => (\n                <Card key={i}>\n                  <CardContent className=\"py-6\">\n                    <div className=\"h-4 bg-muted animate-pulse rounded w-3/4 mb-2\" />\n                    <div className=\"h-4 bg-muted animate-pulse rounded w-1/2\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : posts.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-8 text-center text-muted-foreground\">\n                No answers yet. Be the first to answer!\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {posts.map((post) => (\n                <Card key={post.id} data-testid={`card-post-${post.id}`}>\n                  <CardContent className=\"py-6\">\n                    <div className=\"flex gap-4\">\n                      <div className=\"flex flex-col items-center gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-8 w-8\"\n                          data-testid={`button-upvote-${post.id}`}\n                        >\n                          <ThumbsUp className=\"h-4 w-4\" />\n                        </Button>\n                        <span className=\"text-sm font-medium\">{post.upvotes}</span>\n                        {post.isAcceptedAnswer && (\n                          <CheckCircle className=\"h-5 w-5 text-green-600\" data-testid={`icon-accepted-${post.id}`} />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-foreground whitespace-pre-wrap mb-4\">{post.content}</p>\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          {post.author && (\n                            <>\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarFallback className=\"text-xs\">\n                                  {getInitials(post.author.name)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"font-medium text-foreground\">{post.author.name}</span>\n                              <span>•</span>\n                            </>\n                          )}\n                          <span>{formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Post Answer */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Your Answer</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handlePostAnswer} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"answer\">Answer</Label>\n                <Textarea\n                  id=\"answer\"\n                  placeholder=\"Share your knowledge...\"\n                  value={answer}\n                  onChange={(e) => setAnswer(e.target.value)}\n                  rows={6}\n                  data-testid=\"textarea-answer\"\n                />\n              </div>\n              <Button type=\"submit\" disabled={isPosting} data-testid=\"button-post-answer\">\n                {isPosting ? \"Posting...\" : \"Post Answer\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8761},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/Tests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Clock, FileText, Plus, Trophy } from \"lucide-react\";\nimport type { Test } from \"@shared/schema\";\n\nexport default function Tests() {\n  const { user } = useAuth();\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [tierFilter, setTierFilter] = useState<string>(\"all\");\n\n  const { data: tests, isLoading } = useQuery<Test[]>({\n    queryKey: [\"/api/tests\", statusFilter, tierFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (statusFilter !== \"all\") params.append(\"status\", statusFilter);\n      if (tierFilter !== \"all\") params.append(\"isPro\", tierFilter);\n      const response = await fetch(`/api/tests?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch tests\");\n      return response.json();\n    },\n  });\n\n  const canCreateTest = user && (user.role === \"admin\" || user.role === \"moderator\");\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Mock Tests</h1>\n          <p className=\"text-muted-foreground mt-2\">Practice with GATE-style mock tests</p>\n        </div>\n        {canCreateTest && (\n          <Link href=\"/tests/new\">\n            <Button data-testid=\"button-create-test\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Test\n            </Button>\n          </Link>\n        )}\n      </div>\n\n      <div className=\"flex gap-4 mb-6\">\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"Status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"published\">Published</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"archived\">Archived</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={tierFilter} onValueChange={setTierFilter}>\n          <SelectTrigger className=\"w-[180px]\" data-testid=\"select-tier-filter\">\n            <SelectValue placeholder=\"Tier\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Tiers</SelectItem>\n            <SelectItem value=\"false\">Free</SelectItem>\n            <SelectItem value=\"true\">Pro</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-3/4\" />\n                <Skeleton className=\"h-4 w-full mt-2\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-1/2\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {tests?.map((test) => (\n            <Card key={test.id} className=\"hover-elevate\" data-testid={`card-test-${test.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between gap-2\">\n                  <CardTitle className=\"text-xl\" data-testid={`text-test-title-${test.id}`}>{test.title}</CardTitle>\n                  {test.isPro && (\n                    <Badge variant=\"default\" data-testid={`badge-pro-${test.id}`}>\n                      <Trophy className=\"mr-1 h-3 w-3\" />\n                      Pro\n                    </Badge>\n                  )}\n                </div>\n                {test.description && (\n                  <CardDescription className=\"line-clamp-2\" data-testid={`text-description-${test.id}`}>\n                    {test.description}\n                  </CardDescription>\n                )}\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  <Badge variant=\"outline\" data-testid={`badge-duration-${test.id}`}>\n                    <Clock className=\"mr-1 h-3 w-3\" />\n                    {test.duration} min\n                  </Badge>\n                  <Badge variant=\"outline\" data-testid={`badge-marks-${test.id}`}>\n                    <FileText className=\"mr-1 h-3 w-3\" />\n                    {test.totalMarks} marks\n                  </Badge>\n                  <Badge\n                    variant={\n                      test.status === \"published\"\n                        ? \"default\"\n                        : test.status === \"draft\"\n                        ? \"secondary\"\n                        : \"outline\"\n                    }\n                    data-testid={`badge-status-${test.id}`}\n                  >\n                    {test.status}\n                  </Badge>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex gap-2\">\n                <Link href={`/tests/${test.id}`}>\n                  <Button variant=\"default\" className=\"flex-1\" data-testid={`button-start-test-${test.id}`}>\n                    Start Test\n                  </Button>\n                </Link>\n                {canCreateTest && (\n                  <Link href={`/tests/${test.id}/edit`}>\n                    <Button variant=\"outline\" size=\"icon\" data-testid={`button-edit-test-${test.id}`}>\n                      <FileText className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                )}\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!isLoading && tests?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-no-tests\">No tests found</p>\n          {canCreateTest && (\n            <Link href=\"/tests/new\">\n              <Button className=\"mt-4\" data-testid=\"button-create-first-test\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create Your First Test\n              </Button>\n            </Link>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6745},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/pages/Discussions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { MessageSquare, Plus, Search, Eye, MessageCircle, Clock } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Thread {\n  id: string;\n  title: string;\n  content: string;\n  authorId: string;\n  topicId?: string;\n  viewCount: number;\n  isPinned: boolean;\n  isClosed: boolean;\n  createdAt: string;\n  updatedAt: string;\n  author?: {\n    id: string;\n    name: string;\n  };\n  postCount?: number;\n}\n\nexport default function Discussions() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { data: threads = [], isLoading } = useQuery<Thread[]>({\n    queryKey: [\"/api/discussions\"],\n  });\n\n  const handleCreateThread = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title.trim() || !content.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsCreating(true);\n    try {\n      await apiRequest(\"POST\", \"/api/discussions\", { title, content });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/discussions\"] });\n      setIsDialogOpen(false);\n      setTitle(\"\");\n      setContent(\"\");\n      \n      toast({\n        title: \"Success\",\n        description: \"Question posted successfully!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to post question. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const filteredThreads = threads.filter(\n    (thread) =>\n      thread.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      thread.content.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\" data-testid=\"text-discussions-title\">\n              <MessageSquare className=\"h-8 w-8 text-primary\" />\n              Q&A Forum\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Ask doubts and get answers from the community\n            </p>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-ask-question\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Ask Question\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Ask a Question</DialogTitle>\n                <DialogDescription>\n                  Post your doubt and get help from the community\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateThread} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Question Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Brief summary of your question\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    required\n                    data-testid=\"input-thread-title\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"content\">Question Details</Label>\n                  <Textarea\n                    id=\"content\"\n                    placeholder=\"Explain your doubt in detail...\"\n                    value={content}\n                    onChange={(e) => setContent(e.target.value)}\n                    required\n                    rows={6}\n                    data-testid=\"textarea-thread-content\"\n                  />\n                </div>\n                <DialogFooter>\n                  <Button type=\"submit\" disabled={isCreating} data-testid=\"button-submit-thread\">\n                    {isCreating ? \"Posting...\" : \"Post Question\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search questions...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-threads\"\n          />\n        </div>\n\n        {/* Threads List */}\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <div className=\"h-6 bg-muted animate-pulse rounded w-3/4\" />\n                  <div className=\"h-4 bg-muted animate-pulse rounded w-1/2 mt-2\" />\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        ) : filteredThreads.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">\n                {searchQuery ? \"No questions found matching your search\" : \"No questions yet. Be the first to ask!\"}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredThreads.map((thread) => (\n              <Card\n                key={thread.id}\n                className=\"hover-elevate cursor-pointer\"\n                onClick={() => setLocation(`/discussions/${thread.id}`)}\n                data-testid={`card-thread-${thread.id}`}\n              >\n                <CardHeader className=\"space-y-2\">\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{thread.title}</CardTitle>\n                      <CardDescription className=\"mt-2 line-clamp-2\">\n                        {thread.content}\n                      </CardDescription>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Eye className=\"h-4 w-4\" />\n                      <span>{thread.viewCount} views</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <MessageCircle className=\"h-4 w-4\" />\n                      <span>{thread.postCount || 0} answers</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>{formatDistanceToNow(new Date(thread.createdAt), { addSuffix: true })}</span>\n                    </div>\n                    {thread.author && (\n                      <div className=\"ml-auto\">\n                        <span className=\"font-medium\">by {thread.author.name}</span>\n                      </div>\n                    )}\n                  </div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8595},"server/routes/test.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth\";\nimport { can } from \"../middleware/permissions\";\nimport { insertTestSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { testSubmitLimiter } from \"../middleware/rate-limit.js\";\nimport { queueHelpers } from \"../queue\";\n\n// Helper function to check if user has access to a test\nasync function userHasAccessToTest(userId: string, testId: string, userRole: string): Promise<boolean> {\n  // Admin and moderator have access to all tests\n  if (userRole === \"admin\" || userRole === \"moderator\") {\n    return true;\n  }\n\n  // Check if test is in a test series\n  const testSeriesTests = await storage.getTestSeriesTestsByTestId(testId);\n  \n  // If test is not in any test series, it's free and accessible to all\n  if (testSeriesTests.length === 0) {\n    return true;\n  }\n\n  // Check if user has purchased any of the test series this test belongs to\n  for (const tst of testSeriesTests) {\n    const purchase = await storage.getUserPurchase(userId, tst.testSeriesId);\n    if (purchase && purchase.status === \"active\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function testRoutes(app: Express): void {\n  // ============================================================================\n  // TEST ROUTES\n  // ============================================================================\n\n  // Get tests (requires read:Test permission, then applies purchase-based access control)\n  app.get(\"/api/tests\", can('read', 'Test'), async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const filters = {\n        status: req.query.status as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : undefined,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : undefined,\n      };\n      \n      // Admin/moderator get all tests\n      if (currentUser.role === \"admin\" || currentUser.role === \"moderator\") {\n        const tests = await storage.getTests(filters);\n        return res.json(tests);\n      }\n      \n      // For students: get all tests and filter based on access\n      const allTests = await storage.getTests(filters);\n      const accessibleTests = [];\n      \n      for (const test of allTests) {\n        const hasAccess = await userHasAccessToTest(currentUser.id, test.id, currentUser.role);\n        if (hasAccess) {\n          accessibleTests.push(test);\n        }\n      }\n      \n      res.json(accessibleTests);\n    } catch (error) {\n      console.error(\"Error fetching tests:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get single test (requires read:Test permission, then applies purchase-based access control)\n  app.get(\"/api/tests/:id\", can('read', 'Test'), async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const test = await storage.getTest(req.params.id);\n      if (!test) {\n        return res.status(404).json({ error: \"Test not found\" });\n      }\n      \n      // Check if user has access to this test\n      const hasAccess = await userHasAccessToTest(currentUser.id, test.id, currentUser.role);\n      if (!hasAccess) {\n        return res.status(403).json({ error: \"Access denied. Purchase required.\" });\n      }\n      \n      res.json(test);\n    } catch (error) {\n      console.error(\"Error fetching test:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get test questions (requires read:Test permission, then applies purchase-based access control)\n  app.get(\"/api/tests/:id/questions\", can('read', 'Test'), async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const test = await storage.getTest(req.params.id);\n      if (!test) {\n        return res.status(404).json({ error: \"Test not found\" });\n      }\n\n      // Check if user has access to this test\n      const hasAccess = await userHasAccessToTest(currentUser.id, test.id, currentUser.role);\n      if (!hasAccess) {\n        return res.status(403).json({ error: \"Access denied. Purchase required.\" });\n      }\n\n      const questions = await storage.getTestQuestions(req.params.id);\n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching test questions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create test (requires create:Test permission)\n  app.post(\"/api/tests\", can('create', 'Test'), async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const { questionIds, ...testData } = req.body;\n      \n      const validatedData = insertTestSchema.parse({\n        ...testData,\n        createdBy: currentUser.id,\n      });\n      \n      const test = await storage.createTest(validatedData);\n      \n      // Add questions to test if provided\n      if (questionIds && Array.isArray(questionIds) && questionIds.length > 0) {\n        await storage.addQuestionsToTest(test.id, questionIds);\n      }\n      \n      res.status(201).json(test);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating test:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update test (requires update:Test permission)\n  app.patch(\"/api/tests/:id\", can('update', 'Test'), async (req: Request, res: Response) => {\n    try {\n      const { questionIds, ...testData } = req.body;\n      \n      const test = await storage.updateTest(req.params.id, testData);\n      if (!test) {\n        return res.status(404).json({ error: \"Test not found\" });\n      }\n      \n      res.json(test);\n    } catch (error) {\n      console.error(\"Error updating test:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Delete test (requires delete:Test permission)\n  app.delete(\"/api/tests/:id\", can('delete', 'Test'), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteTest(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting test:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ============================================================================\n  // TEST ATTEMPT ROUTES\n  // ============================================================================\n\n  // Get user's test attempts\n  app.get(\"/api/attempts\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const attempts = await storage.getUserTestAttempts(currentUser.id, limit);\n      res.json(attempts);\n    } catch (error) {\n      console.error(\"Error fetching attempts:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Start new test attempt\n  app.post(\"/api/attempts\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const { testId } = req.body;\n      \n      // Verify test exists\n      const test = await storage.getTest(testId);\n      if (!test) {\n        return res.status(404).json({ error: \"Test not found\" });\n      }\n      \n      // Check if user has access to this test\n      const hasAccess = await userHasAccessToTest(currentUser.id, test.id, currentUser.role);\n      if (!hasAccess) {\n        return res.status(403).json({ error: \"Access denied. Purchase required.\" });\n      }\n      \n      const attempt = await storage.createTestAttempt({\n        testId,\n        userId: currentUser.id,\n        maxScore: test.totalMarks,\n      });\n      \n      res.status(201).json(attempt);\n    } catch (error) {\n      console.error(\"Error creating attempt:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get specific attempt\n  app.get(\"/api/attempts/:id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const attempt = await storage.getTestAttempt(req.params.id);\n      \n      if (!attempt) {\n        return res.status(404).json({ error: \"Attempt not found\" });\n      }\n      \n      // Users can only view their own attempts unless admin\n      if (attempt.userId !== currentUser.id && currentUser.role !== \"admin\") {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      res.json(attempt);\n    } catch (error) {\n      console.error(\"Error fetching attempt:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Submit test attempt\n  app.patch(\"/api/attempts/:id/submit\", requireAuth, testSubmitLimiter, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const attempt = await storage.getTestAttempt(req.params.id);\n      \n      if (!attempt) {\n        return res.status(404).json({ error: \"Attempt not found\" });\n      }\n      \n      if (attempt.userId !== currentUser.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      // Update attempt to processing status\n      const updatedAttempt = await storage.updateTestAttempt(req.params.id, {\n        status: \"processing\",\n        submittedAt: new Date(),\n        timeTaken: req.body.timeTaken,\n      });\n      \n      // Queue scoring job for background processing\n      await queueHelpers.scoreTest(attempt.id, attempt.userId, attempt.testId);\n      \n      // Return immediate response\n      res.json({\n        ...updatedAttempt,\n        message: \"Test submitted successfully. Your score is being calculated.\"\n      });\n    } catch (error) {\n      console.error(\"Error submitting attempt:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get attempt responses\n  app.get(\"/api/attempts/:id/responses\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const attempt = await storage.getTestAttempt(req.params.id);\n      \n      if (!attempt) {\n        return res.status(404).json({ error: \"Attempt not found\" });\n      }\n      \n      if (attempt.userId !== currentUser.id && currentUser.role !== \"admin\") {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      const responses = await storage.getTestAttemptResponses(req.params.id);\n      res.json(responses);\n    } catch (error) {\n      console.error(\"Error fetching responses:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Save test response (upsert)\n  app.post(\"/api/attempts/:id/responses\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const attempt = await storage.getTestAttempt(req.params.id);\n      \n      if (!attempt) {\n        return res.status(404).json({ error: \"Attempt not found\" });\n      }\n      \n      if (attempt.userId !== currentUser.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      if (attempt.status !== \"in_progress\") {\n        return res.status(400).json({ error: \"Cannot modify submitted test\" });\n      }\n      \n      const { questionId, selectedAnswer, isMarkedForReview, timeTaken } = req.body;\n      \n      // Check if response already exists\n      const existingResponse = await storage.getTestResponse(req.params.id, questionId);\n      \n      let response;\n      if (existingResponse) {\n        // Update existing response\n        response = await storage.updateTestResponse(existingResponse.id, {\n          selectedAnswer,\n          isMarkedForReview,\n          timeTaken,\n        });\n      } else {\n        // Create new response\n        response = await storage.createTestResponse({\n          attemptId: req.params.id,\n          questionId,\n          selectedAnswer,\n          isMarkedForReview,\n          timeTaken,\n        });\n      }\n      \n      res.status(200).json(response);\n    } catch (error) {\n      console.error(\"Error saving response:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}\n","size_bytes":12307},"client/src/components/FeaturesSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, BarChart3, Users } from \"lucide-react\";\n\nexport default function FeaturesSection() {\n  const features = [\n    {\n      icon: FileText,\n      badge: \"120+ Mock Tests\",\n      title: \"Simulate the real exam\",\n      description: \"Feel the pressure-free practice of full-length, timed papers that mirror the exact interface you'll face on test day.\",\n      imagePosition: \"right\" as const,\n    },\n    {\n      icon: BarChart3,\n      badge: \"AI-Powered Analytics\",\n      title: \"See where to focus next\",\n      description: \"Our adaptive dashboard pinpoints weak topics, predicts your percentile, and builds a personalized revision path in one click.\",\n      imagePosition: \"left\" as const,\n    },\n    {\n      icon: Users,\n      badge: \"27k+ Active Community\",\n      title: \"Stay motivated with peers\",\n      description: \"Earn streak badges, join topic rooms, and discuss tricky questions with mentors who've already cracked the exam.\",\n      imagePosition: \"right\" as const,\n    },\n  ];\n\n  return (\n    <section className=\"py-16 md:py-24\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Learn • Practice • Belong\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n            Transform your exam preparation with our three-pillar approach to focused growth\n          </p>\n        </div>\n\n        <div className=\"space-y-24\">\n          {features.map((feature, index) => (\n            <div\n              key={index}\n              className={`grid grid-cols-1 lg:grid-cols-2 gap-12 items-center ${\n                feature.imagePosition === \"left\" ? \"lg:flex-row-reverse\" : \"\"\n              }`}\n            >\n              <div className={`space-y-6 ${feature.imagePosition === \"left\" ? \"lg:order-2\" : \"\"}`}>\n                <div className=\"inline-flex items-center gap-3\">\n                  <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                    <feature.icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <Badge className=\"shadow-sm\">{feature.badge}</Badge>\n                </div>\n                \n                <h3 className=\"text-2xl md:text-3xl font-bold\">{feature.title}</h3>\n                \n                <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                  {feature.description}\n                </p>\n              </div>\n\n              <div className={feature.imagePosition === \"left\" ? \"lg:order-1\" : \"\"}>\n                <Card className=\"overflow-hidden hover-elevate border-border/50\">\n                  <div className=\"aspect-[4/3] bg-gradient-to-br from-accent via-card to-muted p-6\">\n                    <div className=\"h-full bg-card/50 backdrop-blur-sm rounded-lg border border-border/30 p-6\">\n                      {index === 0 && (\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center\">\n                            <div className=\"h-4 w-32 bg-muted rounded\"></div>\n                            <div className=\"h-8 w-8 rounded-full bg-chart-4/30\"></div>\n                          </div>\n                          <div className=\"h-6 w-2/3 bg-muted rounded\"></div>\n                          <div className=\"grid grid-cols-2 gap-3 pt-4\">\n                            {[1, 2, 3, 4].map((i) => (\n                              <div key={i} className=\"h-16 bg-muted/50 rounded\"></div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      {index === 1 && (\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-3 gap-3\">\n                            {[20, 28, 16].map((h, i) => (\n                              <div key={i} className=\"flex flex-col justify-end h-32\">\n                                <div\n                                  className=\"bg-gradient-to-t from-primary/40 to-primary/10 rounded\"\n                                  style={{ height: `${h * 4}px` }}\n                                ></div>\n                              </div>\n                            ))}\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div className=\"h-3 w-full bg-muted rounded\"></div>\n                            <div className=\"h-3 w-3/4 bg-muted rounded\"></div>\n                          </div>\n                        </div>\n                      )}\n                      {index === 2 && (\n                        <div className=\"space-y-3\">\n                          {[1, 2, 3].map((i) => (\n                            <div key={i} className=\"flex items-center gap-3 p-3 bg-muted/30 rounded-lg\">\n                              <div className=\"w-10 h-10 rounded-full bg-primary/20\"></div>\n                              <div className=\"flex-1 space-y-2\">\n                                <div className=\"h-3 w-2/3 bg-muted rounded\"></div>\n                                <div className=\"h-2 w-1/2 bg-muted/60 rounded\"></div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5648},"server/middleware/permissions.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { defineAbilitiesFor, Action, Subject } from '../casl/abilities';\nimport { getUserPermissionsByRole } from '../storage/role.storage';\nimport type { User } from '@shared/schema';\n\n/**\n * Middleware to check if user has a specific permission using CASL\n * @param action - The action to check (create, read, update, delete, etc.)\n * @param subject - The subject/resource to check (Question, Test, User, etc.)\n */\nexport function can(action: Action, subject: Subject) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // Check if user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const user = req.user as User;\n\n      // Load user's permissions from the database\n      const permissions = await getUserPermissionsByRole(user.role);\n\n      // Create ability with loaded permissions\n      const userWithPermissions = { ...user, permissions };\n      const ability = defineAbilitiesFor(userWithPermissions);\n\n      // Check if user can perform the action\n      if (ability.can(action, subject)) {\n        return next();\n      }\n\n      // User doesn't have permission\n      return res.status(403).json({ \n        error: 'Insufficient permissions',\n        required: `${action}:${subject}`\n      });\n    } catch (error) {\n      console.error('Permission check error:', error);\n      return res.status(500).json({ error: 'Permission check failed' });\n    }\n  };\n}\n\n/**\n * Middleware to check if user has ANY of the specified permissions\n * @param checks - Array of [action, subject] tuples\n */\nexport function canAny(checks: Array<[Action, Subject]>) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const user = req.user as User;\n      const permissions = await getUserPermissionsByRole(user.role);\n      const userWithPermissions = { ...user, permissions };\n      const ability = defineAbilitiesFor(userWithPermissions);\n\n      // Check if user has any of the permissions\n      const hasAnyPermission = checks.some(([action, subject]) => \n        ability.can(action, subject)\n      );\n\n      if (hasAnyPermission) {\n        return next();\n      }\n\n      return res.status(403).json({ \n        error: 'Insufficient permissions',\n        required: checks.map(([action, subject]) => `${action}:${subject}`)\n      });\n    } catch (error) {\n      console.error('Permission check error:', error);\n      return res.status(500).json({ error: 'Permission check failed' });\n    }\n  };\n}\n\n/**\n * Middleware to check if user has ALL of the specified permissions\n * @param checks - Array of [action, subject] tuples\n */\nexport function canAll(checks: Array<[Action, Subject]>) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n\n      const user = req.user as User;\n      const permissions = await getUserPermissionsByRole(user.role);\n      const userWithPermissions = { ...user, permissions };\n      const ability = defineAbilitiesFor(userWithPermissions);\n\n      // Check if user has all permissions\n      const hasAllPermissions = checks.every(([action, subject]) => \n        ability.can(action, subject)\n      );\n\n      if (hasAllPermissions) {\n        return next();\n      }\n\n      return res.status(403).json({ \n        error: 'Insufficient permissions',\n        required: checks.map(([action, subject]) => `${action}:${subject}`)\n      });\n    } catch (error) {\n      console.error('Permission check error:', error);\n      return res.status(500).json({ error: 'Permission check failed' });\n    }\n  };\n}\n\n/**\n * Attach user abilities to the request object for use in route handlers\n * This allows checking permissions within the handler logic\n */\nexport async function attachAbilities(req: Request, res: Response, next: NextFunction) {\n  try {\n    if (req.isAuthenticated()) {\n      const user = req.user as User;\n      const permissions = await getUserPermissionsByRole(user.role);\n      const userWithPermissions = { ...user, permissions };\n      const ability = defineAbilitiesFor(userWithPermissions);\n      \n      // Attach ability to request for use in handlers\n      (req as any).ability = ability;\n    }\n    next();\n  } catch (error) {\n    console.error('Error attaching abilities:', error);\n    next(); // Continue even if there's an error\n  }\n}\n","size_bytes":4650},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { ViewAsRoleProvider } from \"@/contexts/ViewAsRoleContext\";\nimport LandingPage from \"@/pages/LandingPage\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport ForgotPassword from \"@/pages/ForgotPassword\";\nimport ResetPassword from \"@/pages/ResetPassword\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Security from \"@/pages/Security\";\nimport Questions from \"@/pages/Questions\";\nimport QuestionDetail from \"@/pages/QuestionDetail\";\nimport QuestionForm from \"@/pages/QuestionForm\";\nimport Tests from \"@/pages/Tests\";\nimport TestForm from \"@/pages/TestForm\";\nimport TakeTest from \"@/pages/TakeTest\";\nimport TestResults from \"@/pages/TestResults\";\nimport Analytics from \"@/pages/Analytics\";\nimport Discussions from \"@/pages/Discussions\";\nimport ThreadDetail from \"@/pages/ThreadDetail\";\nimport Shop from \"@/pages/Shop\";\nimport MyPurchases from \"@/pages/MyPurchases\";\nimport RoleManagement from \"@/pages/RoleManagement\";\nimport SubjectManagement from \"@/pages/SubjectManagement\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/forgot-password\" component={ForgotPassword} />\n      <Route path=\"/reset-password\" component={ResetPassword} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/security\" component={Security} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/discussions\" component={Discussions} />\n      <Route path=\"/discussions/:id\" component={ThreadDetail} />\n      <Route path=\"/shop\" component={Shop} />\n      <Route path=\"/my-purchases\" component={MyPurchases} />\n      <Route path=\"/questions\" component={Questions} />\n      <Route path=\"/questions/new\" component={QuestionForm} />\n      <Route path=\"/questions/:id\" component={QuestionDetail} />\n      <Route path=\"/questions/:id/edit\" component={QuestionForm} />\n      <Route path=\"/tests\" component={Tests} />\n      <Route path=\"/tests/new\" component={TestForm} />\n      <Route path=\"/tests/:id/edit\" component={TestForm} />\n      <Route path=\"/tests/:id\" component={TakeTest} />\n      <Route path=\"/attempts/:id/results\" component={TestResults} />\n      <Route path=\"/admin/roles\" component={RoleManagement} />\n      <Route path=\"/admin/subjects\" component={SubjectManagement} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ViewAsRoleProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ViewAsRoleProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3167},"server/routes/index.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { authRoutes } from \"./auth.routes\";\nimport { userRoutes } from \"./user.routes\";\nimport { topicRoutes } from \"./topic.routes\";\nimport { questionRoutes } from \"./question.routes\";\nimport { testRoutes } from \"./test.routes\";\nimport { discussionRoutes } from \"./discussion.routes\";\nimport { analyticsRoutes } from \"./analytics.routes\";\nimport { paymentRoutes } from \"./payment.routes\";\nimport { roleRoutes } from \"./role.routes\";\n\nexport function registerRoutes(app: Express): Server {\n  // Register all route modules\n  authRoutes(app);\n  userRoutes(app);\n  topicRoutes(app);\n  questionRoutes(app);\n  testRoutes(app);\n  discussionRoutes(app);\n  analyticsRoutes(app);\n  paymentRoutes(app);\n  roleRoutes(app);\n\n  // Create and return HTTP server (maintained for compatibility with server/index.ts)\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":953},"attached_assets/gate_and_tech_1761642923937.md":{"content":"## File System\r\n\r\nThe project uses a monorepo managed by Turbo Repo or Nx and divides client and server functionality into clearly scoped folders. This allows cross‑package sharing and isolates concerns. The high‑level structure is as follows:\r\n\r\n```\r\n/\r\n├── apps/\r\n│   └── web/                     # Next.js 14 (App Router) application\r\n│       ├── app/                 # App Router pages (route segments)\r\n│       │   ├── (auth)/          # Layout & pages for login/signup, protected pages\r\n│       │   ├── dashboard/       # Role-specific dashboards (student, moderator, admin)\r\n│       │   ├── test-player/     # GATE-like test player UI\r\n│       │   ├── blog/            # Public blog pages\r\n│       │   ├── api/             # API routes (/api/auth, /api/questions, etc.)\r\n│       │   └── layout.tsx       # Root layout using Tailwind & Radix\r\n│       ├── components/          # App-specific React components (forms, navbars)\r\n│       ├── contexts/            # React Context providers (auth, theme)\r\n│       ├── hooks/               # Custom hooks (useExamState, usePermissions)\r\n│       ├── styles/              # Global Tailwind directives and CSS variables\r\n│       ├── public/              # Static assets (images, icons)\r\n│       └── tests/               # Frontend unit and integration tests (Vitest, RTL)\r\n├── packages/\r\n│   ├── ui/                      # Reusable component library (Radix-wrapped components)\r\n│   │   ├── Button/\r\n│   │   │   ├── Button.tsx\r\n│   │   │   └── Button.test.tsx\r\n│   │   ├── Dialog/\r\n│   │   ├── Chart/\r\n│   │   └── index.ts\r\n│   ├── domain/                  # Business domain logic shared by front and back end\r\n│   │   ├── schemas/             # Zod schemas for validation\r\n│   │   │   ├── user.schema.ts\r\n│   │   │   ├── question.schema.ts\r\n│   │   │   ├── test.schema.ts\r\n│   │   │   └── ...\r\n│   │   ├── abilities/           # CASL ability definitions (RBAC rules)\r\n│   │   ├── constants/           # Enum definitions (roles, permissions, question types)\r\n│   │   ├── types.ts             # Shared TypeScript types\r\n│   │   └── index.ts\r\n│   ├── db/                      # Prisma client and migrations\r\n│   │   ├── prisma/\r\n│   │   │   ├── schema.prisma    # DB schema definitions\r\n│   │   │   └── migrations/      # Migration files\r\n│   │   ├── seed.ts              # Seed script for development\r\n│   │   ├── client.ts            # Prisma client instantiation with logging\r\n│   │   └── index.ts\r\n│   ├── worker/                  # Background job processors (BullMQ)\r\n│   │   ├── jobs/\r\n│   │   │   ├── analytics.job.ts # Processes analytics aggregation\r\n│   │   │   ├── email.job.ts     # Sends scheduled emails\r\n│   │   └── queue.ts             # BullMQ queue setup\r\n│   └── types/                   # Generated types (e.g., Razorpay webhooks, PostHog)\r\n├── .github/\r\n│   ├── workflows/               # GitHub Actions CI/CD definitions\r\n│   └── CODEOWNERS\r\n├── docker/\r\n│   ├── Dockerfile.web           # Container for Next.js app\r\n│   ├── Dockerfile.worker        # Container for background workers\r\n│   └── docker-compose.yml       # Local composition of services (Postgres, Redis)\r\n├── .env.example                 # Example environment variables (no secrets)\r\n├── package.json                 # Root dependencies and scripts\r\n├── turbo.json                   # Task pipeline definitions\r\n└── README.md\r\n```\r\n\r\nEach folder is version‑controlled, unit‑tested, and linted according to the global coding rules. API routes live in `apps/web/app/api` because Next.js App Router uses file‑system routing. Reusable UI components live in `packages/ui` and are documented via Storybook. Business logic and validation schemas live in `packages/domain`. Database migrations and Prisma client are centralised in `packages/db`. Background jobs live in `packages/worker`. The worker is a separate process (deployed on DigitalOcean Functions or a worker container) that listens to BullMQ queues.\r\n\r\n## Feature Specifications\r\n\r\n### 1. Account & Identity\r\n\r\n#### Feature goal\r\n\r\nProvide secure account creation, login, theme preference, and multi‑provider authentication (email/password, Google, GitHub) for students, moderators and admins. Support optional two‑factor authentication (2FA) and persistent theme selection.\r\n\r\n#### API relationships\r\n\r\n* Utilises NextAuth.js providers for OAuth flows. The callback URIs must include the full domain and end in `/api/auth/callback/{provider}`.\r\n* Stores user profiles, roles and 2FA settings in PostgreSQL via Prisma.\r\n* Interacts with PostHog for analytics events (signup, login), but only sends anonymous or hashed identifiers.\r\n* Calls Razorpay APIs indirectly when verifying purchases, but not in the core identity flow.\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Sign‑Up & Login**\r\n\r\n   * Email/password registration with email verification. Users provide name, email, password (Argon2 hashed).\r\n   * OAuth via Google and GitHub. During provider setup, ensure \"Authorized redirect URIs\" include the full domain and callback path; configure providers with `clientId` and `clientSecret` environment variables.\r\n   * When signing in with Google/GitHub, automatically create a user record if none exists. Map provider IDs to user accounts.\r\n   * If using Google, restrict to verified emails and optionally a specific domain by checking `profile.email_verified` and domain suffix.\r\n\r\n2. **Two‑Factor Authentication (2FA)**\r\n\r\n   * Optional per‑user; use authenticator apps (TOTP) like Google Authenticator.\r\n   * Provide routes to enable/disable 2FA, generate QR codes, verify tokens. Store hashed secrets per user.\r\n\r\n3. **Theme Preference**\r\n\r\n   * Users can choose dark, light or system theme. Persist selection in the user profile table.\r\n   * React context reads the preference and sets `data-theme` attribute accordingly.\r\n\r\n4. **Session & Token Management**\r\n\r\n   * Use JWT sessions (NextAuth default) stored in cookies with HTTP‑only, Secure flags.\r\n   * Refresh tokens for OAuth providers stored encrypted in DB (if required).\r\n   * Session expiry configurable (e.g., 30 days).\r\n\r\n5. **User Profile**\r\n\r\n   * Endpoint to view and edit user profile (name, avatar, theme, 2FA status).\r\n   * Prevent editing email or provider ID; require re‑auth for sensitive actions (email change, password reset).\r\n\r\n6. **Password Reset**\r\n\r\n   * Generate signed, time‑limited tokens emailed via SendGrid or similar.\r\n   * Provide pages to request reset and set new password.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **Authentication Layer**: Use NextAuth.js configured in `/apps/web/app/api/auth/[...nextauth]/route.ts`. Providers: Email (with SMTP configured), GoogleProvider and GitHubProvider with client secrets stored in DO secrets. The example code from NextAuth docs shows how to configure Google provider with environment variables.\r\n* **2FA Service**: Implement TOTP using `otplib`. Store hashed TOTP secret in a dedicated table or column on `User`. Provide an API route to generate QR codes and verify tokens.\r\n* **Session Management**: Rely on NextAuth's JWT session by default; persist sessions in Postgres for long‑lived sessions if needed.\r\n* **UI**: Sign‑up and login forms built with React‑Hook‑Form and Zod validations; handle provider sign‑in via NextAuth’s `signIn()` method.\r\n\r\n##### Database Schema Design\r\n\r\n* **User** table (`users`):\r\n\r\n  * `id` (UUID, primary key)\r\n  * `name` (string)\r\n  * `email` (string, unique, indexed)\r\n  * `email_verified_at` (timestamp)\r\n  * `password_hash` (string, nullable)\r\n  * `provider` (enum: 'credentials', 'google', 'github')\r\n  * `provider_id` (string, nullable, unique when provider ≠ 'credentials')\r\n  * `theme` (enum: 'light', 'dark', 'system')\r\n  * `twofa_enabled` (boolean)\r\n  * `twofa_secret` (string, nullable, stored encrypted)\r\n  * `role_id` (FK to `roles.id`)\r\n  * timestamps (`created_at`, `updated_at`)\r\n\r\n* **Roles** table (`roles`): Contains role definitions (student, moderator, admin) and references to `permissions`.\r\n\r\n* **Sessions** table (if using NextAuth DB sessions): `id`, `user_id`, `expires`, `session_token`.\r\n\r\n* **VerificationTokens** table: For password reset and email verification.\r\n\r\n##### Comprehensive API Design\r\n\r\n* **POST /api/auth/register**\r\n\r\n  * Request: `{ name, email, password }`.\r\n  * Validates via Zod; returns 400 on invalid input.\r\n  * Hashes password with Argon2id; creates user with role `student`.\r\n  * Triggers verification email via background job.\r\n  * Response: `{ success: true }`.\r\n\r\n* **POST /api/auth/login**\r\n\r\n  * Handled by NextAuth; for credentials, verify password via Argon2id.\r\n  * On success, sets session cookie; returns redirect URL.\r\n\r\n* **GET /api/auth/csrf**: Provided by NextAuth.\r\n\r\n* **POST /api/auth/2fa/enable**\r\n\r\n  * Authenticated route; generates TOTP secret and returns QR code string.\r\n\r\n* **POST /api/auth/2fa/verify**\r\n\r\n  * Verifies token; on success sets `twofa_enabled = true` and stores secret.\r\n\r\n* **PUT /api/users/me**\r\n\r\n  * Authenticated; body may include `name`, `theme`; uses CASL to check permission.\r\n\r\n* **POST /api/auth/password-reset-request**\r\n\r\n  * Body: `{ email }`; creates token and sends email.\r\n\r\n* **POST /api/auth/password-reset**\r\n\r\n  * Body: `{ token, new_password }`; verifies token, updates password.\r\n\r\n##### Frontend Architecture\r\n\r\n* **Component hierarchy**:\r\n\r\n  * `AuthProvider`: wraps Next.js with `SessionProvider` for NextAuth.\r\n  * `AuthLayout`: layout under `/app/(auth)` containing sign‑in and sign‑up pages.\r\n  * `SignUpForm`, `LoginForm`: forms validated with react-hook-form & zod.\r\n  * `OAuthButtons`: triggers `signIn('google')`/`signIn('github')`.\r\n  * `ProfilePage`: fetches user via `/api/users/me`.\r\n  * `TwoFactorSettings`: toggles 2FA; displays QR code.\r\n\r\n* **State management**: Use `SessionProvider` from NextAuth for auth state; store theme in context and persist to `localStorage` and DB.\r\n\r\n* **Routing**: Use Next.js App Router; dynamic route segments for `/auth` pages and protected layouts for `/dashboard`.\r\n\r\n##### Detailed CRUD Operations\r\n\r\n1. **User CRUD**\r\n\r\n   * *Create*: Sign‑up or OAuth sign‑in. Validate uniqueness of email, apply password rules (min length, complexity).\r\n   * *Read*: `GET /api/users/me` returns current user. Admin endpoint `GET /api/users?cursor=` with pagination and role filter.\r\n   * *Update*: `PUT /api/users/:id` restricted to owner or admin; allows updating name, theme, role (admin only), and toggling 2FA.\r\n   * *Delete*: Soft delete on admin only; sets `deleted_at` timestamp and revokes sessions. Hard delete via scheduled job after retention period.\r\n\r\n2. **Session CRUD**\r\n\r\n   * Managed by NextAuth; sessions created on login, invalidated on logout or expiry.\r\n\r\n##### User Experience Flow\r\n\r\n* New user visits `/signup`; enters details or clicks Google/GitHub button. On sign‑up, receives verification email; after verifying, automatically logged in.\r\n* Returning user visits `/login`; enters credentials or uses OAuth. If 2FA enabled, prompted for TOTP code.\r\n* After login, user redirected to dashboard based on role.\r\n* User can open profile settings to change name, theme or enable 2FA.\r\n\r\n##### Security Considerations\r\n\r\n* Use Argon2id for password hashing; enforce password complexity.\r\n* Use HTTPS; `Secure` and `HttpOnly` flags on cookies.\r\n* Use NextAuth’s built‑in CSRF protection for credentials sign‑in.\r\n* Restrict OAuth callback URIs to whitelisted domains.\r\n* Rate‑limit login and sign‑up endpoints via Redis.\r\n* Validate all inputs with Zod; sanitise user‑generated content.\r\n\r\n##### Testing Strategy\r\n\r\n* **Unit tests**: Validate Zod schemas for user input; test password hashing and TOTP verification logic.\r\n* **Integration tests**: Use `next-auth` test utilities to test sign‑in flows; test protected API routes with supertest and mocks.\r\n* **E2E tests**: Use Cypress to simulate sign‑up, login, 2FA flows, theme switching.\r\n* **Performance tests**: Ensure login endpoint responds <200 ms under load.\r\n\r\n##### Data Management\r\n\r\n* Use PostgreSQL `unique` index on email/provider\\_id.\r\n* Use Redis for short‑lived verification tokens to speed up lookup.\r\n* Purge soft‑deleted users after retention period.\r\n* Use cursor‑based pagination for admin list of users (limit 50).\r\n\r\n##### Error Handling & Logging\r\n\r\n* Wrap all API routes with error handlers returning unified error envelopes.\r\n* Log failed login attempts and password reset requests via Pino with anonymised email hash.\r\n* Use Sentry to capture unexpected errors.\r\n\r\n---\r\n\r\n### 2. Role-Based Access Control (RBAC)\r\n\r\n#### Feature goal\r\n\r\nAllow administrators to define roles and assign fine‑grained permissions that control access to resources (questions, tests, analytics, comments). Enforce these permissions both on the client (React) and server (API routes).\r\n\r\n#### API relationships\r\n\r\n* Utilises CASL for ability definitions and permission checks in React and server.\r\n* Relies on the `roles` and `permissions` tables in Postgres.\r\n* Interacts with every other feature via middleware that checks user abilities before allowing actions.\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Role Creation & Management**\r\n\r\n   * Admin can create arbitrary roles (e.g., “subject‑expert”, “content‑editor”) with a set of permissions.\r\n   * Roles can be created, updated, deleted. Deleting a role reassigns associated users to a fallback role or blocks them.\r\n\r\n2. **Permission Bundles**\r\n\r\n   * Permissions are granular (e.g., `create:question`, `update:question`, `publish:test`, `view:analytics`).\r\n   * Admin can toggle individual permissions per role.\r\n\r\n3. **Audit Log**\r\n\r\n   * Every change to roles and permissions is recorded with user ID, timestamp, old/new values.\r\n\r\n4. **Authorization Enforcement**\r\n\r\n   * On the client, components should hide or disable actions if the user cannot perform them.\r\n   * On the server, API routes verify abilities using CASL’s `Ability.can()`.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **CASL Setup**: Define a central `defineAbilitiesFor(user)` function in `/packages/domain/abilities/`. It reads the user’s role and constructs a CASL Ability instance listing allowed actions and conditions.\r\n* **Middleware**: Implement an Express‑like middleware wrapper for Next.js API routes and server components. Before executing handler logic, call `ability.can(action, subject)`; return 403 if not permitted.\r\n* **React Components**: Provide `Can` component that receives `IAbility` and renders children conditionally.\r\n\r\n##### Database Schema Design\r\n\r\n* **Roles** (`roles`):\r\n\r\n  * `id` (UUID)\r\n  * `name` (string, unique)\r\n  * `description` (string)\r\n  * `created_at`, `updated_at`\r\n\r\n* **Permissions** (`permissions`):\r\n\r\n  * `id` (UUID)\r\n  * `action` (string) e.g., 'create', 'read', 'update', 'delete', 'publish'\r\n  * `subject` (string) e.g., 'Question', 'Test', 'Comment'\r\n  * `conditions` (JSON, nullable) for attribute‑based control\r\n  * `created_at`, `updated_at`\r\n\r\n* **RolePermissions** (`role_permissions`):\r\n\r\n  * `role_id` (FK to roles)\r\n  * `permission_id` (FK to permissions)\r\n  * `granted` (boolean)\r\n\r\n* **AuditLogs** (`audit_logs`):\r\n\r\n  * `id` (UUID)\r\n  * `actor_id` (FK to users)\r\n  * `action` (string)\r\n  * `target` (string)\r\n  * `changes` (JSON)\r\n  * `created_at`\r\n\r\n##### Comprehensive API Design\r\n\r\n* **GET /api/roles**\r\n\r\n  * Returns paginated list of roles with their permissions.\r\n  * Query parameters: `cursor`, `limit`, `search`.\r\n\r\n* **POST /api/roles**\r\n\r\n  * Body: `{ name, description, permissions: [ { action, subject } ] }`.\r\n  * Requires admin ability `create:role`.\r\n\r\n* **PUT /api/roles/\\:id**\r\n\r\n  * Updates role name or permissions. Requires `update:role`.\r\n  * Body includes diff of permissions; update `role_permissions` accordingly.\r\n\r\n* **DELETE /api/roles/\\:id**\r\n\r\n  * Requires `delete:role`. Soft delete role and reassign users.\r\n\r\n* **GET /api/permissions**\r\n\r\n  * Returns static list of possible permissions.\r\n\r\n* **POST /api/users/\\:id/role**\r\n\r\n  * Assigns a role to a user. Only admin can call.\r\n\r\n* **GET /api/audit-logs**\r\n\r\n  * Returns changes to roles/permissions with filtering.\r\n\r\n##### Frontend Architecture\r\n\r\n* **Role Management Dashboard**: Under admin dashboard, show table of roles and counts of users per role. Provide actions to create/edit/delete roles via modal dialogues.\r\n* **Permission Editor**: When editing a role, present a grid of subjects vs actions with checkboxes. Save changes via API.\r\n* **Audit Log Page**: Show list of role changes with diff details, sortable by date.\r\n\r\n##### Detailed CRUD Operations\r\n\r\n* *Roles*\r\n\r\n  * **Create**: Validate unique `name`; create role and insert `role_permissions` entries.\r\n  * **Read**: `GET /api/roles`; support search by name, pagination.\r\n  * **Update**: Update role’s name and description; compute added and removed permissions; update pivot table; record audit log.\r\n  * **Delete**: Soft delete (set `deleted_at`); optionally assign to fallback role.\r\n\r\n* *Permissions*\r\n\r\n  * These are mostly static. Provide seeding script to insert base permissions.\r\n  * CRUD for permissions reserved for super‑admins; usually not changed.\r\n\r\n##### User Experience Flow\r\n\r\n* Admin navigates to \"Roles & Permissions\" page. They see existing roles and counts.\r\n* Clicking \"Create Role\" opens a form with name and checkboxes for permissions.\r\n* After creation, role appears in the list and can be assigned to users via \"User Management\" page.\r\n* When editing a role, toggling permissions updates the grid; on save, diff is recorded in audit log.\r\n\r\n##### Security Considerations\r\n\r\n* Only users with `manage:roles` permission can access role API routes.\r\n* Validate inputs; ensure a role always has at least one permission.\r\n* Prevent deletion of the default admin role.\r\n* Logging: record actor, time, and changes.\r\n\r\n##### Testing Strategy\r\n\r\n* Unit tests for ability definitions: verify that each role has correct permissions.\r\n* Integration tests: test API routes with different user roles.\r\n* E2E tests: simulate admin creating a role and verifying new abilities take effect.\r\n\r\n##### Data Management\r\n\r\n* Use `deleted_at` fields on `roles` and cascade deletion on `role_permissions` only when hard deleting.\r\n* Provide migration script to seed default roles and permissions.\r\n\r\n##### Error Handling & Logging\r\n\r\n* Return 403 for unauthorized attempts.\r\n* Use `audit_logs` table to track changes.\r\n* Surface friendly error messages in the UI (“You lack permission to perform this action.”).\r\n\r\n---\r\n\r\n### 3. Question Authoring & Content Management\r\n\r\n#### Feature goal\r\n\r\nAllow moderators to create, import, edit, and publish questions with LaTeX equations, code snippets and media. Provide a rich editor with MDX/KaTeX support and versioning. Support bulk import via CSV/QTI/Markdown.\r\n\r\n#### API relationships\r\n\r\n* CRUD operations on questions stored in Postgres via Prisma.\r\n* File uploads to DigitalOcean Spaces via signed URLs.\r\n* Real‑time duplication detection via backend service (e.g., using full‑text search).\r\n* LaTeX rendered with KaTeX in the client; code snippets highlighted via `prismjs`.\r\n* Bulk import triggers background jobs in `packages/worker`.\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Question Editor**\r\n\r\n   * Rich text and markdown hybrid editor using MDX v2. Users can embed LaTeX (rendered by KaTeX), images (uploaded to Spaces), and code blocks.\r\n   * Autosave drafts; maintain version history; show diff between versions.\r\n   * Duplicate detection: on save, compute hash of question text and search similar questions; warn if duplicates found.\r\n\r\n2. **Question Metadata**\r\n\r\n   * Fields: title, body, options (A/B/C/D, multi‑correct), correct answer(s), explanation, difficulty (easy/medium/hard), subject, tags, time limit (in seconds), status (draft/published).\r\n   * Each question belongs to a \"question bank\" owned by a moderator.\r\n\r\n3. **Bulk Import**\r\n\r\n   * Support CSV and QTI (IMS Question & Test Interoperability). Provide mapping wizard for columns to fields.\r\n   * On upload, parse file, validate each row against schema, and insert.\r\n   * If any row fails validation, present errors with row numbers.\r\n   * Use a background job to process imports and send progress notifications.\r\n\r\n4. **Versioning & Audit**\r\n\r\n   * Every edit creates a new version record with diff; maintain revision history.\r\n   * Allow moderators to revert to previous versions.\r\n\r\n5. **Search & Filter**\r\n\r\n   * Moderators can search by subject, tag, difficulty, and full‑text of question.\r\n   * Provide filters for published/draft.\r\n\r\n6. **Permissions**\r\n\r\n   * Only users with `create:question` can create questions; `update:question` to edit; `delete:question` to soft delete; `publish:question` to publish.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **Editor Front‑end**: Use `@mdx-js/react` for MDX editing and preview. Combine `react-hook-form` with a custom `MDXEditor` component. Use `react-dropzone` for image uploads.\r\n* **Storage**: Use DigitalOcean Spaces to store images and media. Obtain pre‑signed upload URLs from the server (`POST /api/storage/sign`). After upload, store the returned URL in the question body.\r\n* **Backend**: Implement question CRUD in Next.js API routes at `/api/questions`. Validate incoming data with Zod schemas defined in `/packages/domain/schemas/question.schema.ts`. Use Prisma to persist. Use `pg_trgm` extension for full‑text search and similarity detection.\r\n\r\n##### Database Schema Design\r\n\r\n* **Questions** (`questions`):\r\n\r\n  * `id` (UUID)\r\n  * `moderator_id` (FK to users)\r\n  * `title` (string)\r\n  * `body` (text, MDX)\r\n  * `options` (JSON array of option objects with `label`, `value`)\r\n  * `correct_answers` (JSON array of option IDs)\r\n  * `explanation` (text, MDX)\r\n  * `difficulty` (enum)\r\n  * `subject_id` (FK to subjects)\r\n  * `tags` (text array)\r\n  * `time_limit` (integer, seconds)\r\n  * `status` (enum: 'draft', 'published', 'archived')\r\n  * `version_of` (nullable FK to `questions.id` of parent version)\r\n  * `version_number` (integer)\r\n  * `created_at`, `updated_at`\r\n\r\n* **QuestionVersions** (optional separate table) storing historic versions; or use `version_of` and `version_number` on the same table.\r\n\r\n* **Subjects** (`subjects`): `id`, `name`, `slug`, `created_at`.\r\n\r\n* **QuestionBank** (`question_banks`): optional grouping by bank; holds `id`, `name`, `owner_id`.\r\n\r\n##### Comprehensive API Design\r\n\r\n* **GET /api/questions**\r\n\r\n  * Query params: `cursor`, `subject_id`, `difficulty`, `tags`, `status`, `search`, `moderator_id`, `limit`.\r\n  * Returns paginated list with version info (latest version only).\r\n\r\n* **GET /api/questions/\\:id**\r\n\r\n  * Returns full question with MDX body and options.\r\n  * If `version` query param provided, returns specified version.\r\n\r\n* **POST /api/questions**\r\n\r\n  * Body: question data; requires `create:question` ability.\r\n  * Handles image uploads via signed URLs separately.\r\n  * Returns created question ID.\r\n\r\n* **PUT /api/questions/\\:id**\r\n\r\n  * Requires `update:question`; checks if user is owner or has global permission.\r\n  * Creates new version record with incremented version number; sets current version.\r\n\r\n* **DELETE /api/questions/\\:id**\r\n\r\n  * Soft deletes; sets `status = 'archived'`. Requires `delete:question`.\r\n\r\n* **POST /api/questions/import**\r\n\r\n  * Accepts a file upload (CSV/QTI).\r\n  * Parses and enqueues a job (BullMQ) to insert questions.\r\n  * Returns job ID; progress polled via `/api/jobs/:id`.\r\n\r\n* **GET /api/questions/\\:id/versions**\r\n\r\n  * Returns list of versions with diff metadata.\r\n\r\n##### Frontend Architecture\r\n\r\n* **QuestionEditorPage**: Route under `/dashboard/moderator/question/edit/:id` or `/create`. Contains:\r\n\r\n  * Side panel: metadata fields (subject, tags, difficulty).\r\n  * Editor area: MDX editor for question body and explanation; options builder.\r\n  * Toolbar: Save draft, Publish, Version history.\r\n* **QuestionListPage**: Table with filters and search bar. Uses server actions to fetch paginated data.\r\n* **ImportWizard**: Steps: select file, map columns, preview data, confirm import.\r\n* **VersionHistoryModal**: Show list of versions; clicking opens diff viewer (using `react-diff-viewer`).\r\n\r\n##### Detailed CRUD Operations\r\n\r\n* *Questions*\r\n\r\n  * **Create**: Validate title, at least two options, at least one correct answer. Strip any embedded scripts from MDX. Set `version_number = 1` and `version_of = NULL`.\r\n  * **Read**: Support filtering and full‑text search. Use `ILIKE` or `to_tsquery` for PostgreSQL search.\r\n  * **Update**: On edit, insert a new row referencing previous version; set `version_of` to original question ID. Optionally maintain revision diff.\r\n  * **Delete**: Soft delete by marking status. Hard delete only if no tests reference the question.\r\n* *Bulk Import*\r\n\r\n  * Validate file format, parse rows. Provide mapping UI for fields. For each row, call the create endpoint or handle within job. On success, return summary of imported and failed rows.\r\n\r\n##### User Experience Flow\r\n\r\n* Moderator goes to \"Create Question\". They fill metadata fields, write question using rich editor. They can upload images; the editor shows progress.\r\n* On clicking \"Save Draft\", the question is validated, a new version is saved, and they remain on the page. \"Publish\" sets status to `published` and makes question available for test‑series.\r\n* In the question list, moderator can search by tag or subject; clicking a row opens the editor in view/edit mode. Version history is accessible via modal.\r\n* For bulk import, moderator selects file, maps columns, and clicks \"Import\". They can navigate away while a background job processes the file; notifications show when done.\r\n\r\n##### Security Considerations\r\n\r\n* Sanitize MDX to prevent XSS. Only allow whitelisted HTML tags and KaTeX.\r\n* Validate that the moderator has rights to modify the question bank.\r\n* Limit file upload size; restrict file types.\r\n* Rate‑limit API endpoints for import to prevent abuse.\r\n\r\n##### Testing Strategy\r\n\r\n* Unit tests for Zod schema validation for question fields.\r\n* Integration tests for API endpoints, ensuring versioning works.\r\n* E2E tests for question creation/editing flows and bulk import wizard.\r\n* Snapshot tests for MDX rendering to ensure KaTeX output consistent.\r\n\r\n##### Data Management\r\n\r\n* Use `pg_trgm` extension for similarity detection. Create GIN index on `body` column.\r\n* Keep old versions for audit; optionally purge after a retention period.\r\n* Use `question_banks` to group questions and assign ownership; cascade deletes.\r\n\r\n##### Error Handling & Logging\r\n\r\n* Provide descriptive errors for validation failures (e.g., \"At least one correct answer required\").\r\n* Log duplicate detection results for analytics.\r\n* In bulk import, capture row-level errors and return aggregated report.\r\n\r\n---\r\n\r\n### 4. Test‑Series & Practice\r\n\r\n#### Feature goal\r\n\r\nEnable moderators to bundle questions into timed practice tests (section‑wise or full‑length), set price or free, and allow students to attempt them in a realistic exam interface. Provide autosave, resume capability, scoring, percentile calculations and topic‑wise analytics.\r\n\r\n#### API relationships\r\n\r\n* Consumes questions from Question Authoring feature.\r\n* Stores test definitions and attempts in the database.\r\n* Interacts with analytics system to aggregate scores and compute percentiles.\r\n* Payment integration (Razorpay) used if the test is paid.\r\n* Real‑time updates via Socket.IO (e.g., for countdown timer broadcast).\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Test Creation**\r\n\r\n   * Moderator selects questions by filter/tag/subject or individually.\r\n   * Can create sections with independent time limits (optional).\r\n   * Define test properties: title, description, price (0 for free), start/end window, max attempts per user, randomisation (shuffle questions).\r\n   * Choose whether the test is scored as per GATE/PGEE (1‑mark and 2‑mark questions, negative marking).\r\n   * Save as draft and publish when ready.\r\n\r\n2. **Test Player (Student)**\r\n\r\n   * Mirror official GATE interface: question palette, timer header, virtual calculator, instructions page, answer palette (answered, unanswered, flagged).\r\n   * Autosave answers every X seconds; persist to DB.\r\n   * Support MCQ, MSQ (multi‑select), NAT (numerical answer), and code‑snippet questions.\r\n   * Resume incomplete attempts.\r\n   * On submission or timeout, lock answers and compute score instantly.\r\n\r\n3. **Scoring & Analytics**\r\n\r\n   * After completion, show score, percentile (computed across all attempts), accuracy, speed (avg time per question), and topic‑wise heat map.\r\n   * Allow review of answers and explanations (if enabled by moderator).\r\n   * Record attempt data for analytics.\r\n\r\n4. **Purchases**\r\n\r\n   * If test is paid, student must purchase before attempt. Integrate with Razorpay; verify payment signature.\r\n\r\n5. **Attempt Limits & Access Window**\r\n\r\n   * Enforce start/end window (UTC) for availability.\r\n   * Enforce max attempts; show countdown to next attempt if limited.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **Test Definition**: Stored in Postgres. Each test references a list of question IDs and order.\r\n* **Test Player**: Implemented as a dynamic route under `/test-player/[testId]`. Uses Zustand for local exam state (current question index, answers). Timer uses `useEffect` and `setInterval`; persists remaining time to local storage.\r\n* **Autosave Service**: Use `debounce` to send partial answers via API route every 15 seconds.\r\n* **Submission**: At the end, call `/api/tests/:testId/submit` which records final answers and computes results. Score computation and percentile calculation happens server‑side in a transaction.\r\n* **Analytics Worker**: Cron job aggregates scores to compute percentile and topic statistics; results stored in separate table for quick retrieval.\r\n\r\n##### Database Schema Design\r\n\r\n* **Tests** (`tests`):\r\n\r\n  * `id` (UUID)\r\n  * `title` (string)\r\n  * `description` (text)\r\n  * `moderator_id` (FK)\r\n  * `price_cents` (integer)\r\n  * `currency` (string, default 'INR')\r\n  * `start_time` (timestamp)\r\n  * `end_time` (timestamp)\r\n  * `max_attempts` (integer)\r\n  * `duration` (integer, seconds)\r\n  * `randomize_questions` (boolean)\r\n  * `status` (enum: 'draft', 'published', 'archived')\r\n  * `created_at`, `updated_at`\r\n\r\n* **TestSections** (`test_sections`): Optional sections: `id`, `test_id`, `name`, `duration_seconds`.\r\n\r\n* **TestQuestions** (`test_questions`):\r\n\r\n  * `id`\r\n  * `test_id`\r\n  * `question_id`\r\n  * `section_id` (nullable)\r\n  * `order` (integer)\r\n\r\n* **TestPurchases** (`test_purchases`):\r\n\r\n  * `id`\r\n  * `test_id`\r\n  * `student_id`\r\n  * `payment_id` (Razorpay order ID)\r\n  * `paid_at`\r\n  * `amount`\r\n  * `status` (enum: 'pending', 'paid', 'failed')\r\n\r\n* **TestAttempts** (`test_attempts`):\r\n\r\n  * `id`\r\n  * `test_id`\r\n  * `student_id`\r\n  * `start_at`\r\n  * `end_at`\r\n  * `status` (enum: 'in\\_progress', 'submitted', 'timed\\_out')\r\n  * `score` (float)\r\n  * `percentile` (float)\r\n  * `duration_seconds`\r\n  * `created_at`, `updated_at`\r\n\r\n* **TestAnswers** (`test_answers`):\r\n\r\n  * `id`\r\n  * `attempt_id`\r\n  * `question_id`\r\n  * `answer` (JSON)\r\n  * `is_correct` (boolean)\r\n  * `time_spent` (integer, seconds)\r\n\r\n* **TestAnalytics** (`test_analytics`):\r\n\r\n  * Pre‑computed aggregates: `test_id`, `question_id`, `correct_count`, `incorrect_count`, `avg_time`, `topic_accuracy`, `percentile_distribution` JSON, etc.\r\n\r\n##### Comprehensive API Design\r\n\r\n* **GET /api/tests**\r\n\r\n  * Returns paginated tests visible to the user. Include filters (free/paid, subject, status).\r\n\r\n* **GET /api/tests/\\:id**\r\n\r\n  * Returns test metadata and, if the user is authorised, the list of question stubs (without correct answers).\r\n  * If status is draft or user is not authorised, return 403.\r\n\r\n* **POST /api/tests**\r\n\r\n  * Creates a new test definition. Body includes question IDs, duration, sections, price, window. Requires `create:test` permission.\r\n  * Returns test ID.\r\n\r\n* **PUT /api/tests/\\:id**\r\n\r\n  * Updates test definition; restricted to test owner or admin.\r\n\r\n* **DELETE /api/tests/\\:id**\r\n\r\n  * Soft delete test (status = archived).\r\n\r\n* **POST /api/tests/\\:id/publish**\r\n\r\n  * Publishes a draft test after validating it contains questions and is configured properly.\r\n\r\n* **POST /api/tests/\\:id/purchase**\r\n\r\n  * Initiates payment via Razorpay; returns order ID and payment gateway options. Requires user logged in.\r\n  * After payment, Razorpay calls webhook; server verifies signature and updates `test_purchases` status.\r\n\r\n* **POST /api/tests/\\:id/start**\r\n\r\n  * Creates a `test_attempt` record if user has purchase or test is free and within window and attempts left. Returns attempt ID and test payload (question list).\r\n\r\n* **PUT /api/tests/\\:id/attempts/\\:attemptId/answer**\r\n\r\n  * Autosave or final save of answers. Body: `{ answers: [{ questionId, answer, timeSpent }], isSubmit }`.\r\n  * If `isSubmit` is true, marks attempt as `submitted` or `timed_out`, computes score and percentiles.\r\n\r\n* **GET /api/tests/\\:id/attempts/\\:attemptId/result**\r\n\r\n  * Returns result summary with score, percentile, topic analysis, and answer explanations if allowed.\r\n\r\n* **GET /api/tests/\\:id/attempts/me**\r\n\r\n  * Returns list of user’s attempts for this test with statuses.\r\n\r\n##### Frontend Architecture\r\n\r\n* **TestCreationWizard**: Stepper interface for moderators to define test details, choose questions via search/filter, set pricing and schedule.\r\n\r\n* **TestListPage**: Displays list of available tests for students, with price tags and status (coming soon, available, closed).\r\n\r\n* **TestPurchaseModal**: Shows price and payment options; calls `/api/tests/:id/purchase`.\r\n\r\n* **TestPlayer**:\r\n\r\n  * `ExamHeader`: timer, test title, progress.\r\n  * `QuestionPalette`: shows status (answered, unanswered, flagged). Click to jump to question.\r\n  * `QuestionViewer`: renders question MDX, options, answer input, flag toggle.\r\n  * `Footer`: navigation (Next, Previous), Save & Submit.\r\n  * `SummaryModal`: appears when time expires or user clicks submit; confirms final submission.\r\n\r\n* **ResultPage**: Displays score, percentile, chart of topic performance using Chart.js via `react-chartjs-2`.\r\n\r\n* **State Management**: Use Zustand store (`useExamStore`) to keep exam state. Persist partial answers to local storage in case of reload.\r\n\r\n##### Detailed CRUD Operations\r\n\r\n* *Tests*\r\n\r\n  * **Create**: Validate at least one question; price ≥0; start time < end time; duration >0. Insert into `tests`, `test_sections`, `test_questions`.\r\n  * **Read**: If user is a moderator, they can view draft tests; students only see published tests within window.\r\n  * **Update**: Only before publishing. After publish, only description and schedule can be updated.\r\n  * **Delete**: Soft delete; remove from listings; if attempts exist, cannot hard delete.\r\n\r\n* *Attempts*\r\n\r\n  * **Create**: On start, create attempt record, set start time; attach randomised question order if randomization enabled.\r\n  * **Read**: Only attempt owner or moderator can view attempts.\r\n  * **Update**: During test, update answers. On submit, compute results.\r\n  * **Delete**: Admin can delete attempts; cascade delete answers.\r\n\r\n##### User Experience Flow\r\n\r\n* Student browses tests; selects one. If free, clicks \"Start Test\"; if paid, clicks \"Buy\", completes payment, then starts.\r\n* When starting, a modal shows instructions and rules. On confirm, test begins and timer starts.\r\n* Student navigates through questions; flags uncertain ones; autosaves responses.\r\n* When time expires or user clicks submit, test ends and summary screen displays results.\r\n* Student can review each question with correct answer and explanation if allowed.\r\n* Student can attempt again if attempts remain and within window.\r\n\r\n##### Security Considerations\r\n\r\n* Prevent early access to answers by never sending correct answers to the client until submission.\r\n* Use server‑side timer verification; client timer is for UX only.\r\n* Ensure payments validated via Razorpay signature verification; call Razorpay API via secret key.\r\n* Rate‑limit test start and answer submissions.\r\n* Protect against tampering: on autosave, verify attempt ID belongs to user; verify question IDs belong to test.\r\n\r\n##### Testing Strategy\r\n\r\n* Unit tests: scoring algorithm for different question types; randomization logic.\r\n* Integration tests: test start and submission endpoints with various edge cases (window expired, no attempts left).\r\n* E2E tests: simulate a full test attempt, autosave/resume, and final scoring.\r\n* Performance: load test to ensure the player can handle hundreds of concurrent connections; compute scoring within 500 ms.\r\n\r\n##### Data Management\r\n\r\n* Use indexes on `test_id`, `student_id` in `test_attempts` for quick lookup.\r\n* Retain attempts for analytics; summarise data in `test_analytics` to avoid heavy queries.\r\n* Archive expired tests (status `archived`) and hide from listings.\r\n\r\n##### Error Handling & Logging\r\n\r\n* Provide clear errors (e.g., “Test not yet open”); handle race conditions when user tries to start after window closed.\r\n* Log events (test started, ended) with user ID, test ID.\r\n* Use Sentry to capture unhandled exceptions in test player.\r\n\r\n---\r\n\r\n### 5. Analytics & Reporting\r\n\r\n#### Feature goal\r\n\r\nProvide students with detailed feedback on their performance (accuracy, speed, percentile, weak topics) and moderators/admins with cohort‑level statistics, revenue reports, and exportable data. Support scheduled email reports.\r\n\r\n#### API relationships\r\n\r\n* Reads data from `test_attempts`, `test_answers`, and `test_analytics`.\r\n* Writes aggregated metrics to `test_analytics` and caches heavy computations in Redis.\r\n* Sends reports via BullMQ jobs using worker.\r\n* Exposes endpoints for front‑end dashboards and CSV/Excel exports.\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Student Analytics**\r\n\r\n   * After each test, show personal score, percentile, accuracy per subject/topic, average time per question, and charts comparing with cohort.\r\n   * Provide trends across multiple attempts (e.g., improvement over time).\r\n   * Allow export of personal results as PDF.\r\n\r\n2. **Moderator/Admin Analytics**\r\n\r\n   * View aggregate performance of tests: average score, distribution histogram, hardest/easiest questions, drop‑off rates.\r\n   * Filter by date range, subject, or cohort (e.g., branch/college if provided via profile).\r\n   * Export data as CSV/Excel for offline analysis.\r\n   * Schedule weekly or monthly email reports summarising revenue (from purchases) and participation.\r\n\r\n3. **Real‑time Leaderboard**\r\n\r\n   * Display leaderboard of top students by points or scores.\r\n   * Filter by branch/college or subject.\r\n   * Update in real time via Socket.IO.\r\n\r\n4. **Privacy & Anonymity**\r\n\r\n   * Student analytics are aggregate and anonymised; only share percentile and distributions, not other students’ scores.\r\n   * Optionally allow students to hide their identity on leaderboards.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **Analytics Processor**: Background job (BullMQ) triggered after each test submission. Aggregates answers, computes metrics (correct/incorrect counts, average time, percentile). Stores results in `test_analytics` and updates `leaderboards` in Redis.\r\n* **API Layer**: Provides endpoints for retrieving analytics; caches results with TTL in Redis to reduce DB load.\r\n* **Frontend Dashboards**: Charts built with `react-chartjs-2`. Use server components to fetch analytics data via API routes.\r\n* **Email Scheduler**: Cron job runs daily/weekly to generate CSV summaries and send emails via SendGrid.\r\n\r\n##### Database Schema Design\r\n\r\n* **TestAnalytics** (see previous section) stores aggregated per test metrics.\r\n* **Leaderboard** can be stored in Redis sorted sets: key `leaderboard:<testId>` with score as sorting value. Additional metadata stored in DB.\r\n* **StudentTopicAnalytics**: Optional table storing per‑student per‑topic stats across all tests (topic\\_id, student\\_id, correct\\_count, incorrect\\_count, avg\\_time).\r\n* **Reports**: `reports` table storing generated report files and metadata (report type, generated\\_at, download\\_url).\r\n\r\n##### Comprehensive API Design\r\n\r\n* **GET /api/analytics/test/\\:testId/student**\r\n\r\n  * Authenticated; returns the requesting student’s performance summary for the specified test (score, percentile, topic breakdown).\r\n\r\n* **GET /api/analytics/test/\\:testId**\r\n\r\n  * Moderator/Admin only; returns aggregate analytics for a test, including distributions.\r\n\r\n* **GET /api/analytics/student/trends**\r\n\r\n  * Returns a student's performance trend across multiple tests.\r\n\r\n* **GET /api/analytics/leaderboard**\r\n\r\n  * Query params: `testId`, `limit`, `filterBy`, `cursor`.\r\n  * Returns sorted list of students with scores and ranks.\r\n\r\n* **GET /api/reports**\r\n\r\n  * Admin only; returns list of generated reports with download URLs.\r\n\r\n* **POST /api/reports/generate**\r\n\r\n  * Admin only; body: `{ type: 'revenue' | 'cohort' | 'performance', range: { from, to } }`.\r\n  * Enqueues job to create a report; returns job ID.\r\n\r\n* **POST /api/reports/schedule**\r\n\r\n  * Admin only; sets up recurring report (weekly/monthly) via cron expression.\r\n\r\n##### Frontend Architecture\r\n\r\n* **Student Result Page**: Already described under test feature; includes charts for topic accuracy (bar chart) and percentile distribution (histogram).\r\n* **Student Trend Page**: Shows line chart of scores over time; displays improvement in weak topics.\r\n* **Moderator Test Analytics Page**: Table summarising each test; clicking a test opens detailed charts (score distribution, question difficulty distribution, attempts over time).\r\n* **Admin Dashboard**: High‑level KPIs (total revenue, active students, tests created) and ability to schedule reports.\r\n* **Leaderboard Component**: Displays top performers; auto‑updates via Socket.IO.\r\n\r\n##### Detailed CRUD Operations\r\n\r\n* *Reports*\r\n\r\n  * **Create**: Generate on demand or scheduled. Store file in DigitalOcean Spaces; record metadata in `reports`.\r\n  * **Read**: List reports; download via signed URL.\r\n  * **Update/Delete**: Only for scheduled tasks; update cron or remove schedule.\r\n\r\n##### User Experience Flow\r\n\r\n* Student finishes test and immediately sees analytics. They can navigate to a \"My Progress\" page to view trends.\r\n* Moderator opens analytics page; selects a test and sees aggregated metrics. They can export to CSV by clicking \"Export\".\r\n* Admin sets up a weekly revenue report; receives email with attached CSV.\r\n\r\n##### Security Considerations\r\n\r\n* Restrict analytics endpoints to authorised roles (student can only see own results).\r\n* Ensure exported files do not contain personal identifiers (anonymise user IDs).\r\n* Use signed URLs for report downloads.\r\n* Limit leaderboard to show only top N users and allow opt‑out for students.\r\n\r\n##### Testing Strategy\r\n\r\n* Unit tests for percentile calculation and chart data transformation.\r\n* Integration tests for analytics API; ensure results match expected aggregates.\r\n* E2E tests for analytics dashboards; verify charts render correctly.\r\n* Performance tests: heavy queries should run within defined budgets.\r\n\r\n##### Data Management\r\n\r\n* Use materialised views or pre‑aggregated tables for expensive analytics (e.g., percentiles).\r\n* Periodically clean up old analytics data if tests are archived.\r\n* Use Redis sorted sets for leaderboards; update atomically.\r\n\r\n##### Error Handling & Logging\r\n\r\n* Provide fallback when analytics not yet computed (display \"Processing...\").\r\n* Capture and log failures of analytics jobs; retry up to 5 times (exponential backoff).\r\n* Notify moderators/admins if scheduled report generation fails.\r\n\r\n---\r\n\r\n### 6. Community & Gamification\r\n\r\n#### Feature goal\r\n\r\nFoster peer‑to‑peer learning by allowing students to discuss questions, earn points for correct explanations, and engage in leaderboards. Provide automatic spam detection and moderation tools. Implement gamification with badges, streaks, and leaderboard filtered by college/branch.\r\n\r\n#### API relationships\r\n\r\n* Comments and votes stored in DB; retrieval integrated with question pages.\r\n* Points and badges updated via background jobs.\r\n* Real‑time comment updates via Socket.IO.\r\n* Spam detection can call an external ML service or use simple heuristics.\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Threaded Comments**\r\n\r\n   * Students can comment under questions and replies (nested).\r\n   * Comments can include markdown (limited) and LaTeX.\r\n   * Students can upvote (or like) comments; correct answer accepted by moderator or community if threshold reached.\r\n   * Sorting by \"Top\" (most upvotes) or \"Newest\".\r\n\r\n2. **Gamification Points & Badges**\r\n\r\n   * Points awarded for upvotes received, correct answer accepted, test completion streaks, daily login.\r\n   * Badges earned at thresholds (e.g., \"Top Contributor\", \"Streak Master\").\r\n   * Points can be spent on perks (e.g., unlocking hint or discount).\r\n\r\n3. **Moderation**\r\n\r\n   * Automatic spam detection using heuristic (length, link count, similarity). Comments above threshold go to moderation queue.\r\n   * Students with ≥ X points can flag comments; ≥ Y can close threads; moderators can lock or delete.\r\n   * Provide UI for moderators to review flagged items and take action.\r\n\r\n4. **Leaderboard**\r\n\r\n   * Display ranking by points; filter by branch/college; show top N.\r\n   * Option for students to remain anonymous or use nickname.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **Comment Service**: API routes under `/api/comments`. Use Prisma to manage hierarchical structure via `parent_comment_id`.\r\n* **Vote/Point System**: Use `votes` table for upvotes. Use triggers or background job to recalculate points and update `user_points` table.\r\n* **Gamification Engine**: Cron job updates streaks, awards badges, recalculates leaderboards.\r\n* **Spam Detector**: Either integrate a third‑party ML API or implement heuristics (e.g., comment length < 3 characters flagged; too many links flagged).\r\n* **Socket.IO**: Use `io.to(room).emit` to broadcast new comments or updates to users viewing a question.\r\n\r\n##### Database Schema Design\r\n\r\n* **Comments** (`comments`):\r\n\r\n  * `id` (UUID)\r\n  * `question_id` (FK)\r\n  * `author_id` (FK to users)\r\n  * `parent_comment_id` (nullable FK to comments)\r\n  * `body` (text, markdown)\r\n  * `status` (enum: 'active', 'flagged', 'pending', 'deleted')\r\n  * `spam_score` (float)\r\n  * `created_at`, `updated_at`\r\n\r\n* **Votes** (`votes`):\r\n\r\n  * `id`\r\n  * `comment_id`\r\n  * `voter_id`\r\n  * `value` (int; 1 for upvote)\r\n  * `created_at`\r\n\r\n* **UserPoints** (`user_points`):\r\n\r\n  * `user_id`\r\n  * `points` (int)\r\n  * `streak` (int)\r\n  * `last_login_at` (timestamp)\r\n\r\n* **Badges** (`badges`):\r\n\r\n  * `id`, `slug`, `name`, `description`, `points_required`, etc.\r\n\r\n* **UserBadges** (`user_badges`):\r\n\r\n  * `user_id`, `badge_id`, `awarded_at`\r\n\r\n* **Flags** (`flags`):\r\n\r\n  * `id`, `comment_id`, `flagger_id`, `reason`, `created_at`, `status`\r\n\r\n##### Comprehensive API Design\r\n\r\n* **POST /api/comments**\r\n\r\n  * Body: `{ questionId, parentCommentId?, body }`.\r\n  * Validates length, markdown; checks spam.\r\n  * Saves with `status = 'pending'` if spam score high; else `active`.\r\n  * Broadcasts via Socket.IO.\r\n\r\n* **GET /api/comments/\\:questionId**\r\n\r\n  * Returns threaded comments for the question; supports pagination by parent thread.\r\n  * Includes vote counts and user’s vote status.\r\n\r\n* **POST /api/comments/\\:id/vote**\r\n\r\n  * Body: `{ value: 1 | -1 }`; toggles vote.\r\n  * Updates `votes` and recalculates user points in background.\r\n\r\n* **POST /api/comments/\\:id/flag**\r\n\r\n  * Students with enough points can flag; body includes `reason`.\r\n  * Sets comment status to `flagged`; notifies moderators.\r\n\r\n* **POST /api/moderation/comments/\\:id**\r\n\r\n  * Moderator actions: `{ action: 'approve' | 'delete' | 'ban' }`.\r\n  * Approve sets status to `active`; delete marks comment as `deleted`; ban may restrict user.\r\n\r\n* **GET /api/leaderboard**\r\n\r\n  * Query params: `branch`, `college`, `limit`.\r\n  * Returns top users with points and badges.\r\n\r\n##### Frontend Architecture\r\n\r\n* **CommentThread** component: recursively renders comments and children; includes upvote button and flag button.\r\n* **CommentForm**: Markdown editor with preview; uses `react-hook-form`.\r\n* **GamificationBadge**: Shows badges on user profile and leaderboard.\r\n* **ModerationDashboard**: For moderators to review flagged comments.\r\n* **LeaderboardPage**: Shows filters and ranking; uses infinite scroll or pagination.\r\n\r\n##### Detailed CRUD Operations\r\n\r\n* *Comments*\r\n\r\n  * **Create**: Validate markdown; compute spam score; insert record.\r\n  * **Read**: Query by question; return nested threads with votes.\r\n  * **Update**: Only author or moderator can edit; maintain edit history.\r\n  * **Delete**: Soft delete; mark as deleted; do not remove from DB to maintain thread context.\r\n\r\n* *Votes*\r\n\r\n  * **Create/Update**: Upvoting toggles entry; update or insert `votes`.\r\n  * **Delete**: Removing upvote deletes record.\r\n\r\n* *Flags*\r\n\r\n  * **Create**: Students create flag; increments `flags` count; triggers moderation queue.\r\n  * **Update**: Moderator updates status.\r\n  * **Delete**: Remove flag when resolved.\r\n\r\n##### User Experience Flow\r\n\r\n* User reads a question and sees existing comments; they can reply or upvote.\r\n* When posting a comment, they type in markdown; preview updates; clicking \"Submit\" sends to server. If comment flagged as spam, it appears only after moderator approval.\r\n* Upvoting increments points for the comment author.\r\n* As points accumulate, badges appear on the user’s profile; leaderboards show ranking.\r\n* Moderator dashboard shows flagged comments; moderators approve or delete.\r\n\r\n##### Security Considerations\r\n\r\n* Rate‑limit comment creation and upvotes to prevent spam.\r\n* Sanitize markdown to allow only safe tags (e.g., `<strong>`, `<em>`, `<code>`) and KaTeX.\r\n* Prevent CSRF on comment and vote endpoints; use NextAuth session tokens.\r\n* Ensure user cannot upvote their own comment multiple times.\r\n\r\n##### Testing Strategy\r\n\r\n* Unit tests for spam detection function; markdown sanitization.\r\n* Integration tests for comment creation, voting, and moderation actions.\r\n* E2E tests for threaded comments UI and gamification flows.\r\n\r\n##### Data Management\r\n\r\n* Maintain comment counts and votes counts in question table for quick display.\r\n* Periodically archive old comments if questions archived.\r\n* Use caching for leaderboard queries; update when points change.\r\n\r\n##### Error Handling & Logging\r\n\r\n* Return helpful errors (e.g., “Comment too short”).\r\n* Log flagged comments and moderation actions for audit.\r\n* Notify moderators via in‑app notifications when flagged items accumulate.\r\n\r\n---\r\n\r\n### 7. Payments & E‑commerce\r\n\r\n#### Feature goal\r\n\r\nIntegrate Razorpay Standard Checkout for paid test‑series. Allow moderators to set fixed prices, apply coupons, and generate GST‑compliant invoices. Verify payment signatures and handle webhooks securely.\r\n\r\n#### API relationships\r\n\r\n* Calls Razorpay’s Orders API to create orders and verify payment signatures.\r\n* Stores orders, transactions, and invoices in Postgres.\r\n* Uses background worker to send invoice emails.\r\n* Interacts with test creation module to mark tests as purchased.\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Product Catalog**\r\n\r\n   * Tests (or packs) can be priced individually. Admin can also create bundles containing multiple tests.\r\n   * Admin can set limited‑time offers or coupons (percentage or fixed discount).\r\n\r\n2. **Checkout Flow**\r\n\r\n   * Student initiates purchase; server creates a Razorpay order with amount, currency, receipt.\r\n   * Client loads Razorpay checkout script and collects payment details.\r\n   * On payment completion, Razorpay calls a webhook; server verifies signature and marks purchase as paid.\r\n\r\n3. **Invoices**\r\n\r\n   * After payment success, generate invoice with GST breakdown and unique invoice number.\r\n   * Send PDF invoice via email to student; store invoice details.\r\n   * Admin can download invoice via dashboard.\r\n\r\n4. **Refunds & Failed Payments**\r\n\r\n   * Provide admin tools to initiate refunds via Razorpay API.\r\n   * Handle payment failures; allow retry.\r\n\r\n5. **Coupons & Offers**\r\n\r\n   * Admin can create coupons with code, discount type, expiry, usage limit.\r\n   * Students apply coupon at checkout; server verifies and adjusts order amount.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **Orders API**: Expose `/api/payments/create-order` which accepts `testId` and optional `couponCode`. Validates eligibility, calculates amount, calls Razorpay Orders API using secret key. Returns order ID.\r\n* **Webhook Handler**: `/api/payments/webhook` receives events (`payment.captured`, `payment.failed`). Verify signature using Razorpay secret; update `test_purchases` and create `transactions` record.\r\n* **Invoice Generator**: Use a Node library like `pdfkit` to create PDF invoices. Run in worker to avoid blocking.\r\n* **Coupon Service**: API routes to create/update/delete coupons; apply coupon logic in checkout flow.\r\n\r\n##### Database Schema Design\r\n\r\n* **TestPurchases** (see earlier) holds purchase records.\r\n\r\n* **Transactions** (`transactions`):\r\n\r\n  * `id`, `purchase_id`, `razorpay_order_id`, `razorpay_payment_id`, `status`, `amount`, `currency`, `payment_method`, `captured_at`.\r\n\r\n* **Coupons** (`coupons`):\r\n\r\n  * `id`, `code` (string, unique), `discount_type` (enum: 'percentage', 'fixed'), `discount_value`, `expiry_date`, `usage_limit`, `used_count`, `applicable_test_id` (nullable), `created_at`.\r\n\r\n* **Invoices** (`invoices`):\r\n\r\n  * `id`, `purchase_id`, `invoice_number`, `file_url`, `gst_number`, `created_at`.\r\n\r\n##### Comprehensive API Design\r\n\r\n* **POST /api/payments/create-order**\r\n\r\n  * Body: `{ testId, couponCode }`.\r\n  * Validates user hasn’t purchased test; test is published and available.\r\n  * Calculates final amount considering coupon; creates Razorpay order via API and returns order details to client.\r\n\r\n* **POST /api/payments/verify**\r\n\r\n  * After payment on client, call this API with `{ razorpayPaymentId, razorpayOrderId, razorpaySignature, testId }`.\r\n  * Server verifies signature; if valid, updates `test_purchases` status to `paid`; initiates invoice generation job.\r\n\r\n* **POST /api/payments/webhook**\r\n\r\n  * Receives events; verifies signature; updates corresponding records. Must handle asynchronous events like refund.\r\n\r\n* **POST /api/coupons**\r\n\r\n  * Admin creates coupon; body includes details.\r\n  * Validates uniqueness; returns coupon.\r\n\r\n* **PUT /api/coupons/\\:id** and **DELETE /api/coupons/\\:id**.\r\n\r\n* **GET /api/invoices/\\:purchaseId**\r\n\r\n  * Returns signed download URL for invoice PDF.\r\n\r\n##### Frontend Architecture\r\n\r\n* **CheckoutModal**: When purchasing a test, display order summary and input for coupon code. On clicking Pay, call `create-order`, then open Razorpay checkout using the returned order ID.\r\n* **PaymentResultPage**: After payment, call `/api/payments/verify` via client action; show success/failure message.\r\n* **CouponsAdminPage**: Form to create and list coupons; allow editing or deleting.\r\n* **InvoiceLink**: On user’s purchase history, show a link to download invoice once available.\r\n\r\n##### Detailed CRUD Operations\r\n\r\n* *Coupons*\r\n\r\n  * **Create**: Validate code is unique and expiry date > now. Insert into DB.\r\n  * **Read**: List active coupons; filter by test.\r\n  * **Update**: Update discount, expiry, usage limit.\r\n  * **Delete**: Soft delete; do not allow deletion if already used.\r\n\r\n* *Transactions*\r\n\r\n  * **Create**: On successful payment or refund event, record transaction details.\r\n  * **Read**: Admin can view transaction history by test or user.\r\n\r\n##### User Experience Flow\r\n\r\n* Student selects a paid test; modal shows price and coupon field. They enter coupon (if any).\r\n* On \"Pay\", server returns order; Razorpay opens; user completes payment.\r\n* On success, client calls verify API; user sees \"Payment successful\" and can start test.\r\n* Later, they can download invoice from purchase history.\r\n* If payment fails, user sees error and can retry.\r\n\r\n##### Security Considerations\r\n\r\n* Store Razorpay secret keys securely in environment variables; never expose to client.\r\n* Verify Razorpay webhook signatures; restrict webhook route to Razorpay IP addresses if possible.\r\n* Rate‑limit coupon attempts to prevent brute force.\r\n* Ensure invoice numbers are sequential and unique.\r\n\r\n##### Testing Strategy\r\n\r\n* Unit tests for coupon calculation logic and signature verification.\r\n* Integration tests mocking Razorpay API; test order creation and webhook handling.\r\n* E2E tests for full purchase flow.\r\n* Security tests to ensure webhook cannot be forged.\r\n\r\n##### Data Management\r\n\r\n* Keep transaction logs for audits.\r\n* Archive old invoices to cheaper storage after a period.\r\n* Track coupon usage to enforce limits.\r\n\r\n##### Error Handling & Logging\r\n\r\n* Return meaningful errors (e.g., “Coupon expired”).\r\n* Log failed payments with reason.\r\n* Notify admin if webhook verification fails.\r\n\r\n---\r\n\r\n### 8. Adaptive Test Generator & Personalisation (Post‑MVP)\r\n\r\n#### Feature goal\r\n\r\nAfter MVP, provide an adaptive engine that generates personalised tests based on student’s weak topics and past performance, and use GPT‑assisted explanation drafts for moderators.\r\n\r\n#### API relationships\r\n\r\n* Utilises analytics data to determine weak topics.\r\n* Calls AI models (e.g., OpenAI or local LLM) to generate question explanations.\r\n* Interacts with question authoring system to create new questions.\r\n\r\n#### Detailed feature requirements\r\n\r\n1. **Adaptive Test Generator**\r\n\r\n   * An algorithm selects questions that target a student’s weakest topics.\r\n   * Generate tests of specified length and difficulty distribution.\r\n   * Adjust difficulty dynamically based on real‑time performance (adaptive testing).\r\n\r\n2. **GPT‑assisted Explanations**\r\n\r\n   * When moderators draft explanations, provide AI suggestions based on question body and correct answer.\r\n   * Moderators can edit suggestions before publishing.\r\n   * Log AI usage for accountability.\r\n\r\n#### Detailed implementation guide\r\n\r\n##### System Architecture Overview\r\n\r\n* **Recommendation Engine**: Resides in worker; uses analytics tables to pick questions by tag difficulty. Could implement Item Response Theory (IRT) or simpler heuristics initially.\r\n* **AI Integration**: Use an API (e.g., OpenAI) with streaming responses. Provide server route `/api/ai/explanation` which calls the model and streams output to client.\r\n* **UI**: On moderator’s question editor, show a \"Generate Explanation\" button; call AI endpoint and insert suggestion into explanation field.\r\n\r\n##### Database Schema Design\r\n\r\n* **AdaptiveSessions** (`adaptive_sessions`):\r\n\r\n  * `id`, `student_id`, `started_at`, `current_question_id`, `remaining_questions`, `session_data` JSON.\r\n\r\n* **AIUsageLogs** (`ai_usage_logs`):\r\n\r\n  * `id`, `user_id`, `feature` (e.g., explanation), `tokens_used`, `cost`, `timestamp`.\r\n\r\n##### Comprehensive API Design\r\n\r\n* **POST /api/adaptive-tests/start**\r\n\r\n  * Body: `{ topicIds, numQuestions, difficultyDistribution }`; returns session ID and first question.\r\n\r\n* **POST /api/adaptive-tests/\\:sessionId/answer**\r\n\r\n  * Body: `{ questionId, answer, timeSpent }`; server updates session state and returns next question or finish result.\r\n\r\n* **POST /api/ai/explanation**\r\n\r\n  * Body: `{ questionBody, correctAnswer }`; server calls AI model and streams explanation.\r\n\r\n##### Frontend Architecture\r\n\r\n* Adaptive test player similar to normal test player but fetches questions one by one based on server decisions.\r\n* Explanation assistant integrated into question editor UI.\r\n\r\n##### Considerations\r\n\r\n* Ensure cost control by limiting AI usage; require moderator confirmation.\r\n* Provide fallback if AI fails.\r\n* Data privacy: do not send personal data to AI service.\r\n\r\n---\r\n\r\n### Interactions Between Features\r\n\r\n* **Account & Identity ↔ RBAC**: On login, user’s role determines their CASL abilities. The frontend uses `useAbility` to enable or disable UI elements accordingly.\r\n* **RBAC ↔ Question/Test/Analytics**: Each CRUD operation checks the user’s permissions before proceeding. For instance, only moderators with `create:test` can create tests. Analytics endpoints restrict access to the student’s own data or require `view:analytics` permission.\r\n* **Question Authoring ↔ Test Series**: Tests reference questions; do not allow deletion or modification of questions that are part of published tests. Use database constraints and CASL conditions to enforce.\r\n* **Community ↔ Gamification ↔ Analytics**: Points from community interactions influence leaderboards displayed in Analytics/Community pages. Use common `user_points` table.\r\n* **Payments ↔ Tests**: Payment status controls access to paid tests. Payment verification updates `test_purchases`, and Test player checks this before starting an attempt.\r\n* **Analytics ↔ Adaptive Test Generator**: Adaptive engine uses analytics data to determine weak topics; an additional job regularly summarises student performance by topic.\r\n* **AI Explanations ↔ Question Authoring**: AI suggestions are an optional assist; moderators still need `create:question` permission to publish.\r\n\r\nEach feature must consider the others during implementation to avoid circular dependencies and maintain a coherent user experience.\r\n","size_bytes":62458},"server/storage/test.storage.ts":{"content":"import {\n  tests,\n  testQuestions,\n  testAttempts,\n  testResponses,\n  questions,\n  type Test,\n  type InsertTest,\n  type TestAttempt,\n  type InsertTestAttempt,\n  type TestResponse,\n  type InsertTestResponse,\n  type Question,\n} from \"@shared/schema\";\nimport { db } from \"../db\";\nimport { eq, and, desc, asc } from \"drizzle-orm\";\n\nexport class TestStorage {\n  async getTest(id: string): Promise<Test | undefined> {\n    const [test] = await db.select().from(tests).where(eq(tests.id, id));\n    return test || undefined;\n  }\n\n  async getTests(filters?: {\n    status?: string;\n    isPro?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Test[]> {\n    const conditions = [];\n\n    if (filters?.status) {\n      conditions.push(eq(tests.status, filters.status as any));\n    }\n    if (filters?.isPro !== undefined) {\n      conditions.push(eq(tests.isPro, filters.isPro));\n    }\n\n    const query = conditions.length > 0\n      ? db.select().from(tests).where(and(...conditions))\n      : db.select().from(tests);\n\n    return await query\n      .orderBy(desc(tests.createdAt))\n      .limit(filters?.limit || 50)\n      .offset(filters?.offset || 0);\n  }\n\n  async createTest(insertTest: InsertTest): Promise<Test> {\n    const [test] = await db\n      .insert(tests)\n      .values(insertTest)\n      .returning();\n    return test;\n  }\n\n  async updateTest(id: string, data: Partial<InsertTest>): Promise<Test | undefined> {\n    const [test] = await db\n      .update(tests)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(tests.id, id))\n      .returning();\n    return test || undefined;\n  }\n\n  async deleteTest(id: string): Promise<void> {\n    await db.delete(tests).where(eq(tests.id, id));\n  }\n\n  async addQuestionsToTest(testId: string, questionIds: string[]): Promise<void> {\n    const values = questionIds.map((questionId, index) => ({\n      testId,\n      questionId,\n      order: index + 1,\n    }));\n    \n    await db.insert(testQuestions).values(values);\n  }\n\n  async getTestQuestions(testId: string): Promise<Question[]> {\n    const result = await db\n      .select({\n        question: questions,\n        order: testQuestions.order,\n      })\n      .from(testQuestions)\n      .innerJoin(questions, eq(testQuestions.questionId, questions.id))\n      .where(eq(testQuestions.testId, testId))\n      .orderBy(asc(testQuestions.order));\n\n    return result.map((r) => r.question);\n  }\n\n  async getTestAttempt(id: string): Promise<TestAttempt | undefined> {\n    const [attempt] = await db\n      .select()\n      .from(testAttempts)\n      .where(eq(testAttempts.id, id));\n    return attempt || undefined;\n  }\n\n  async getUserTestAttempts(userId: string, limit: number = 20): Promise<TestAttempt[]> {\n    return await db\n      .select()\n      .from(testAttempts)\n      .where(eq(testAttempts.userId, userId))\n      .orderBy(desc(testAttempts.startedAt))\n      .limit(limit);\n  }\n\n  async getTestAttemptsByTestId(testId: string, status?: string): Promise<TestAttempt[]> {\n    const conditions = [eq(testAttempts.testId, testId)];\n    if (status) {\n      conditions.push(eq(testAttempts.status, status as any));\n    }\n    return await db\n      .select()\n      .from(testAttempts)\n      .where(and(...conditions))\n      .orderBy(desc(testAttempts.startedAt));\n  }\n\n  async createTestAttempt(insertAttempt: InsertTestAttempt): Promise<TestAttempt> {\n    const [attempt] = await db\n      .insert(testAttempts)\n      .values(insertAttempt)\n      .returning();\n    return attempt;\n  }\n\n  async updateTestAttempt(id: string, data: Partial<InsertTestAttempt>): Promise<TestAttempt | undefined> {\n    const [attempt] = await db\n      .update(testAttempts)\n      .set(data)\n      .where(eq(testAttempts.id, id))\n      .returning();\n    return attempt || undefined;\n  }\n\n  async createTestResponse(insertResponse: InsertTestResponse): Promise<TestResponse> {\n    const [response] = await db\n      .insert(testResponses)\n      .values(insertResponse)\n      .returning();\n    return response;\n  }\n\n  async updateTestResponse(id: string, data: Partial<InsertTestResponse>): Promise<TestResponse | undefined> {\n    const [response] = await db\n      .update(testResponses)\n      .set(data)\n      .where(eq(testResponses.id, id))\n      .returning();\n    return response || undefined;\n  }\n\n  async getTestAttemptResponses(attemptId: string): Promise<TestResponse[]> {\n    return await db\n      .select()\n      .from(testResponses)\n      .where(eq(testResponses.attemptId, attemptId))\n      .orderBy(asc(testResponses.createdAt));\n  }\n\n  async getTestResponse(attemptId: string, questionId: string): Promise<TestResponse | undefined> {\n    const [response] = await db\n      .select()\n      .from(testResponses)\n      .where(and(\n        eq(testResponses.attemptId, attemptId),\n        eq(testResponses.questionId, questionId)\n      ));\n    return response || undefined;\n  }\n}\n","size_bytes":4859},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus } from \"lucide-react\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await register({\n        name,\n        email,\n        password,\n      });\n      toast({\n        title: \"Account created!\",\n        description: \"Your account has been successfully created.\",\n      });\n      setLocation(\"/dashboard\");\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-1\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <UserPlus className=\"h-12 w-12 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl text-center\">Create an account</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your information to get started\n            </CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  required\n                  data-testid=\"input-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your.email@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  minLength={6}\n                  data-testid=\"input-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  minLength={6}\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-register\"\n              >\n                {isLoading ? \"Creating account...\" : \"Create account\"}\n              </Button>\n              <div className=\"text-sm text-center text-muted-foreground\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\" data-testid=\"link-login\">\n                  <span className=\"text-primary hover:underline cursor-pointer\">\n                    Login here\n                  </span>\n                </Link>\n              </div>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5350},"client/src/components/test/QuestionPalette.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { User } from \"lucide-react\";\nimport type { Question } from \"@shared/schema\";\n\ninterface QuestionPaletteProps {\n  questions: Question[];\n  currentIndex: number;\n  answers: Record<string, string>;\n  markedForReview: Set<string>;\n  visitedQuestions: Set<string>;\n  onQuestionSelect: (index: number) => void;\n}\n\nexport default function QuestionPalette({\n  questions,\n  currentIndex,\n  answers,\n  markedForReview,\n  visitedQuestions,\n  onQuestionSelect,\n}: QuestionPaletteProps) {\n  const getQuestionStatus = (questionId: string) => {\n    const hasAnswer = answers[questionId] && answers[questionId].trim() !== \"\";\n    const isMarked = markedForReview.has(questionId);\n    const isVisited = visitedQuestions.has(questionId);\n    const isCurrent = questions?.findIndex(q => q.id === questionId) === currentIndex;\n    \n    if (hasAnswer && isMarked) return \"answered-marked\";\n    if (hasAnswer) return \"answered\";\n    if (isMarked && !hasAnswer) return \"marked\";\n    if (!hasAnswer && isVisited && !isCurrent) return \"not-answered\";\n    if (isCurrent) return \"current\";\n    return \"not-visited\";\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"answered\": return \"bg-emerald-500 hover:bg-emerald-600 text-white\";\n      case \"not-answered\": return \"bg-red-500 hover:bg-red-600 text-white\";\n      case \"marked\": return \"bg-purple-500 hover:bg-purple-600 text-white\";\n      case \"answered-marked\": return \"bg-purple-600 hover:bg-purple-700 text-white\";\n      case \"current\": return \"bg-blue-500 hover:bg-blue-600 text-white\";\n      default: return \"bg-slate-300 hover:bg-slate-400 text-slate-800\";\n    }\n  };\n\n  const getStats = () => {\n    const answered = questions?.filter(q => answers[q.id] && answers[q.id].trim() !== \"\").length || 0;\n    const answeredMarked = questions?.filter(q => \n      answers[q.id] && answers[q.id].trim() !== \"\" && markedForReview.has(q.id)\n    ).length || 0;\n    const markedOnly = questions?.filter(q => \n      markedForReview.has(q.id) && (!answers[q.id] || answers[q.id].trim() === \"\")\n    ).length || 0;\n    const notAnswered = questions?.filter(q => \n      visitedQuestions.has(q.id) && (!answers[q.id] || answers[q.id].trim() === \"\") && !markedForReview.has(q.id)\n    ).length || 0;\n    const notVisited = questions?.filter(q => \n      !visitedQuestions.has(q.id)\n    ).length || 0;\n\n    return { answered, notAnswered, marked: markedOnly, answeredMarked, notVisited };\n  };\n\n  const stats = getStats();\n\n  return (\n    <div className=\"w-80 bg-white dark:bg-slate-800 border-l p-4 space-y-4\">\n      {/* User Info */}\n      <Card className=\"p-3 text-center\">\n        <div className=\"w-16 h-16 rounded-full bg-blue-100 dark:bg-blue-900 mx-auto mb-2 flex items-center justify-center\">\n          <User className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n        </div>\n        <p className=\"font-medium text-sm\">Test Taker</p>\n      </Card>\n\n      {/* Section Info */}\n      <div className=\"bg-amber-50 dark:bg-amber-950 p-3 rounded\">\n        <p className=\"text-xs font-medium text-center\">You are viewing: <span className=\"text-amber-700 dark:text-amber-400\">All Questions</span></p>\n      </div>\n\n      {/* Question Palette */}\n      <div>\n        <h3 className=\"font-semibold mb-3 text-sm\">Question Palette</h3>\n        <div className=\"grid grid-cols-4 gap-2\">\n          {questions.map((q, index) => {\n            const status = getQuestionStatus(q.id);\n            return (\n              <Button\n                key={q.id}\n                onClick={() => onQuestionSelect(index)}\n                className={`h-10 ${getStatusColor(status)}`}\n                size=\"sm\"\n                data-testid={`button-question-${index + 1}`}\n              >\n                {index + 1}\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Legend */}\n      <div className=\"space-y-2\">\n        <h3 className=\"font-semibold text-sm\">Legend</h3>\n        <div className=\"space-y-2 text-xs\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-6 h-6 rounded bg-emerald-500\"></div>\n            <span>Answered</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-6 h-6 rounded bg-red-500\"></div>\n            <span>Not Answered</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-6 h-6 rounded bg-purple-500\"></div>\n            <span>Marked for Review</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-6 h-6 rounded bg-purple-600\"></div>\n            <span>Answered & Marked for Review</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-6 h-6 rounded bg-slate-300\"></div>\n            <span>Not Visited</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats */}\n      <Card className=\"p-3\">\n        <h3 className=\"font-semibold text-sm mb-2\">Statistics</h3>\n        <div className=\"space-y-1 text-xs\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Answered:</span>\n            <Badge variant=\"secondary\" className=\"bg-emerald-500 text-white\">{stats.answered}</Badge>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Not Answered:</span>\n            <Badge variant=\"secondary\" className=\"bg-red-500 text-white\">{stats.notAnswered}</Badge>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Marked for Review:</span>\n            <Badge variant=\"secondary\" className=\"bg-purple-500 text-white\">{stats.marked}</Badge>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5962},"client/src/pages/Security.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, KeyRound, X } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\";\n\nexport default function Security() {\n  const { user, refreshUser } = useAuth();\n  const { toast } = useToast();\n  const [showSetup2FA, setShowSetup2FA] = useState(false);\n  const [showDisable2FA, setShowDisable2FA] = useState(false);\n  const [qrCode, setQrCode] = useState(\"\");\n  const [secret, setSecret] = useState(\"\");\n  const [verifyToken, setVerifyToken] = useState(\"\");\n  const [disablePassword, setDisablePassword] = useState(\"\");\n\n  // Setup 2FA\n  const setup2FAMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/2fa/setup\");\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setQrCode(data.qrCode);\n      setSecret(data.secret);\n      setShowSetup2FA(true);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to setup 2FA\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Verify and enable 2FA\n  const verify2FAMutation = useMutation({\n    mutationFn: async (token: string) => {\n      await apiRequest(\"POST\", \"/api/auth/2fa/verify\", { token, secret });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"2FA Enabled\",\n        description: \"Two-factor authentication has been enabled for your account.\",\n      });\n      setShowSetup2FA(false);\n      setQrCode(\"\");\n      setSecret(\"\");\n      setVerifyToken(\"\");\n      refreshUser();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Disable 2FA\n  const disable2FAMutation = useMutation({\n    mutationFn: async (password: string) => {\n      await apiRequest(\"POST\", \"/api/auth/2fa/disable\", { password });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"2FA Disabled\",\n        description: \"Two-factor authentication has been disabled.\",\n      });\n      setShowDisable2FA(false);\n      setDisablePassword(\"\");\n      refreshUser();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to disable 2FA\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVerify2FA = () => {\n    if (verifyToken.length === 6) {\n      verify2FAMutation.mutate(verifyToken);\n    }\n  };\n\n  const handleDisable2FA = () => {\n    if (disablePassword) {\n      disable2FAMutation.mutate(disablePassword);\n    }\n  };\n\n  return (\n    <div className=\"container max-w-4xl py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Shield className=\"h-8 w-8\" />\n          Security Settings\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Manage your account security and authentication methods\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Two-Factor Authentication */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <KeyRound className=\"h-5 w-5\" />\n              Two-Factor Authentication\n            </CardTitle>\n            <CardDescription>\n              Add an extra layer of security to your account by requiring a verification code in addition to your password.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 border rounded-md\">\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">\n                    Status: {user?.twofaEnabled ? (\n                      <span className=\"text-green-600 dark:text-green-400\">Enabled</span>\n                    ) : (\n                      <span className=\"text-muted-foreground\">Disabled</span>\n                    )}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {user?.twofaEnabled \n                      ? \"Your account is protected with 2FA\" \n                      : \"Enable 2FA to secure your account\"}\n                  </p>\n                </div>\n                <div>\n                  {user?.twofaEnabled ? (\n                    <Button\n                      variant=\"destructive\"\n                      onClick={() => setShowDisable2FA(true)}\n                      data-testid=\"button-disable-2fa\"\n                    >\n                      Disable 2FA\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={() => setup2FAMutation.mutate()}\n                      disabled={setup2FAMutation.isPending}\n                      data-testid=\"button-enable-2fa\"\n                    >\n                      {setup2FAMutation.isPending ? \"Setting up...\" : \"Enable 2FA\"}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Password Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Password</CardTitle>\n            <CardDescription>\n              Change your password to keep your account secure.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button variant=\"outline\" data-testid=\"button-change-password\">\n              Change Password\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 2FA Setup Dialog */}\n      <Dialog open={showSetup2FA} onOpenChange={setShowSetup2FA}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Setup Two-Factor Authentication</DialogTitle>\n            <DialogDescription>\n              Scan the QR code with your authenticator app (Google Authenticator, Authy, etc.)\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {qrCode && (\n              <div className=\"flex justify-center\">\n                <img src={qrCode} alt=\"2FA QR Code\" className=\"w-48 h-48\" data-testid=\"img-2fa-qr\" />\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Label>Enter the 6-digit code from your app</Label>\n              <div className=\"flex justify-center\">\n                <InputOTP\n                  maxLength={6}\n                  value={verifyToken}\n                  onChange={setVerifyToken}\n                  data-testid=\"input-2fa-verify\"\n                >\n                  <InputOTPGroup>\n                    <InputOTPSlot index={0} />\n                    <InputOTPSlot index={1} />\n                    <InputOTPSlot index={2} />\n                    <InputOTPSlot index={3} />\n                    <InputOTPSlot index={4} />\n                    <InputOTPSlot index={5} />\n                  </InputOTPGroup>\n                </InputOTP>\n              </div>\n            </div>\n            <Button\n              onClick={handleVerify2FA}\n              disabled={verifyToken.length !== 6 || verify2FAMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-verify-2fa\"\n            >\n              {verify2FAMutation.isPending ? \"Verifying...\" : \"Verify and Enable\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Disable 2FA Dialog */}\n      <Dialog open={showDisable2FA} onOpenChange={setShowDisable2FA}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Disable Two-Factor Authentication</DialogTitle>\n            <DialogDescription>\n              Enter your password to confirm disabling 2FA\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"disable-password\">Password</Label>\n              <Input\n                id=\"disable-password\"\n                type=\"password\"\n                value={disablePassword}\n                onChange={(e) => setDisablePassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                data-testid=\"input-disable-2fa-password\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowDisable2FA(false);\n                  setDisablePassword(\"\");\n                }}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-disable-2fa\"\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={handleDisable2FA}\n                disabled={!disablePassword || disable2FAMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-confirm-disable-2fa\"\n              >\n                {disable2FAMutation.isPending ? \"Disabling...\" : \"Disable 2FA\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":9793},"server/routes/role.routes.ts":{"content":"import type { Express, Request, Response } from 'express';\nimport { fromZodError } from 'zod-validation-error';\nimport { insertRoleSchema } from '@shared/schema';\nimport * as roleStorage from '../storage/role.storage';\nimport { requireAuth, requireRole } from '../auth';\nimport { defineAbilitiesFor, serializeAbilities } from '../casl/abilities';\nimport type { User } from '@shared/schema';\n\nexport function roleRoutes(app: Express): void {\n  // ============================================================================\n  // USER ABILITIES ROUTE\n  // ============================================================================\n\n  /**\n   * GET /api/abilities\n   * Get current user's abilities/permissions\n   */\n  app.get('/api/abilities', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as User;\n      \n      // Load user's permissions from database\n      const permissions = await roleStorage.getUserPermissionsByRole(user.role);\n      const userWithPermissions = { ...user, permissions };\n      \n      // Serialize abilities for frontend\n      const abilities = serializeAbilities(userWithPermissions);\n      \n      res.json({ \n        abilities,\n        permissions: permissions.map(p => ({\n          action: p.action,\n          subject: p.subject,\n          description: p.description\n        }))\n      });\n    } catch (error) {\n      console.error('Error fetching abilities:', error);\n      res.status(500).json({ message: 'Failed to fetch abilities' });\n    }\n  });\n\n  // ============================================================================\n  // ROLE MANAGEMENT ROUTES\n  // ============================================================================\n\n  /**\n   * GET /api/roles\n   * Get all roles (admin only)\n   */\n  app.get('/api/roles', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const roles = await roleStorage.getAllRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error('Error fetching roles:', error);\n      res.status(500).json({ message: 'Failed to fetch roles' });\n    }\n  });\n\n  /**\n   * GET /api/roles/:id\n   * Get a specific role by ID (admin only)\n   */\n  app.get('/api/roles/:id', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const role = await roleStorage.getRoleById(req.params.id);\n      if (!role) {\n        return res.status(404).json({ message: 'Role not found' });\n      }\n      \n      // Get permissions for this role\n      const permissions = await roleStorage.getPermissionsByRoleId(role.id);\n      \n      res.json({ ...role, permissions });\n    } catch (error) {\n      console.error('Error fetching role:', error);\n      res.status(500).json({ message: 'Failed to fetch role' });\n    }\n  });\n\n  /**\n   * POST /api/roles\n   * Create a new role (admin only)\n   */\n  app.post('/api/roles', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const validation = insertRoleSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: fromZodError(validation.error).message \n        });\n      }\n\n      const role = await roleStorage.createRole(validation.data);\n      \n      // Log the action\n      const user = req.user as any;\n      await roleStorage.createAuditLog({\n        userId: user.id,\n        action: 'role.create',\n        resource: 'Role',\n        resourceId: role.id,\n        details: { name: role.name },\n        ipAddress: req.ip,\n        userAgent: req.get('user-agent'),\n      });\n\n      res.status(201).json(role);\n    } catch (error: any) {\n      if (error.code === '23505') { // Unique constraint violation\n        return res.status(400).json({ message: 'Role with this name already exists' });\n      }\n      console.error('Error creating role:', error);\n      res.status(500).json({ message: 'Failed to create role' });\n    }\n  });\n\n  /**\n   * PATCH /api/roles/:id\n   * Update a role (admin only)\n   */\n  app.patch('/api/roles/:id', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const existingRole = await roleStorage.getRoleById(req.params.id);\n      if (!existingRole) {\n        return res.status(404).json({ message: 'Role not found' });\n      }\n\n      // Prevent modification of system roles\n      if (existingRole.isSystem) {\n        return res.status(403).json({ message: 'Cannot modify system roles' });\n      }\n\n      const validation = insertRoleSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: fromZodError(validation.error).message \n        });\n      }\n\n      // Ensure at least one field is being updated\n      if (Object.keys(validation.data).length === 0) {\n        return res.status(400).json({ message: 'No fields to update' });\n      }\n\n      const role = await roleStorage.updateRole(req.params.id, validation.data);\n      \n      // Log the action\n      const user = req.user as any;\n      await roleStorage.createAuditLog({\n        userId: user.id,\n        action: 'role.update',\n        resource: 'Role',\n        resourceId: role!.id,\n        details: { oldValues: existingRole, newValues: validation.data },\n        ipAddress: req.ip,\n        userAgent: req.get('user-agent'),\n      });\n\n      res.json(role);\n    } catch (error: any) {\n      if (error.code === '23505') {\n        return res.status(400).json({ message: 'Role with this name already exists' });\n      }\n      console.error('Error updating role:', error);\n      res.status(500).json({ message: 'Failed to update role' });\n    }\n  });\n\n  /**\n   * DELETE /api/roles/:id\n   * Delete a role (admin only)\n   */\n  app.delete('/api/roles/:id', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const role = await roleStorage.getRoleById(req.params.id);\n      if (!role) {\n        return res.status(404).json({ message: 'Role not found' });\n      }\n\n      // Prevent deletion of system roles\n      if (role.isSystem) {\n        return res.status(403).json({ message: 'Cannot delete system roles' });\n      }\n\n      const deleted = await roleStorage.deleteRole(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Role not found' });\n      }\n\n      // Log the action\n      const user = req.user as any;\n      await roleStorage.createAuditLog({\n        userId: user.id,\n        action: 'role.delete',\n        resource: 'Role',\n        resourceId: role.id,\n        details: { name: role.name },\n        ipAddress: req.ip,\n        userAgent: req.get('user-agent'),\n      });\n\n      res.json({ message: 'Role deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting role:', error);\n      res.status(500).json({ message: 'Failed to delete role' });\n    }\n  });\n\n  // ============================================================================\n  // PERMISSION MANAGEMENT ROUTES\n  // ============================================================================\n\n  /**\n   * GET /api/permissions\n   * Get all permissions (admin only)\n   */\n  app.get('/api/permissions', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const permissions = await roleStorage.getAllPermissions();\n      res.json(permissions);\n    } catch (error) {\n      console.error('Error fetching permissions:', error);\n      res.status(500).json({ message: 'Failed to fetch permissions' });\n    }\n  });\n\n  /**\n   * POST /api/roles/:roleId/permissions/:permissionId\n   * Assign a permission to a role (admin only)\n   */\n  app.post('/api/roles/:roleId/permissions/:permissionId', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const role = await roleStorage.getRoleById(req.params.roleId);\n      if (!role) {\n        return res.status(404).json({ message: 'Role not found' });\n      }\n\n      // Prevent modification of system roles\n      if (role.isSystem) {\n        return res.status(403).json({ message: 'Cannot modify permissions for system roles' });\n      }\n\n      const permission = await roleStorage.getPermissionById(req.params.permissionId);\n      if (!permission) {\n        return res.status(404).json({ message: 'Permission not found' });\n      }\n\n      await roleStorage.assignPermissionToRole(req.params.roleId, req.params.permissionId);\n      \n      // Log the action\n      const user = req.user as any;\n      await roleStorage.createAuditLog({\n        userId: user.id,\n        action: 'permission.assign',\n        resource: 'Role',\n        resourceId: role.id,\n        details: { \n          roleId: role.id,\n          roleName: role.name,\n          permissionId: permission.id,\n          permission: `${permission.action}:${permission.subject}`\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('user-agent'),\n      });\n\n      res.json({ message: 'Permission assigned successfully' });\n    } catch (error) {\n      console.error('Error assigning permission:', error);\n      res.status(500).json({ message: 'Failed to assign permission' });\n    }\n  });\n\n  /**\n   * DELETE /api/roles/:roleId/permissions/:permissionId\n   * Revoke a permission from a role (admin only)\n   */\n  app.delete('/api/roles/:roleId/permissions/:permissionId', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const role = await roleStorage.getRoleById(req.params.roleId);\n      if (!role) {\n        return res.status(404).json({ message: 'Role not found' });\n      }\n\n      // Prevent modification of system roles\n      if (role.isSystem) {\n        return res.status(403).json({ message: 'Cannot modify permissions for system roles' });\n      }\n\n      const permission = await roleStorage.getPermissionById(req.params.permissionId);\n      if (!permission) {\n        return res.status(404).json({ message: 'Permission not found' });\n      }\n\n      await roleStorage.revokePermissionFromRole(req.params.roleId, req.params.permissionId);\n      \n      // Log the action\n      const user = req.user as any;\n      await roleStorage.createAuditLog({\n        userId: user.id,\n        action: 'permission.revoke',\n        resource: 'Role',\n        resourceId: role.id,\n        details: { \n          roleId: role.id,\n          roleName: role.name,\n          permissionId: permission.id,\n          permission: `${permission.action}:${permission.subject}`\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('user-agent'),\n      });\n\n      res.json({ message: 'Permission revoked successfully' });\n    } catch (error) {\n      console.error('Error revoking permission:', error);\n      res.status(500).json({ message: 'Failed to revoke permission' });\n    }\n  });\n\n  // ============================================================================\n  // AUDIT LOG ROUTES\n  // ============================================================================\n\n  /**\n   * GET /api/audit-logs\n   * Get audit logs (admin only)\n   */\n  app.get('/api/audit-logs', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 100;\n      const offset = parseInt(req.query.offset as string) || 0;\n      \n      const logs = await roleStorage.getAuditLogs(limit, offset);\n      res.json(logs);\n    } catch (error) {\n      console.error('Error fetching audit logs:', error);\n      res.status(500).json({ message: 'Failed to fetch audit logs' });\n    }\n  });\n\n  /**\n   * GET /api/audit-logs/user/:userId\n   * Get audit logs for a specific user (admin only)\n   */\n  app.get('/api/audit-logs/user/:userId', requireAuth, requireRole('admin'), async (req: Request, res: Response) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 100;\n      const logs = await roleStorage.getAuditLogsByUserId(req.params.userId, limit);\n      res.json(logs);\n    } catch (error) {\n      console.error('Error fetching user audit logs:', error);\n      res.status(500).json({ message: 'Failed to fetch audit logs' });\n    }\n  });\n}\n","size_bytes":12106},"client/src/pages/MyPurchases.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, Calendar, Clock, CheckCircle, XCircle, BookOpen } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface TestSeries {\n  id: string;\n  title: string;\n  description: string;\n  price: number;\n  validityDays: number;\n  tier: string;\n  isActive: boolean;\n}\n\ninterface UserPurchase {\n  id: string;\n  userId: string;\n  testSeriesId: string;\n  purchaseDate: string;\n  expiryDate: string;\n  status: \"active\" | \"expired\";\n  transactionId: string | null;\n}\n\ninterface PurchaseWithSeries extends UserPurchase {\n  testSeries?: TestSeries;\n}\n\nexport default function MyPurchases() {\n  const { isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: purchases, isLoading, error } = useQuery<PurchaseWithSeries[]>({\n    queryKey: [\"/api/payments/purchases\"],\n    enabled: isAuthenticated,\n  });\n\n  if (!isAuthenticated) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" data-testid=\"loader-purchases\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive text-lg mb-4\" data-testid=\"text-error\">\n            Failed to load your purchases\n          </p>\n          <Button onClick={() => window.location.reload()} data-testid=\"button-retry\">\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const activePurchases = purchases?.filter((p) => p.status === \"active\") || [];\n  const expiredPurchases = purchases?.filter((p) => p.status === \"expired\") || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-purchases-title\">My Purchases</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-purchases-subtitle\">\n            Manage your test series subscriptions\n          </p>\n        </div>\n\n        {activePurchases.length > 0 && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-semibold mb-6 flex items-center gap-2\">\n              <Badge className=\"text-base\" data-testid=\"badge-active-section\">\n                Active Subscriptions\n              </Badge>\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {activePurchases.map((purchase) => {\n                const testSeries = purchase.testSeries;\n                if (!testSeries) return null;\n\n                const expiryDate = new Date(purchase.expiryDate);\n                const purchaseDate = new Date(purchase.purchaseDate);\n                const daysLeft = Math.ceil((expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n\n                return (\n                  <Card\n                    key={purchase.id}\n                    className=\"hover-elevate flex flex-col border-primary/50\"\n                    data-testid={`card-purchase-${purchase.id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between gap-2 mb-2\">\n                        <CardTitle className=\"text-xl\" data-testid={`text-title-${purchase.id}`}>\n                          {testSeries.title}\n                        </CardTitle>\n                        <Badge variant=\"default\" data-testid={`badge-status-${purchase.id}`}>\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Active\n                        </Badge>\n                      </div>\n                      <CardDescription data-testid={`text-description-${purchase.id}`}>\n                        {testSeries.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"flex-1 space-y-3\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                        <span data-testid={`text-purchase-date-${purchase.id}`}>\n                          Purchased {formatDistanceToNow(purchaseDate, { addSuffix: true })}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                        <span\n                          className={daysLeft <= 7 ? \"text-orange-500 font-medium\" : \"\"}\n                          data-testid={`text-expiry-${purchase.id}`}\n                        >\n                          {daysLeft > 0 ? `${daysLeft} days remaining` : \"Expires today\"}\n                        </span>\n                      </div>\n                      <div className=\"pt-2 text-sm text-muted-foreground\">\n                        Expires on {expiryDate.toLocaleDateString()}\n                      </div>\n                    </CardContent>\n                    <CardFooter>\n                      <Button\n                        className=\"w-full\"\n                        onClick={() => setLocation(\"/tests\")}\n                        data-testid={`button-view-tests-${purchase.id}`}\n                      >\n                        <BookOpen className=\"w-4 h-4 mr-2\" />\n                        View Tests\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {expiredPurchases.length > 0 && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-semibold mb-6 flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-base\" data-testid=\"badge-expired-section\">\n                Expired Subscriptions\n              </Badge>\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {expiredPurchases.map((purchase) => {\n                const testSeries = purchase.testSeries;\n                if (!testSeries) return null;\n\n                const expiryDate = new Date(purchase.expiryDate);\n\n                return (\n                  <Card\n                    key={purchase.id}\n                    className=\"hover-elevate flex flex-col opacity-75\"\n                    data-testid={`card-purchase-${purchase.id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between gap-2 mb-2\">\n                        <CardTitle className=\"text-xl\" data-testid={`text-title-${purchase.id}`}>\n                          {testSeries.title}\n                        </CardTitle>\n                        <Badge variant=\"secondary\" data-testid={`badge-status-${purchase.id}`}>\n                          <XCircle className=\"w-3 h-3 mr-1\" />\n                          Expired\n                        </Badge>\n                      </div>\n                      <CardDescription data-testid={`text-description-${purchase.id}`}>\n                        {testSeries.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"flex-1\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        Expired on {expiryDate.toLocaleDateString()}\n                      </div>\n                    </CardContent>\n                    <CardFooter>\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        onClick={() => setLocation(\"/shop\")}\n                        data-testid={`button-renew-${purchase.id}`}\n                      >\n                        Renew Subscription\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {!purchases || purchases.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <p className=\"text-muted-foreground text-lg mb-4\" data-testid=\"text-no-purchases\">\n              You haven't purchased any test series yet\n            </p>\n            <Button onClick={() => setLocation(\"/shop\")} data-testid=\"button-browse-shop\">\n              Browse Test Series\n            </Button>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8951},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/routes/analytics.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth\";\nimport { cache } from \"../redis\";\n\nexport function analyticsRoutes(app: Express): void {\n  // ============================================================================\n  // ANALYTICS ROUTES\n  // ============================================================================\n\n  // Get user performance stats\n  app.get(\"/api/analytics/performance\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const stats = await storage.getUserPerformanceStats(currentUser.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching performance stats:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get topic-wise performance\n  app.get(\"/api/analytics/topics\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const topicPerformance = await storage.getTopicWisePerformance(currentUser.id);\n      res.json(topicPerformance);\n    } catch (error) {\n      console.error(\"Error fetching topic performance:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get difficulty-wise performance\n  app.get(\"/api/analytics/difficulty\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const difficultyPerformance = await storage.getDifficultyWisePerformance(currentUser.id);\n      res.json(difficultyPerformance);\n    } catch (error) {\n      console.error(\"Error fetching difficulty performance:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get performance trend\n  app.get(\"/api/analytics/trend\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const trend = await storage.getPerformanceTrend(currentUser.id, limit);\n      res.json(trend);\n    } catch (error) {\n      console.error(\"Error fetching performance trend:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get test history (already exists via getUserTestAttempts but exposed as analytics endpoint)\n  app.get(\"/api/analytics/history\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const attempts = await storage.getUserTestAttempts(currentUser.id, limit);\n      res.json(attempts);\n    } catch (error) {\n      console.error(\"Error fetching test history:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get cached test analytics (aggregate stats)\n  app.get(\"/api/analytics/test/:testId\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { testId } = req.params;\n      \n      // Try to get from cache first\n      const cached = await cache.get(`analytics:test:${testId}`);\n      \n      if (cached) {\n        return res.json({\n          ...cached,\n          source: 'cache'\n        });\n      }\n      \n      // If not in cache, calculate on demand\n      const allAttempts = await storage.getTestAttemptsByTestId(testId, 'submitted');\n      \n      if (allAttempts.length === 0) {\n        return res.json({\n          totalAttempts: 0,\n          avgScore: 0,\n          maxScore: 0,\n          minScore: 0,\n          source: 'calculated'\n        });\n      }\n      \n      const scores = allAttempts.map((a: any) => a.score || 0);\n      const avgScore = scores.reduce((a: number, b: number) => a + b, 0) / scores.length;\n      const maxScore = Math.max(...scores);\n      const minScore = Math.min(...scores);\n      \n      const analytics = {\n        totalAttempts: allAttempts.length,\n        avgScore,\n        maxScore,\n        minScore,\n        updatedAt: new Date().toISOString(),\n        source: 'calculated'\n      };\n      \n      // Cache for future requests (5 minutes)\n      await cache.set(`analytics:test:${testId}`, analytics, 300);\n      \n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching test analytics:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get user's percentile for a test (cached)\n  app.get(\"/api/analytics/percentile/:testId\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const { testId } = req.params;\n      \n      // Try to get from cache first\n      const cached = await cache.get(`percentile:${currentUser.id}:${testId}`);\n      \n      if (cached !== null) {\n        return res.json({\n          percentile: cached,\n          source: 'cache'\n        });\n      }\n      \n      // If not in cache, get from latest attempt\n      const allUserAttempts = await storage.getUserTestAttempts(currentUser.id, 100);\n      const userAttempts = allUserAttempts.filter(a => \n        a.testId === testId && a.status === 'submitted'\n      );\n      \n      if (userAttempts.length === 0) {\n        return res.json({\n          percentile: null,\n          message: 'No submitted attempts found'\n        });\n      }\n      \n      const latestAttempt = userAttempts.sort((a: any, b: any) => \n        new Date(b.submittedAt || 0).getTime() - new Date(a.submittedAt || 0).getTime()\n      )[0];\n      \n      const percentile = latestAttempt.percentile || null;\n      \n      // Cache the percentile for future requests (5 minutes)\n      if (percentile !== null) {\n        await cache.set(`percentile:${currentUser.id}:${testId}`, percentile, 300);\n      }\n      \n      res.json({\n        percentile,\n        source: 'database'\n      });\n    } catch (error) {\n      console.error(\"Error fetching percentile:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}\n","size_bytes":6060},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/storage.ts":{"content":"// Referenced from blueprint:javascript_database integration\nimport { \n  users, \n  sessions,\n  verificationTokens,\n  questions,\n  subjects,\n  topics,\n  questionTopics,\n  tests,\n  testQuestions,\n  testAttempts,\n  testResponses,\n  testSeries,\n  testSeriesTests,\n  userPurchases,\n  transactions,\n  discussionThreads,\n  discussionPosts,\n  notifications,\n  type User, \n  type InsertUser,\n  type Session,\n  type InsertSession,\n  type VerificationToken,\n  type InsertVerificationToken,\n  type Question,\n  type InsertQuestion,\n  type Subject,\n  type InsertSubject,\n  type Topic,\n  type InsertTopic,\n  type Test,\n  type InsertTest,\n  type TestAttempt,\n  type InsertTestAttempt,\n  type TestResponse,\n  type InsertTestResponse,\n  type TestSeries,\n  type InsertTestSeries,\n  type TestSeriesTest,\n  type InsertTestSeriesTest,\n  type UserPurchase,\n  type InsertUserPurchase,\n  type Transaction,\n  type InsertTransaction,\n  type DiscussionThread,\n  type InsertDiscussionThread,\n  type DiscussionPost,\n  type InsertDiscussionPost,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, asc, ilike } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<InsertUser>): Promise<User | undefined>;\n  upsertOAuthUser(data: {\n    email: string;\n    name: string;\n    authProvider: \"google\" | \"github\";\n    providerId: string;\n    avatar?: string;\n  }): Promise<User>;\n  \n  // Session operations\n  createSession(session: InsertSession): Promise<Session>;\n  getSession(token: string): Promise<Session | undefined>;\n  deleteSession(token: string): Promise<void>;\n  deleteUserSessions(userId: string): Promise<void>;\n  \n  // Password Reset Token operations\n  createPasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<VerificationToken>;\n  getPasswordResetToken(token: string): Promise<VerificationToken | undefined>;\n  deletePasswordResetToken(token: string): Promise<void>;\n  deleteUserPasswordResetTokens(userId: string): Promise<void>;\n  \n  // Question operations\n  getQuestion(id: string): Promise<Question | undefined>;\n  getQuestions(filters?: { \n    topicId?: string; \n    difficulty?: string; \n    type?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Question[]>;\n  createQuestion(question: InsertQuestion): Promise<Question>;\n  updateQuestion(id: string, data: Partial<InsertQuestion>): Promise<Question | undefined>;\n  deleteQuestion(id: string): Promise<void>;\n  addQuestionTopic(questionId: string, topicId: string): Promise<void>;\n  removeQuestionTopic(questionId: string, topicId: string): Promise<void>;\n  getQuestionTopics(questionId: string): Promise<Topic[]>;\n  \n  // Topic operations\n  getTopic(id: string): Promise<Topic | undefined>;\n  getTopics(): Promise<Topic[]>;\n  getTopicsBySubject(subjectId: string): Promise<Topic[]>;\n  createTopic(topic: InsertTopic): Promise<Topic>;\n  updateTopic(id: string, data: Partial<InsertTopic>): Promise<Topic | undefined>;\n  deleteTopic(id: string): Promise<void>;\n  \n  // Subject operations\n  getSubject(id: string): Promise<Subject | undefined>;\n  getSubjects(): Promise<Subject[]>;\n  createSubject(subject: InsertSubject): Promise<Subject>;\n  updateSubject(id: string, data: Partial<InsertSubject>): Promise<Subject | undefined>;\n  deleteSubject(id: string): Promise<void>;\n  \n  // Test operations\n  getTest(id: string): Promise<Test | undefined>;\n  getTests(filters?: { \n    status?: string; \n    isPro?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Test[]>;\n  createTest(test: InsertTest): Promise<Test>;\n  updateTest(id: string, data: Partial<InsertTest>): Promise<Test | undefined>;\n  deleteTest(id: string): Promise<void>;\n  addQuestionsToTest(testId: string, questionIds: string[]): Promise<void>;\n  getTestQuestions(testId: string): Promise<Question[]>;\n  \n  // Test Attempt operations\n  getTestAttempt(id: string): Promise<TestAttempt | undefined>;\n  getUserTestAttempts(userId: string, limit?: number): Promise<TestAttempt[]>;\n  createTestAttempt(attempt: InsertTestAttempt): Promise<TestAttempt>;\n  updateTestAttempt(id: string, data: Partial<InsertTestAttempt>): Promise<TestAttempt | undefined>;\n  \n  // Test Response operations\n  createTestResponse(response: InsertTestResponse): Promise<TestResponse>;\n  updateTestResponse(id: string, data: Partial<InsertTestResponse>): Promise<TestResponse | undefined>;\n  getTestAttemptResponses(attemptId: string): Promise<TestResponse[]>;\n  getTestResponse(attemptId: string, questionId: string): Promise<TestResponse | undefined>;\n  \n  // Test Series operations\n  getTestSeries(id: string): Promise<TestSeries | undefined>;\n  getAllTestSeries(filters?: { isActive?: boolean }): Promise<TestSeries[]>;\n  createTestSeries(testSeries: InsertTestSeries): Promise<TestSeries>;\n  updateTestSeries(id: string, data: Partial<InsertTestSeries>): Promise<TestSeries | undefined>;\n  addTestToSeries(testSeriesId: string, testId: string, order: number): Promise<void>;\n  removeTestFromSeries(testSeriesId: string, testId: string): Promise<void>;\n  getTestSeriesTests(testSeriesId: string): Promise<Test[]>;\n  getTestSeriesByTestId(testId: string): Promise<TestSeries | undefined>;\n  getTestSeriesTestsByTestId(testId: string): Promise<TestSeriesTest[]>;\n  \n  // User Purchase operations\n  getUserPurchase(userId: string, testSeriesId: string): Promise<UserPurchase | undefined>;\n  getUserPurchases(userId: string, filters?: { status?: string }): Promise<UserPurchase[]>;\n  createUserPurchase(purchase: InsertUserPurchase): Promise<UserPurchase>;\n  updateUserPurchase(id: string, data: Partial<InsertUserPurchase>): Promise<UserPurchase | undefined>;\n  checkUserHasAccess(userId: string, testSeriesId: string): Promise<boolean>;\n  \n  // Transaction operations\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  getTransactionByOrderId(orderId: string): Promise<Transaction | undefined>;\n  getUserTransactions(userId: string, limit?: number): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, data: Partial<InsertTransaction>): Promise<Transaction | undefined>;\n  \n  // Discussion operations\n  getThread(id: string): Promise<DiscussionThread | undefined>;\n  getThreads(filters?: { topicId?: string; limit?: number; offset?: number }): Promise<DiscussionThread[]>;\n  createThread(thread: InsertDiscussionThread): Promise<DiscussionThread>;\n  getThreadPosts(threadId: string): Promise<DiscussionPost[]>;\n  createPost(post: InsertDiscussionPost): Promise<DiscussionPost>;\n  \n  // Analytics operations\n  getUserPerformanceStats(userId: string): Promise<{\n    totalTests: number;\n    averageScore: number;\n    averagePercentage: number;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    unanswered: number;\n    averageTimeTaken: number;\n    accuracy: number;\n  }>;\n  getTopicWisePerformance(userId: string): Promise<Array<{\n    topicId: string;\n    topicName: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>>;\n  getDifficultyWisePerformance(userId: string): Promise<Array<{\n    difficulty: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>>;\n  getPerformanceTrend(userId: string, limit?: number): Promise<Array<{\n    attemptId: string;\n    testTitle: string;\n    score: number;\n    maxScore: number;\n    percentage: number;\n    submittedAt: Date;\n  }>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // ============================================================================\n  // USER OPERATIONS\n  // ============================================================================\n  \n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async upsertOAuthUser(data: {\n    email: string;\n    name: string;\n    authProvider: \"google\" | \"github\";\n    providerId: string;\n    avatar?: string;\n  }): Promise<User> {\n    // Check if user exists with this provider\n    const existingUser = await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.authProvider, data.authProvider),\n          eq(users.providerId, data.providerId)\n        )\n      )\n      .limit(1);\n\n    if (existingUser.length > 0) {\n      // Update existing user\n      const [user] = await db\n        .update(users)\n        .set({\n          name: data.name,\n          avatar: data.avatar,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, existingUser[0].id))\n        .returning();\n      return user;\n    }\n\n    // Check if email already exists (user signed up with email/password)\n    const userByEmail = await this.getUserByEmail(data.email);\n    if (userByEmail) {\n      // Link OAuth provider to existing account\n      const [user] = await db\n        .update(users)\n        .set({\n          authProvider: data.authProvider,\n          providerId: data.providerId,\n          avatar: data.avatar || userByEmail.avatar,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userByEmail.id))\n        .returning();\n      return user;\n    }\n\n    // Create new user\n    const [newUser] = await db\n      .insert(users)\n      .values({\n        email: data.email,\n        name: data.name,\n        authProvider: data.authProvider,\n        providerId: data.providerId,\n        avatar: data.avatar,\n        role: \"student\",\n        theme: \"system\",\n        twofaEnabled: false,\n      })\n      .returning();\n    return newUser;\n  }\n\n  // ============================================================================\n  // SESSION OPERATIONS\n  // ============================================================================\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const [session] = await db\n      .insert(sessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async getSession(token: string): Promise<Session | undefined> {\n    const [session] = await db\n      .select()\n      .from(sessions)\n      .where(eq(sessions.token, token));\n    return session || undefined;\n  }\n\n  async deleteSession(token: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.token, token));\n  }\n\n  async deleteUserSessions(userId: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.userId, userId));\n  }\n\n  // ============================================================================\n  // PASSWORD RESET TOKEN OPERATIONS\n  // ============================================================================\n\n  async createPasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<VerificationToken> {\n    const [resetToken] = await db\n      .insert(verificationTokens)\n      .values({\n        userId,\n        token,\n        type: 'password_reset',\n        expiresAt,\n      })\n      .returning();\n    return resetToken;\n  }\n\n  async getPasswordResetToken(token: string): Promise<VerificationToken | undefined> {\n    const [resetToken] = await db\n      .select()\n      .from(verificationTokens)\n      .where(\n        and(\n          eq(verificationTokens.token, token),\n          eq(verificationTokens.type, 'password_reset')\n        )\n      );\n    return resetToken || undefined;\n  }\n\n  async deletePasswordResetToken(token: string): Promise<void> {\n    await db\n      .delete(verificationTokens)\n      .where(\n        and(\n          eq(verificationTokens.token, token),\n          eq(verificationTokens.type, 'password_reset')\n        )\n      );\n  }\n\n  async deleteUserPasswordResetTokens(userId: string): Promise<void> {\n    await db\n      .delete(verificationTokens)\n      .where(\n        and(\n          eq(verificationTokens.userId, userId),\n          eq(verificationTokens.type, 'password_reset')\n        )\n      );\n  }\n\n  // ============================================================================\n  // QUESTION OPERATIONS\n  // ============================================================================\n\n  async getQuestion(id: string): Promise<Question | undefined> {\n    const [question] = await db\n      .select()\n      .from(questions)\n      .where(eq(questions.id, id));\n    return question || undefined;\n  }\n\n  async getQuestions(filters?: {\n    topicId?: string;\n    difficulty?: string;\n    type?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Question[]> {\n    // If filtering by topic, use a join\n    if (filters?.topicId) {\n      const conditions = [eq(questions.isPublished, true), eq(questionTopics.topicId, filters.topicId)];\n\n      if (filters?.difficulty) {\n        conditions.push(eq(questions.difficulty, filters.difficulty as any));\n      }\n\n      if (filters?.type) {\n        conditions.push(eq(questions.type, filters.type as any));\n      }\n\n      const results = await db\n        .select({ question: questions })\n        .from(questionTopics)\n        .innerJoin(questions, eq(questionTopics.questionId, questions.id))\n        .where(and(...conditions))\n        .limit(filters?.limit || 50)\n        .offset(filters?.offset || 0);\n\n      return results.map(r => r.question);\n    }\n\n    // Otherwise, simple query without join\n    const conditions = [eq(questions.isPublished, true)];\n\n    if (filters?.difficulty) {\n      conditions.push(eq(questions.difficulty, filters.difficulty as any));\n    }\n    if (filters?.type) {\n      conditions.push(eq(questions.type, filters.type as any));\n    }\n\n    return await db\n      .select()\n      .from(questions)\n      .where(and(...conditions))\n      .limit(filters?.limit || 50)\n      .offset(filters?.offset || 0);\n  }\n\n  async createQuestion(insertQuestion: InsertQuestion): Promise<Question> {\n    const [question] = await db\n      .insert(questions)\n      .values(insertQuestion)\n      .returning();\n    return question;\n  }\n\n  async updateQuestion(id: string, data: Partial<InsertQuestion>): Promise<Question | undefined> {\n    const [question] = await db\n      .update(questions)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(questions.id, id))\n      .returning();\n    return question || undefined;\n  }\n\n  async deleteQuestion(id: string): Promise<void> {\n    await db.delete(questions).where(eq(questions.id, id));\n  }\n\n  async addQuestionTopic(questionId: string, topicId: string): Promise<void> {\n    await db.insert(questionTopics).values({ questionId, topicId });\n  }\n\n  async removeQuestionTopic(questionId: string, topicId: string): Promise<void> {\n    await db.delete(questionTopics)\n      .where(and(\n        eq(questionTopics.questionId, questionId),\n        eq(questionTopics.topicId, topicId)\n      ));\n  }\n\n  async getQuestionTopics(questionId: string): Promise<Topic[]> {\n    const results = await db\n      .select({ topic: topics })\n      .from(questionTopics)\n      .innerJoin(topics, eq(questionTopics.topicId, topics.id))\n      .where(eq(questionTopics.questionId, questionId));\n    return results.map(r => r.topic);\n  }\n\n  // ============================================================================\n  // TOPIC OPERATIONS\n  // ============================================================================\n\n  async getTopic(id: string): Promise<Topic | undefined> {\n    const [topic] = await db.select().from(topics).where(eq(topics.id, id));\n    return topic || undefined;\n  }\n\n  async getTopics(): Promise<Topic[]> {\n    return await db.select().from(topics).orderBy(asc(topics.name));\n  }\n\n  async createTopic(insertTopic: InsertTopic): Promise<Topic> {\n    const [topic] = await db\n      .insert(topics)\n      .values(insertTopic)\n      .returning();\n    return topic;\n  }\n\n  async getTopicsBySubject(subjectId: string): Promise<Topic[]> {\n    return await db\n      .select()\n      .from(topics)\n      .where(eq(topics.subjectId, subjectId))\n      .orderBy(asc(topics.name));\n  }\n\n  async updateTopic(id: string, data: Partial<InsertTopic>): Promise<Topic | undefined> {\n    const [topic] = await db\n      .update(topics)\n      .set(data)\n      .where(eq(topics.id, id))\n      .returning();\n    return topic || undefined;\n  }\n\n  async deleteTopic(id: string): Promise<void> {\n    await db.delete(topics).where(eq(topics.id, id));\n  }\n\n  // ============================================================================\n  // SUBJECT OPERATIONS\n  // ============================================================================\n\n  async getSubject(id: string): Promise<Subject | undefined> {\n    const [subject] = await db.select().from(subjects).where(eq(subjects.id, id));\n    return subject || undefined;\n  }\n\n  async getSubjects(): Promise<Subject[]> {\n    return await db.select().from(subjects).orderBy(asc(subjects.displayOrder));\n  }\n\n  async createSubject(insertSubject: InsertSubject): Promise<Subject> {\n    const [subject] = await db\n      .insert(subjects)\n      .values(insertSubject)\n      .returning();\n    return subject;\n  }\n\n  async updateSubject(id: string, data: Partial<InsertSubject>): Promise<Subject | undefined> {\n    const [subject] = await db\n      .update(subjects)\n      .set(data)\n      .where(eq(subjects.id, id))\n      .returning();\n    return subject || undefined;\n  }\n\n  async deleteSubject(id: string): Promise<void> {\n    await db.delete(subjects).where(eq(subjects.id, id));\n  }\n\n  // ============================================================================\n  // TEST OPERATIONS\n  // ============================================================================\n\n  async getTest(id: string): Promise<Test | undefined> {\n    const [test] = await db.select().from(tests).where(eq(tests.id, id));\n    return test || undefined;\n  }\n\n  async getTests(filters?: {\n    status?: string;\n    isPro?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Test[]> {\n    const conditions = [];\n\n    if (filters?.status) {\n      conditions.push(eq(tests.status, filters.status as any));\n    }\n    if (filters?.isPro !== undefined) {\n      conditions.push(eq(tests.isPro, filters.isPro));\n    }\n\n    const query = conditions.length > 0\n      ? db.select().from(tests).where(and(...conditions))\n      : db.select().from(tests);\n\n    return await query\n      .orderBy(desc(tests.createdAt))\n      .limit(filters?.limit || 50)\n      .offset(filters?.offset || 0);\n  }\n\n  async createTest(insertTest: InsertTest): Promise<Test> {\n    const [test] = await db\n      .insert(tests)\n      .values(insertTest)\n      .returning();\n    return test;\n  }\n\n  async updateTest(id: string, data: Partial<InsertTest>): Promise<Test | undefined> {\n    const [test] = await db\n      .update(tests)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(tests.id, id))\n      .returning();\n    return test || undefined;\n  }\n\n  async deleteTest(id: string): Promise<void> {\n    await db.delete(tests).where(eq(tests.id, id));\n  }\n\n  async addQuestionsToTest(testId: string, questionIds: string[]): Promise<void> {\n    const values = questionIds.map((questionId, index) => ({\n      testId,\n      questionId,\n      order: index + 1,\n    }));\n    \n    await db.insert(testQuestions).values(values);\n  }\n\n  async getTestQuestions(testId: string): Promise<Question[]> {\n    const result = await db\n      .select({\n        question: questions,\n        order: testQuestions.order,\n      })\n      .from(testQuestions)\n      .innerJoin(questions, eq(testQuestions.questionId, questions.id))\n      .where(eq(testQuestions.testId, testId))\n      .orderBy(asc(testQuestions.order));\n\n    return result.map((r) => r.question);\n  }\n\n  // ============================================================================\n  // TEST ATTEMPT OPERATIONS\n  // ============================================================================\n\n  async getTestAttempt(id: string): Promise<TestAttempt | undefined> {\n    const [attempt] = await db\n      .select()\n      .from(testAttempts)\n      .where(eq(testAttempts.id, id));\n    return attempt || undefined;\n  }\n\n  async getUserTestAttempts(userId: string, limit: number = 20): Promise<TestAttempt[]> {\n    return await db\n      .select()\n      .from(testAttempts)\n      .where(eq(testAttempts.userId, userId))\n      .orderBy(desc(testAttempts.startedAt))\n      .limit(limit);\n  }\n\n  async createTestAttempt(insertAttempt: InsertTestAttempt): Promise<TestAttempt> {\n    const [attempt] = await db\n      .insert(testAttempts)\n      .values(insertAttempt)\n      .returning();\n    return attempt;\n  }\n\n  async updateTestAttempt(id: string, data: Partial<InsertTestAttempt>): Promise<TestAttempt | undefined> {\n    const [attempt] = await db\n      .update(testAttempts)\n      .set(data)\n      .where(eq(testAttempts.id, id))\n      .returning();\n    return attempt || undefined;\n  }\n\n  // ============================================================================\n  // TEST RESPONSE OPERATIONS\n  // ============================================================================\n\n  async createTestResponse(insertResponse: InsertTestResponse): Promise<TestResponse> {\n    const [response] = await db\n      .insert(testResponses)\n      .values(insertResponse)\n      .returning();\n    return response;\n  }\n\n  async updateTestResponse(id: string, data: Partial<InsertTestResponse>): Promise<TestResponse | undefined> {\n    const [response] = await db\n      .update(testResponses)\n      .set(data)\n      .where(eq(testResponses.id, id))\n      .returning();\n    return response || undefined;\n  }\n\n  async getTestAttemptResponses(attemptId: string): Promise<TestResponse[]> {\n    return await db\n      .select()\n      .from(testResponses)\n      .where(eq(testResponses.attemptId, attemptId))\n      .orderBy(asc(testResponses.createdAt));\n  }\n\n  async getTestResponse(attemptId: string, questionId: string): Promise<TestResponse | undefined> {\n    const [response] = await db\n      .select()\n      .from(testResponses)\n      .where(and(\n        eq(testResponses.attemptId, attemptId),\n        eq(testResponses.questionId, questionId)\n      ));\n    return response || undefined;\n  }\n\n  // ============================================================================\n  // TEST SERIES OPERATIONS\n  // ============================================================================\n\n  async getTestSeries(id: string): Promise<TestSeries | undefined> {\n    const [series] = await db\n      .select()\n      .from(testSeries)\n      .where(eq(testSeries.id, id));\n    return series || undefined;\n  }\n\n  async getAllTestSeries(filters?: { isActive?: boolean }): Promise<TestSeries[]> {\n    const query = filters?.isActive !== undefined\n      ? db.select().from(testSeries).where(eq(testSeries.isActive, filters.isActive))\n      : db.select().from(testSeries);\n\n    return await query.orderBy(asc(testSeries.price));\n  }\n\n  async createTestSeries(insertTestSeries: InsertTestSeries): Promise<TestSeries> {\n    const [series] = await db\n      .insert(testSeries)\n      .values(insertTestSeries)\n      .returning();\n    return series;\n  }\n\n  async updateTestSeries(id: string, data: Partial<InsertTestSeries>): Promise<TestSeries | undefined> {\n    const [series] = await db\n      .update(testSeries)\n      .set(data)\n      .where(eq(testSeries.id, id))\n      .returning();\n    return series || undefined;\n  }\n\n  async addTestToSeries(testSeriesId: string, testId: string, order: number): Promise<void> {\n    await db\n      .insert(testSeriesTests)\n      .values({ testSeriesId, testId, order });\n  }\n\n  async removeTestFromSeries(testSeriesId: string, testId: string): Promise<void> {\n    await db\n      .delete(testSeriesTests)\n      .where(\n        and(\n          eq(testSeriesTests.testSeriesId, testSeriesId),\n          eq(testSeriesTests.testId, testId)\n        )\n      );\n  }\n\n  async getTestSeriesTests(testSeriesId: string): Promise<Test[]> {\n    const result = await db\n      .select({\n        test: tests,\n      })\n      .from(testSeriesTests)\n      .innerJoin(tests, eq(testSeriesTests.testId, tests.id))\n      .where(eq(testSeriesTests.testSeriesId, testSeriesId))\n      .orderBy(asc(testSeriesTests.order));\n\n    return result.map(r => r.test);\n  }\n\n  async getTestSeriesByTestId(testId: string): Promise<TestSeries | undefined> {\n    const result = await db\n      .select({\n        testSeries: testSeries,\n      })\n      .from(testSeriesTests)\n      .innerJoin(testSeries, eq(testSeriesTests.testSeriesId, testSeries.id))\n      .where(eq(testSeriesTests.testId, testId))\n      .limit(1);\n\n    return result[0]?.testSeries || undefined;\n  }\n\n  async getTestSeriesTestsByTestId(testId: string): Promise<TestSeriesTest[]> {\n    return await db\n      .select()\n      .from(testSeriesTests)\n      .where(eq(testSeriesTests.testId, testId));\n  }\n\n  // ============================================================================\n  // USER PURCHASE OPERATIONS\n  // ============================================================================\n\n  async getUserPurchase(userId: string, testSeriesId: string): Promise<UserPurchase | undefined> {\n    const [purchase] = await db\n      .select()\n      .from(userPurchases)\n      .where(\n        and(\n          eq(userPurchases.userId, userId),\n          eq(userPurchases.testSeriesId, testSeriesId)\n        )\n      );\n    return purchase || undefined;\n  }\n\n  async getUserPurchases(userId: string, filters?: { status?: string }): Promise<UserPurchase[]> {\n    const conditions = [eq(userPurchases.userId, userId)];\n    \n    if (filters?.status) {\n      conditions.push(eq(userPurchases.status, filters.status as any));\n    }\n\n    return await db\n      .select()\n      .from(userPurchases)\n      .where(and(...conditions))\n      .orderBy(desc(userPurchases.purchaseDate));\n  }\n\n  async createUserPurchase(insertPurchase: InsertUserPurchase): Promise<UserPurchase> {\n    const [purchase] = await db\n      .insert(userPurchases)\n      .values(insertPurchase)\n      .returning();\n    return purchase;\n  }\n\n  async updateUserPurchase(id: string, data: Partial<InsertUserPurchase>): Promise<UserPurchase | undefined> {\n    const [purchase] = await db\n      .update(userPurchases)\n      .set(data)\n      .where(eq(userPurchases.id, id))\n      .returning();\n    return purchase || undefined;\n  }\n\n  async checkUserHasAccess(userId: string, testSeriesId: string): Promise<boolean> {\n    const [purchase] = await db\n      .select()\n      .from(userPurchases)\n      .where(\n        and(\n          eq(userPurchases.userId, userId),\n          eq(userPurchases.testSeriesId, testSeriesId),\n          eq(userPurchases.status, \"active\")\n        )\n      );\n    \n    if (!purchase) return false;\n    \n    // Check if not expired\n    const now = new Date();\n    return purchase.expiryDate > now;\n  }\n\n  // ============================================================================\n  // TRANSACTION OPERATIONS\n  // ============================================================================\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.id, id));\n    return transaction || undefined;\n  }\n\n  async getTransactionByOrderId(orderId: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.razorpayOrderId, orderId));\n    return transaction || undefined;\n  }\n\n  async getUserTransactions(userId: string, limit: number = 50): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt))\n      .limit(limit);\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(insertTransaction)\n      .returning();\n    return transaction;\n  }\n\n  async updateTransaction(id: string, data: Partial<InsertTransaction>): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .update(transactions)\n      .set(data)\n      .where(eq(transactions.id, id))\n      .returning();\n    return transaction || undefined;\n  }\n\n  // ============================================================================\n  // DISCUSSION OPERATIONS\n  // ============================================================================\n\n  async getThread(id: string): Promise<DiscussionThread | undefined> {\n    const [thread] = await db\n      .select()\n      .from(discussionThreads)\n      .where(eq(discussionThreads.id, id));\n    return thread || undefined;\n  }\n\n  async getThreads(filters?: {\n    topicId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<DiscussionThread[]> {\n    const query = filters?.topicId\n      ? db.select().from(discussionThreads).where(eq(discussionThreads.topicId, filters.topicId))\n      : db.select().from(discussionThreads);\n\n    return await query\n      .orderBy(desc(discussionThreads.isPinned), desc(discussionThreads.updatedAt))\n      .limit(filters?.limit || 20)\n      .offset(filters?.offset || 0);\n  }\n\n  async createThread(insertThread: InsertDiscussionThread): Promise<DiscussionThread> {\n    const [thread] = await db\n      .insert(discussionThreads)\n      .values(insertThread)\n      .returning();\n    return thread;\n  }\n\n  async getThreadPosts(threadId: string): Promise<DiscussionPost[]> {\n    return await db\n      .select()\n      .from(discussionPosts)\n      .where(eq(discussionPosts.threadId, threadId))\n      .orderBy(asc(discussionPosts.createdAt));\n  }\n\n  async createPost(insertPost: InsertDiscussionPost): Promise<DiscussionPost> {\n    const [post] = await db\n      .insert(discussionPosts)\n      .values(insertPost)\n      .returning();\n    return post;\n  }\n\n  // ============================================================================\n  // ANALYTICS OPERATIONS\n  // ============================================================================\n\n  async getUserPerformanceStats(userId: string): Promise<{\n    totalTests: number;\n    averageScore: number;\n    averagePercentage: number;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    unanswered: number;\n    averageTimeTaken: number;\n    accuracy: number;\n  }> {\n    // Get all submitted attempts for the user\n    const attempts = await db\n      .select()\n      .from(testAttempts)\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      );\n\n    if (attempts.length === 0) {\n      return {\n        totalTests: 0,\n        averageScore: 0,\n        averagePercentage: 0,\n        totalQuestions: 0,\n        correctAnswers: 0,\n        incorrectAnswers: 0,\n        unanswered: 0,\n        averageTimeTaken: 0,\n        accuracy: 0,\n      };\n    }\n\n    // Get all responses for these attempts\n    const attemptIds = attempts.map(a => a.id);\n    const allResponses = await db\n      .select()\n      .from(testResponses)\n      .where(sql`${testResponses.attemptId} = ANY(${attemptIds})`);\n\n    const totalTests = attempts.length;\n    const totalScore = attempts.reduce((sum, a) => sum + (a.score || 0), 0);\n    const totalMaxScore = attempts.reduce((sum, a) => sum + (a.maxScore || 0), 0);\n    const totalTimeTaken = attempts.reduce((sum, a) => sum + (a.timeTaken || 0), 0);\n\n    const totalQuestions = allResponses.length;\n    const correctAnswers = allResponses.filter(r => r.isCorrect === true).length;\n    const incorrectAnswers = allResponses.filter(r => r.isCorrect === false).length;\n    const unanswered = totalQuestions - correctAnswers - incorrectAnswers;\n\n    return {\n      totalTests,\n      averageScore: totalTests > 0 ? Math.round(totalScore / totalTests) : 0,\n      averagePercentage: totalMaxScore > 0 ? Math.round((totalScore / totalMaxScore) * 100) : 0,\n      totalQuestions,\n      correctAnswers,\n      incorrectAnswers,\n      unanswered,\n      averageTimeTaken: totalTests > 0 ? Math.round(totalTimeTaken / totalTests) : 0,\n      accuracy: totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0,\n    };\n  }\n\n  async getTopicWisePerformance(userId: string): Promise<Array<{\n    topicId: string;\n    topicName: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>> {\n    // Get all submitted attempts for the user\n    const attempts = await db\n      .select()\n      .from(testAttempts)\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      );\n\n    if (attempts.length === 0) {\n      return [];\n    }\n\n    const attemptIds = attempts.map(a => a.id);\n\n    // Get responses with question topics\n    const result = await db\n      .select({\n        topicId: topics.id,\n        topicName: topics.name,\n        isCorrect: testResponses.isCorrect,\n      })\n      .from(testResponses)\n      .innerJoin(questions, eq(testResponses.questionId, questions.id))\n      .innerJoin(questionTopics, eq(questions.id, questionTopics.questionId))\n      .innerJoin(topics, eq(questionTopics.topicId, topics.id))\n      .where(sql`${testResponses.attemptId} = ANY(${attemptIds})`);\n\n    // Group by topic\n    const topicMap = new Map<string, {\n      topicId: string;\n      topicName: string;\n      totalQuestions: number;\n      correctAnswers: number;\n      incorrectAnswers: number;\n    }>();\n\n    for (const row of result) {\n      if (!topicMap.has(row.topicId)) {\n        topicMap.set(row.topicId, {\n          topicId: row.topicId,\n          topicName: row.topicName,\n          totalQuestions: 0,\n          correctAnswers: 0,\n          incorrectAnswers: 0,\n        });\n      }\n\n      const topic = topicMap.get(row.topicId)!;\n      topic.totalQuestions++;\n      if (row.isCorrect === true) topic.correctAnswers++;\n      if (row.isCorrect === false) topic.incorrectAnswers++;\n    }\n\n    return Array.from(topicMap.values()).map(topic => ({\n      ...topic,\n      accuracy: topic.totalQuestions > 0 \n        ? Math.round((topic.correctAnswers / topic.totalQuestions) * 100) \n        : 0,\n    }));\n  }\n\n  async getDifficultyWisePerformance(userId: string): Promise<Array<{\n    difficulty: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>> {\n    const attempts = await db\n      .select()\n      .from(testAttempts)\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      );\n\n    if (attempts.length === 0) {\n      return [];\n    }\n\n    const attemptIds = attempts.map(a => a.id);\n\n    const result = await db\n      .select({\n        difficulty: questions.difficulty,\n        isCorrect: testResponses.isCorrect,\n      })\n      .from(testResponses)\n      .innerJoin(questions, eq(testResponses.questionId, questions.id))\n      .where(sql`${testResponses.attemptId} = ANY(${attemptIds})`);\n\n    const difficultyMap = new Map<string, {\n      difficulty: string;\n      totalQuestions: number;\n      correctAnswers: number;\n      incorrectAnswers: number;\n    }>();\n\n    for (const row of result) {\n      if (!difficultyMap.has(row.difficulty)) {\n        difficultyMap.set(row.difficulty, {\n          difficulty: row.difficulty,\n          totalQuestions: 0,\n          correctAnswers: 0,\n          incorrectAnswers: 0,\n        });\n      }\n\n      const diff = difficultyMap.get(row.difficulty)!;\n      diff.totalQuestions++;\n      if (row.isCorrect === true) diff.correctAnswers++;\n      if (row.isCorrect === false) diff.incorrectAnswers++;\n    }\n\n    return Array.from(difficultyMap.values()).map(diff => ({\n      ...diff,\n      accuracy: diff.totalQuestions > 0 \n        ? Math.round((diff.correctAnswers / diff.totalQuestions) * 100) \n        : 0,\n    }));\n  }\n\n  async getPerformanceTrend(userId: string, limit: number = 10): Promise<Array<{\n    attemptId: string;\n    testTitle: string;\n    score: number;\n    maxScore: number;\n    percentage: number;\n    submittedAt: Date;\n  }>> {\n    const result = await db\n      .select({\n        attemptId: testAttempts.id,\n        testTitle: tests.title,\n        score: testAttempts.score,\n        maxScore: testAttempts.maxScore,\n        submittedAt: testAttempts.submittedAt,\n      })\n      .from(testAttempts)\n      .innerJoin(tests, eq(testAttempts.testId, tests.id))\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      )\n      .orderBy(desc(testAttempts.submittedAt))\n      .limit(limit);\n\n    return result.map(r => ({\n      attemptId: r.attemptId,\n      testTitle: r.testTitle,\n      score: r.score || 0,\n      maxScore: r.maxScore || 0,\n      percentage: r.maxScore ? Math.round(((r.score || 0) / r.maxScore) * 100) : 0,\n      submittedAt: r.submittedAt || new Date(),\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":37733},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/pages/RoleManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Plus, Pencil, Trash2, Shield, Lock } from 'lucide-react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string | null;\n  isSystem: boolean;\n  createdAt: string;\n  updatedAt: string;\n  permissions?: Permission[];\n}\n\ninterface Permission {\n  id: string;\n  action: string;\n  subject: string;\n  description: string | null;\n  createdAt: string;\n}\n\ninterface AuditLog {\n  id: string;\n  userId: string;\n  action: string;\n  resource: string;\n  resourceId: string | null;\n  details: any;\n  ipAddress: string | null;\n  userAgent: string | null;\n  createdAt: string;\n}\n\nexport default function RoleManagement() {\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isPermissionsDialogOpen, setIsPermissionsDialogOpen] = useState(false);\n\n  // Fetch roles\n  const { data: roles, isLoading: rolesLoading } = useQuery<Role[]>({\n    queryKey: ['/api/roles'],\n  });\n\n  // Fetch all permissions\n  const { data: allPermissions, isLoading: permissionsLoading } = useQuery<Permission[]>({\n    queryKey: ['/api/permissions'],\n  });\n\n  // Fetch audit logs\n  const { data: auditLogs, isLoading: auditLogsLoading } = useQuery<AuditLog[]>({\n    queryKey: ['/api/audit-logs'],\n  });\n\n  // Create role mutation\n  const createRoleMutation = useMutation({\n    mutationFn: async (data: { name: string; description?: string }) => {\n      return apiRequest('POST', '/api/roles', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/audit-logs'] });\n      setIsCreateDialogOpen(false);\n      toast({ title: 'Role created successfully' });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Failed to create role', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n\n  // Update role mutation\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: { name?: string; description?: string } }) => {\n      return apiRequest('PATCH', `/api/roles/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/audit-logs'] });\n      setIsEditDialogOpen(false);\n      setSelectedRole(null);\n      toast({ title: 'Role updated successfully' });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Failed to update role', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n\n  // Delete role mutation\n  const deleteRoleMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/roles/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/audit-logs'] });\n      toast({ title: 'Role deleted successfully' });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Failed to delete role', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n\n  // Assign permission mutation\n  const assignPermissionMutation = useMutation({\n    mutationFn: async ({ roleId, permissionId }: { roleId: string; permissionId: string }) => {\n      return apiRequest('POST', `/api/roles/${roleId}/permissions/${permissionId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/audit-logs'] });\n      toast({ title: 'Permission assigned successfully' });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Failed to assign permission', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n\n  // Revoke permission mutation\n  const revokePermissionMutation = useMutation({\n    mutationFn: async ({ roleId, permissionId }: { roleId: string; permissionId: string }) => {\n      return apiRequest('DELETE', `/api/roles/${roleId}/permissions/${permissionId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/audit-logs'] });\n      toast({ title: 'Permission revoked successfully' });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Failed to revoke permission', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n\n  const handleCreateRole = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    createRoleMutation.mutate({\n      name: formData.get('name') as string,\n      description: formData.get('description') as string,\n    });\n  };\n\n  const handleUpdateRole = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!selectedRole) return;\n    const formData = new FormData(e.currentTarget);\n    updateRoleMutation.mutate({\n      id: selectedRole.id,\n      data: {\n        name: formData.get('name') as string,\n        description: formData.get('description') as string,\n      },\n    });\n  };\n\n  const handleTogglePermission = (roleId: string, permissionId: string, hasPermission: boolean) => {\n    if (hasPermission) {\n      revokePermissionMutation.mutate({ roleId, permissionId });\n    } else {\n      assignPermissionMutation.mutate({ roleId, permissionId });\n    }\n  };\n\n  const groupPermissionsBySubject = (permissions: Permission[]) => {\n    return permissions.reduce((acc, perm) => {\n      if (!acc[perm.subject]) {\n        acc[perm.subject] = [];\n      }\n      acc[perm.subject].push(perm);\n      return acc;\n    }, {} as Record<string, Permission[]>);\n  };\n\n  if (rolesLoading || permissionsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" data-testid=\"loading-spinner\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Role & Permission Management</h1>\n          <p className=\"text-muted-foreground\">Manage roles and permissions for your application</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-role\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Role\n            </Button>\n          </DialogTrigger>\n          <DialogContent data-testid=\"dialog-create-role\">\n            <DialogHeader>\n              <DialogTitle>Create New Role</DialogTitle>\n              <DialogDescription>Create a new role for your application</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateRole}>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Role Name</Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"e.g., Content Manager\"\n                    required\n                    data-testid=\"input-role-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Describe what this role can do...\"\n                    data-testid=\"input-role-description\"\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button type=\"submit\" disabled={createRoleMutation.isPending} data-testid=\"button-submit-role\">\n                  {createRoleMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Create Role\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"roles\" className=\"space-y-6\">\n        <TabsList data-testid=\"tabs-role-management\">\n          <TabsTrigger value=\"roles\" data-testid=\"tab-roles\">Roles</TabsTrigger>\n          <TabsTrigger value=\"permissions\" data-testid=\"tab-permissions\">Permissions</TabsTrigger>\n          <TabsTrigger value=\"audit\" data-testid=\"tab-audit\">Audit Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"roles\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {roles?.map((role) => (\n              <Card key={role.id} data-testid={`card-role-${role.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Shield className=\"h-5 w-5\" />\n                        {role.name}\n                        {role.isSystem && (\n                          <Badge variant=\"secondary\" data-testid={`badge-system-${role.id}`}>\n                            <Lock className=\"h-3 w-3 mr-1\" />\n                            System\n                          </Badge>\n                        )}\n                      </CardTitle>\n                      <CardDescription>{role.description || 'No description'}</CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedRole(role);\n                        setIsPermissionsDialogOpen(true);\n                      }}\n                      data-testid={`button-manage-permissions-${role.id}`}\n                    >\n                      <Shield className=\"h-4 w-4 mr-2\" />\n                      Permissions\n                    </Button>\n                    {!role.isSystem && (\n                      <>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedRole(role);\n                            setIsEditDialogOpen(true);\n                          }}\n                          data-testid={`button-edit-role-${role.id}`}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (confirm(`Are you sure you want to delete the role \"${role.name}\"?`)) {\n                              deleteRoleMutation.mutate(role.id);\n                            }\n                          }}\n                          data-testid={`button-delete-role-${role.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"permissions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Available Permissions</CardTitle>\n              <CardDescription>All permissions available in the system</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[600px]\">\n                {allPermissions && Object.entries(groupPermissionsBySubject(allPermissions)).map(([subject, perms]) => (\n                  <div key={subject} className=\"mb-6\">\n                    <h3 className=\"font-semibold text-lg mb-3\" data-testid={`text-subject-${subject}`}>{subject}</h3>\n                    <div className=\"grid gap-2 md:grid-cols-2\">\n                      {perms.map((perm) => (\n                        <Card key={perm.id} data-testid={`card-permission-${perm.id}`}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div>\n                                <Badge variant=\"outline\" data-testid={`badge-action-${perm.id}`}>{perm.action}</Badge>\n                                <p className=\"text-sm text-muted-foreground mt-2\">\n                                  {perm.description || `${perm.action} ${perm.subject}`}\n                                </p>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"audit\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Audit Logs</CardTitle>\n              <CardDescription>Recent role and permission changes</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[600px]\">\n                <div className=\"space-y-2\">\n                  {auditLogsLoading ? (\n                    <div className=\"flex items-center justify-center py-8\">\n                      <Loader2 className=\"h-6 w-6 animate-spin\" />\n                    </div>\n                  ) : auditLogs && auditLogs.length > 0 ? (\n                    auditLogs.map((log) => (\n                      <div key={log.id} className=\"flex items-start gap-4 p-4 border rounded-lg\" data-testid={`audit-log-${log.id}`}>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\" data-testid={`badge-action-${log.id}`}>{log.action}</Badge>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {new Date(log.createdAt).toLocaleString()}\n                            </span>\n                          </div>\n                          <p className=\"text-sm mt-2\">\n                            Resource: <span className=\"font-medium\">{log.resource}</span>\n                            {log.resourceId && ` (${log.resourceId})`}\n                          </p>\n                          {log.details && (\n                            <pre className=\"text-xs mt-2 p-2 bg-muted rounded overflow-auto\">\n                              {JSON.stringify(log.details, null, 2)}\n                            </pre>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-center text-muted-foreground py-8\">No audit logs found</p>\n                  )}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Role Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent data-testid=\"dialog-edit-role\">\n          <DialogHeader>\n            <DialogTitle>Edit Role</DialogTitle>\n            <DialogDescription>Update role details</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleUpdateRole}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Role Name</Label>\n                <Input\n                  id=\"edit-name\"\n                  name=\"name\"\n                  defaultValue={selectedRole?.name}\n                  required\n                  data-testid=\"input-edit-role-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-description\">Description</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  name=\"description\"\n                  defaultValue={selectedRole?.description || ''}\n                  data-testid=\"input-edit-role-description\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"submit\" disabled={updateRoleMutation.isPending} data-testid=\"button-update-role\">\n                {updateRoleMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Update Role\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Manage Permissions Dialog */}\n      <Dialog open={isPermissionsDialogOpen} onOpenChange={setIsPermissionsDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh]\" data-testid=\"dialog-manage-permissions\">\n          <DialogHeader>\n            <DialogTitle>Manage Permissions - {selectedRole?.name}</DialogTitle>\n            <DialogDescription>\n              {selectedRole?.isSystem \n                ? \"System roles are read-only and cannot be modified\" \n                : \"Assign or revoke permissions for this role\"}\n            </DialogDescription>\n          </DialogHeader>\n          <ScrollArea className=\"h-[500px] pr-4\">\n            {allPermissions && Object.entries(groupPermissionsBySubject(allPermissions)).map(([subject, perms]) => (\n              <div key={subject} className=\"mb-6\">\n                <h3 className=\"font-semibold mb-3\">{subject}</h3>\n                <div className=\"space-y-2\">\n                  {perms.map((perm) => {\n                    const hasPermission = selectedRole?.permissions?.some(p => p.id === perm.id);\n                    return (\n                      <div key={perm.id} className=\"flex items-center space-x-2\" data-testid={`permission-item-${perm.id}`}>\n                        <Checkbox\n                          id={`perm-${perm.id}`}\n                          checked={hasPermission}\n                          disabled={selectedRole?.isSystem}\n                          onCheckedChange={() => handleTogglePermission(selectedRole!.id, perm.id, hasPermission || false)}\n                          data-testid={`checkbox-permission-${perm.id}`}\n                        />\n                        <label\n                          htmlFor={`perm-${perm.id}`}\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex-1\"\n                        >\n                          <Badge variant=\"outline\" className=\"mr-2\">{perm.action}</Badge>\n                          {perm.description || `${perm.action} ${perm.subject}`}\n                        </label>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            ))}\n          </ScrollArea>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":20226},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/Navbar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Menu, User, LogOut } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useViewAsRole } from \"@/contexts/ViewAsRoleContext\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nfunction Logo() {\n  return (\n    <svg className=\"w-8 h-8\" viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M250 50C138.954 50 50 138.954 50 250C50 361.046 138.954 450 250 450C361.046 450 450 361.046 450 250H350C350 305.228 305.228 350 250 350C194.772 350 150 305.228 150 250C150 194.772 194.772 150 250 150V50Z\"\n        fill=\"currentColor\"\n        className=\"text-primary\"\n      />\n      <path\n        d=\"M450 200H250V300H450V200Z\"\n        fill=\"currentColor\"\n        className=\"text-primary\"\n      />\n    </svg>\n  );\n}\n\nexport default function Navbar() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, isAuthenticated, logout } = useAuth();\n  const { effectiveRole } = useViewAsRole();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation(\"/\");\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 border-b border-border/50 bg-background/80 backdrop-blur-lg\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <Link href=\"/\">\n            <div className=\"flex items-center gap-2 cursor-pointer\">\n              <Logo />\n              <span className=\"text-lg font-semibold\">GATE And Tech</span>\n            </div>\n          </Link>\n\n          <div className=\"hidden md:flex items-center gap-8\">\n            <a\n              href=\"#product\"\n              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"link-product\"\n            >\n              Product\n            </a>\n            <a\n              href=\"#pricing\"\n              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"link-pricing\"\n            >\n              Pricing\n            </a>\n            <a\n              href=\"#blog\"\n              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"link-blog\"\n            >\n              Blog\n            </a>\n            {!isAuthenticated && (\n              <Link href=\"/login\" data-testid=\"link-login\">\n                <span className=\"text-sm text-muted-foreground hover:text-foreground transition-colors cursor-pointer\">\n                  Login\n                </span>\n              </Link>\n            )}\n          </div>\n\n          <div className=\"hidden md:flex items-center gap-2\">\n            {isAuthenticated && user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-user-menu\">\n                    <Avatar>\n                      <AvatarFallback>{getInitials(user.name)}</AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuLabel>\n                    {user.name}\n                    <p className=\"text-xs font-normal text-muted-foreground\">{user.email}</p>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={() => setLocation(\"/dashboard\")} data-testid=\"menu-dashboard\">\n                    Dashboard\n                  </DropdownMenuItem>\n                  {(effectiveRole === \"admin\" || effectiveRole === \"moderator\") && (\n                    <DropdownMenuItem onClick={() => setLocation(\"/questions\")} data-testid=\"menu-questions\">\n                      Question Bank\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem onClick={() => setLocation(\"/discussions\")} data-testid=\"menu-discussions\">\n                    Q&A Forum\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setLocation(\"/tests\")} data-testid=\"menu-tests\">\n                    My Tests\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setLocation(\"/analytics\")} data-testid=\"menu-analytics\">\n                    Analytics\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setLocation(\"/security\")} data-testid=\"menu-security\">\n                    Security\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setLocation(\"/profile\")} data-testid=\"menu-profile\">\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <>\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" data-testid=\"button-login-nav\">\n                    Login\n                  </Button>\n                </Link>\n                <Link href=\"/register\">\n                  <Button className=\"shadow-lg shadow-primary/30\" data-testid=\"button-get-started-nav\">\n                    Get Started\n                  </Button>\n                </Link>\n              </>\n            )}\n          </div>\n\n          <button\n            className=\"md:hidden\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            <Menu className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-border/50\">\n            <div className=\"flex flex-col gap-4\">\n              <a href=\"#product\" className=\"text-sm text-muted-foreground\" data-testid=\"link-product-mobile\">\n                Product\n              </a>\n              <a href=\"#pricing\" className=\"text-sm text-muted-foreground\" data-testid=\"link-pricing-mobile\">\n                Pricing\n              </a>\n              <a href=\"#blog\" className=\"text-sm text-muted-foreground\" data-testid=\"link-blog-mobile\">\n                Blog\n              </a>\n              {isAuthenticated && user ? (\n                <>\n                  <Link href=\"/dashboard\">\n                    <span className=\"text-sm text-muted-foreground\">Dashboard</span>\n                  </Link>\n                  {(effectiveRole === \"admin\" || effectiveRole === \"moderator\") && (\n                    <Link href=\"/questions\">\n                      <span className=\"text-sm text-muted-foreground\">Question Bank</span>\n                    </Link>\n                  )}\n                  <Link href=\"/discussions\">\n                    <span className=\"text-sm text-muted-foreground\">Q&A Forum</span>\n                  </Link>\n                  <Link href=\"/analytics\">\n                    <span className=\"text-sm text-muted-foreground\">Analytics</span>\n                  </Link>\n                  <Link href=\"/security\">\n                    <span className=\"text-sm text-muted-foreground\">Security</span>\n                  </Link>\n                  <Button variant=\"outline\" onClick={handleLogout} className=\"w-full\">\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Link href=\"/login\">\n                    <span className=\"text-sm text-muted-foreground\">Login</span>\n                  </Link>\n                  <Link href=\"/register\">\n                    <Button className=\"w-full\" data-testid=\"button-get-started-mobile\">\n                      Get Started\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8557},"server/storage/discussion.storage.ts":{"content":"import {\n  discussionThreads,\n  discussionPosts,\n  testAttempts,\n  testResponses,\n  questions,\n  questionTopics,\n  topics,\n  tests,\n  type DiscussionThread,\n  type InsertDiscussionThread,\n  type DiscussionPost,\n  type InsertDiscussionPost,\n} from \"@shared/schema\";\nimport { db } from \"../db\";\nimport { eq, and, desc, asc, sql } from \"drizzle-orm\";\n\nexport class DiscussionStorage {\n  async getThread(id: string): Promise<DiscussionThread | undefined> {\n    const [thread] = await db\n      .select()\n      .from(discussionThreads)\n      .where(eq(discussionThreads.id, id));\n    return thread || undefined;\n  }\n\n  async getThreads(filters?: {\n    topicId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<DiscussionThread[]> {\n    const query = filters?.topicId\n      ? db.select().from(discussionThreads).where(eq(discussionThreads.topicId, filters.topicId))\n      : db.select().from(discussionThreads);\n\n    return await query\n      .orderBy(desc(discussionThreads.isPinned), desc(discussionThreads.updatedAt))\n      .limit(filters?.limit || 20)\n      .offset(filters?.offset || 0);\n  }\n\n  async createThread(insertThread: InsertDiscussionThread): Promise<DiscussionThread> {\n    const [thread] = await db\n      .insert(discussionThreads)\n      .values(insertThread)\n      .returning();\n    return thread;\n  }\n\n  async getPost(id: string): Promise<DiscussionPost | undefined> {\n    const [post] = await db\n      .select()\n      .from(discussionPosts)\n      .where(eq(discussionPosts.id, id));\n    return post || undefined;\n  }\n\n  async getThreadPosts(threadId: string): Promise<DiscussionPost[]> {\n    return await db\n      .select()\n      .from(discussionPosts)\n      .where(eq(discussionPosts.threadId, threadId))\n      .orderBy(asc(discussionPosts.createdAt));\n  }\n\n  async createPost(insertPost: InsertDiscussionPost): Promise<DiscussionPost> {\n    const [post] = await db\n      .insert(discussionPosts)\n      .values(insertPost)\n      .returning();\n    return post;\n  }\n\n  async updatePost(id: string, data: Partial<InsertDiscussionPost>): Promise<DiscussionPost | undefined> {\n    const [post] = await db\n      .update(discussionPosts)\n      .set(data)\n      .where(eq(discussionPosts.id, id))\n      .returning();\n    return post || undefined;\n  }\n\n  async incrementPostUpvotes(id: string, amount: number): Promise<void> {\n    await db\n      .update(discussionPosts)\n      .set({ upvotes: sql`GREATEST(COALESCE(${discussionPosts.upvotes}, 0) + ${amount}, 0)` })\n      .where(eq(discussionPosts.id, id));\n  }\n\n  async getUserPerformanceStats(userId: string): Promise<{\n    totalTests: number;\n    averageScore: number;\n    averagePercentage: number;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    unanswered: number;\n    averageTimeTaken: number;\n    accuracy: number;\n  }> {\n    const attempts = await db\n      .select()\n      .from(testAttempts)\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      );\n\n    if (attempts.length === 0) {\n      return {\n        totalTests: 0,\n        averageScore: 0,\n        averagePercentage: 0,\n        totalQuestions: 0,\n        correctAnswers: 0,\n        incorrectAnswers: 0,\n        unanswered: 0,\n        averageTimeTaken: 0,\n        accuracy: 0,\n      };\n    }\n\n    const attemptIds = attempts.map(a => a.id);\n    const allResponses = await db\n      .select()\n      .from(testResponses)\n      .where(sql`${testResponses.attemptId} = ANY(${attemptIds})`);\n\n    const totalTests = attempts.length;\n    const totalScore = attempts.reduce((sum, a) => sum + (a.score || 0), 0);\n    const totalMaxScore = attempts.reduce((sum, a) => sum + (a.maxScore || 0), 0);\n    const totalTimeTaken = attempts.reduce((sum, a) => sum + (a.timeTaken || 0), 0);\n\n    const totalQuestions = allResponses.length;\n    const correctAnswers = allResponses.filter(r => r.isCorrect === true).length;\n    const incorrectAnswers = allResponses.filter(r => r.isCorrect === false).length;\n    const unanswered = totalQuestions - correctAnswers - incorrectAnswers;\n\n    return {\n      totalTests,\n      averageScore: totalTests > 0 ? Math.round(totalScore / totalTests) : 0,\n      averagePercentage: totalMaxScore > 0 ? Math.round((totalScore / totalMaxScore) * 100) : 0,\n      totalQuestions,\n      correctAnswers,\n      incorrectAnswers,\n      unanswered,\n      averageTimeTaken: totalTests > 0 ? Math.round(totalTimeTaken / totalTests) : 0,\n      accuracy: totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0,\n    };\n  }\n\n  async getTopicWisePerformance(userId: string): Promise<Array<{\n    topicId: string;\n    topicName: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>> {\n    const attempts = await db\n      .select()\n      .from(testAttempts)\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      );\n\n    if (attempts.length === 0) {\n      return [];\n    }\n\n    const attemptIds = attempts.map(a => a.id);\n\n    const result = await db\n      .select({\n        topicId: topics.id,\n        topicName: topics.name,\n        isCorrect: testResponses.isCorrect,\n      })\n      .from(testResponses)\n      .innerJoin(questions, eq(testResponses.questionId, questions.id))\n      .innerJoin(questionTopics, eq(questions.id, questionTopics.questionId))\n      .innerJoin(topics, eq(questionTopics.topicId, topics.id))\n      .where(sql`${testResponses.attemptId} = ANY(${attemptIds})`);\n\n    const topicMap = new Map<string, {\n      topicId: string;\n      topicName: string;\n      totalQuestions: number;\n      correctAnswers: number;\n      incorrectAnswers: number;\n    }>();\n\n    for (const row of result) {\n      if (!topicMap.has(row.topicId)) {\n        topicMap.set(row.topicId, {\n          topicId: row.topicId,\n          topicName: row.topicName,\n          totalQuestions: 0,\n          correctAnswers: 0,\n          incorrectAnswers: 0,\n        });\n      }\n\n      const topic = topicMap.get(row.topicId)!;\n      topic.totalQuestions++;\n      if (row.isCorrect === true) topic.correctAnswers++;\n      if (row.isCorrect === false) topic.incorrectAnswers++;\n    }\n\n    return Array.from(topicMap.values()).map(topic => ({\n      ...topic,\n      accuracy: topic.totalQuestions > 0 \n        ? Math.round((topic.correctAnswers / topic.totalQuestions) * 100) \n        : 0,\n    }));\n  }\n\n  async getDifficultyWisePerformance(userId: string): Promise<Array<{\n    difficulty: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>> {\n    const attempts = await db\n      .select()\n      .from(testAttempts)\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      );\n\n    if (attempts.length === 0) {\n      return [];\n    }\n\n    const attemptIds = attempts.map(a => a.id);\n\n    const result = await db\n      .select({\n        difficulty: questions.difficulty,\n        isCorrect: testResponses.isCorrect,\n      })\n      .from(testResponses)\n      .innerJoin(questions, eq(testResponses.questionId, questions.id))\n      .where(sql`${testResponses.attemptId} = ANY(${attemptIds})`);\n\n    const difficultyMap = new Map<string, {\n      difficulty: string;\n      totalQuestions: number;\n      correctAnswers: number;\n      incorrectAnswers: number;\n    }>();\n\n    for (const row of result) {\n      if (!difficultyMap.has(row.difficulty)) {\n        difficultyMap.set(row.difficulty, {\n          difficulty: row.difficulty,\n          totalQuestions: 0,\n          correctAnswers: 0,\n          incorrectAnswers: 0,\n        });\n      }\n\n      const diff = difficultyMap.get(row.difficulty)!;\n      diff.totalQuestions++;\n      if (row.isCorrect === true) diff.correctAnswers++;\n      if (row.isCorrect === false) diff.incorrectAnswers++;\n    }\n\n    return Array.from(difficultyMap.values()).map(diff => ({\n      ...diff,\n      accuracy: diff.totalQuestions > 0 \n        ? Math.round((diff.correctAnswers / diff.totalQuestions) * 100) \n        : 0,\n    }));\n  }\n\n  async getPerformanceTrend(userId: string, limit: number = 10): Promise<Array<{\n    attemptId: string;\n    testTitle: string;\n    score: number;\n    maxScore: number;\n    percentage: number;\n    submittedAt: Date;\n  }>> {\n    const result = await db\n      .select({\n        attemptId: testAttempts.id,\n        testTitle: tests.title,\n        score: testAttempts.score,\n        maxScore: testAttempts.maxScore,\n        submittedAt: testAttempts.submittedAt,\n      })\n      .from(testAttempts)\n      .innerJoin(tests, eq(testAttempts.testId, tests.id))\n      .where(\n        and(\n          eq(testAttempts.userId, userId),\n          eq(testAttempts.status, \"submitted\")\n        )\n      )\n      .orderBy(desc(testAttempts.submittedAt))\n      .limit(limit);\n\n    return result.map(r => ({\n      attemptId: r.attemptId,\n      testTitle: r.testTitle,\n      score: r.score || 0,\n      maxScore: r.maxScore || 0,\n      percentage: r.maxScore ? Math.round(((r.score || 0) / r.maxScore) * 100) : 0,\n      submittedAt: r.submittedAt || new Date(),\n    }));\n  }\n}\n","size_bytes":9261},"client/src/components/test/TestSummary.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Loader2 } from \"lucide-react\";\nimport type { Test, Question } from \"@shared/schema\";\n\ninterface TestSummaryProps {\n  test: Test;\n  questions: Question[];\n  answers: Record<string, string>;\n  markedForReview: Set<string>;\n  visitedQuestions: Set<string>;\n  timeLeft: number;\n  onBack: () => void;\n  onSubmit: () => void;\n  isSubmitting: boolean;\n}\n\nexport default function TestSummary({\n  test,\n  questions,\n  answers,\n  markedForReview,\n  visitedQuestions,\n  timeLeft,\n  onBack,\n  onSubmit,\n  isSubmitting,\n}: TestSummaryProps) {\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const mins = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  const getStats = () => {\n    const answered = questions?.filter(q => answers[q.id] && answers[q.id].trim() !== \"\").length || 0;\n    const answeredMarked = questions?.filter(q => \n      answers[q.id] && answers[q.id].trim() !== \"\" && markedForReview.has(q.id)\n    ).length || 0;\n    const markedOnly = questions?.filter(q => \n      markedForReview.has(q.id) && (!answers[q.id] || answers[q.id].trim() === \"\")\n    ).length || 0;\n    const notAnswered = questions?.filter(q => \n      visitedQuestions.has(q.id) && (!answers[q.id] || answers[q.id].trim() === \"\") && !markedForReview.has(q.id)\n    ).length || 0;\n    const notVisited = questions?.filter(q => \n      !visitedQuestions.has(q.id)\n    ).length || 0;\n\n    return { answered, notAnswered, marked: markedOnly, answeredMarked, notVisited };\n  };\n\n  const stats = getStats();\n\n  return (\n    <div className=\"min-h-screen bg-slate-100 dark:bg-slate-900\">\n      {/* Header */}\n      <div className=\"bg-blue-600 text-white py-3 px-6 flex justify-between items-center\">\n        <h1 className=\"text-xl font-semibold\">{test.title}</h1>\n        <div className=\"flex items-center gap-4\">\n          <span className=\"text-sm\">Time Left: {formatTime(timeLeft)}</span>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto py-8 px-4 max-w-4xl\">\n        <Card className=\"p-6\">\n          <h2 className=\"text-2xl font-bold mb-6 text-center\">Exam Summary</h2>\n          \n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Section Name</TableHead>\n                <TableHead className=\"text-center\">No. of Questions</TableHead>\n                <TableHead className=\"text-center\">Answered</TableHead>\n                <TableHead className=\"text-center\">Not Answered</TableHead>\n                <TableHead className=\"text-center\">Marked for Review</TableHead>\n                <TableHead className=\"text-center\">Answered and Marked for Review</TableHead>\n                <TableHead className=\"text-center\">Not Visited</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              <TableRow>\n                <TableCell className=\"font-medium\">All Questions</TableCell>\n                <TableCell className=\"text-center\">{questions.length}</TableCell>\n                <TableCell className=\"text-center\">{stats.answered}</TableCell>\n                <TableCell className=\"text-center\">{stats.notAnswered}</TableCell>\n                <TableCell className=\"text-center\">{stats.marked}</TableCell>\n                <TableCell className=\"text-center\">{stats.answeredMarked}</TableCell>\n                <TableCell className=\"text-center\">{stats.notVisited}</TableCell>\n              </TableRow>\n              <TableRow className=\"bg-muted/50\">\n                <TableCell className=\"font-bold\">Total</TableCell>\n                <TableCell className=\"text-center font-bold\">{questions.length}</TableCell>\n                <TableCell className=\"text-center font-bold\">{stats.answered}</TableCell>\n                <TableCell className=\"text-center font-bold\">{stats.notAnswered}</TableCell>\n                <TableCell className=\"text-center font-bold\">{stats.marked}</TableCell>\n                <TableCell className=\"text-center font-bold\">{stats.answeredMarked}</TableCell>\n                <TableCell className=\"text-center font-bold\">{stats.notVisited}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n\n          <div className=\"mt-8 text-center\">\n            <p className=\"mb-4 text-muted-foreground\">Are you sure you want to submit the Exam?</p>\n            <div className=\"flex gap-4 justify-center\">\n              <Button \n                variant=\"outline\" \n                onClick={onBack}\n                data-testid=\"button-back-to-test\"\n              >\n                No, Go Back\n              </Button>\n              <Button \n                onClick={onSubmit}\n                disabled={isSubmitting}\n                className=\"bg-emerald-600 hover:bg-emerald-700\"\n                data-testid=\"button-confirm-submit\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  \"Yes, Submit\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5510},"server/storage/role.storage.ts":{"content":"import { db } from '../db';\nimport { eq, and } from 'drizzle-orm';\nimport { roles, permissions, rolePermissions, auditLogs, users } from '@shared/schema';\nimport type { InsertRole, Role, InsertPermission, Permission, InsertRolePermission, InsertAuditLog } from '@shared/schema';\n\n/**\n * Role Storage Module\n * Handles CRUD operations for roles, permissions, and audit logs\n */\n\n// ============ Role Operations ============\n\nexport async function createRole(data: InsertRole): Promise<Role> {\n  const [role] = await db.insert(roles).values(data).returning();\n  return role;\n}\n\nexport async function getRoleById(id: string): Promise<Role | undefined> {\n  const [role] = await db.select().from(roles).where(eq(roles.id, id));\n  return role;\n}\n\nexport async function getRoleByName(name: string): Promise<Role | undefined> {\n  const [role] = await db.select().from(roles).where(eq(roles.name, name));\n  return role;\n}\n\nexport async function getAllRoles(): Promise<Role[]> {\n  return db.select().from(roles);\n}\n\nexport async function updateRole(id: string, data: Partial<InsertRole>): Promise<Role | undefined> {\n  const [role] = await db.update(roles).set(data).where(eq(roles.id, id)).returning();\n  return role;\n}\n\nexport async function deleteRole(id: string): Promise<boolean> {\n  // First delete all role-permission associations\n  await db.delete(rolePermissions).where(eq(rolePermissions.roleId, id));\n  \n  // Then delete the role\n  const result = await db.delete(roles).where(eq(roles.id, id));\n  return result.rowCount ? result.rowCount > 0 : false;\n}\n\n// ============ Permission Operations ============\n\nexport async function createPermission(data: InsertPermission): Promise<Permission> {\n  const [permission] = await db.insert(permissions).values(data).returning();\n  return permission;\n}\n\nexport async function getPermissionById(id: string): Promise<Permission | undefined> {\n  const [permission] = await db.select().from(permissions).where(eq(permissions.id, id));\n  return permission;\n}\n\nexport async function getPermissionByActionAndSubject(action: string, subject: string): Promise<Permission | undefined> {\n  const [permission] = await db.select()\n    .from(permissions)\n    .where(and(\n      eq(permissions.action, action),\n      eq(permissions.subject, subject)\n    ));\n  return permission;\n}\n\nexport async function getAllPermissions(): Promise<Permission[]> {\n  return db.select().from(permissions);\n}\n\nexport async function updatePermission(id: string, data: Partial<InsertPermission>): Promise<Permission | undefined> {\n  const [permission] = await db.update(permissions).set(data).where(eq(permissions.id, id)).returning();\n  return permission;\n}\n\nexport async function deletePermission(id: string): Promise<boolean> {\n  // First delete all role-permission associations\n  await db.delete(rolePermissions).where(eq(rolePermissions.permissionId, id));\n  \n  // Then delete the permission\n  const result = await db.delete(permissions).where(eq(permissions.id, id));\n  return result.rowCount ? result.rowCount > 0 : false;\n}\n\n// ============ Role-Permission Assignment ============\n\nexport async function assignPermissionToRole(roleId: string, permissionId: string): Promise<void> {\n  await db.insert(rolePermissions).values({\n    roleId,\n    permissionId\n  }).onConflictDoNothing();\n}\n\nexport async function revokePermissionFromRole(roleId: string, permissionId: string): Promise<void> {\n  await db.delete(rolePermissions)\n    .where(and(\n      eq(rolePermissions.roleId, roleId),\n      eq(rolePermissions.permissionId, permissionId)\n    ));\n}\n\nexport async function getPermissionsByRoleId(roleId: string): Promise<Permission[]> {\n  const result = await db\n    .select({\n      id: permissions.id,\n      action: permissions.action,\n      subject: permissions.subject,\n      description: permissions.description,\n      conditions: permissions.conditions,\n      createdAt: permissions.createdAt,\n    })\n    .from(rolePermissions)\n    .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n    .where(eq(rolePermissions.roleId, roleId));\n  \n  return result;\n}\n\nexport async function getRolesByPermissionId(permissionId: string): Promise<Role[]> {\n  const result = await db\n    .select({\n      id: roles.id,\n      name: roles.name,\n      description: roles.description,\n      isSystem: roles.isSystem,\n      createdAt: roles.createdAt,\n      updatedAt: roles.updatedAt,\n    })\n    .from(rolePermissions)\n    .innerJoin(roles, eq(rolePermissions.roleId, roles.id))\n    .where(eq(rolePermissions.permissionId, permissionId));\n  \n  return result;\n}\n\n/**\n * Get all permissions for a user based on their role\n * Returns the permissions from the user's role in the users table\n */\nexport async function getUserPermissionsByRole(userRole: string): Promise<Permission[]> {\n  // First get the role by name\n  const role = await getRoleByName(userRole);\n  if (!role) {\n    return [];\n  }\n  \n  // Then get all permissions for that role\n  return getPermissionsByRoleId(role.id);\n}\n\n// ============ Audit Log Operations ============\n\nexport async function createAuditLog(data: InsertAuditLog): Promise<void> {\n  await db.insert(auditLogs).values(data);\n}\n\nexport async function getAuditLogs(limit: number = 100, offset: number = 0) {\n  return db.select()\n    .from(auditLogs)\n    .orderBy(auditLogs.createdAt)\n    .limit(limit)\n    .offset(offset);\n}\n\nexport async function getAuditLogsByUserId(userId: string, limit: number = 100) {\n  return db.select()\n    .from(auditLogs)\n    .where(eq(auditLogs.userId, userId))\n    .orderBy(auditLogs.createdAt)\n    .limit(limit);\n}\n\nexport async function getAuditLogsByResource(resource: string, resourceId: string, limit: number = 100) {\n  return db.select()\n    .from(auditLogs)\n    .where(and(\n      eq(auditLogs.resource, resource),\n      eq(auditLogs.resourceId, resourceId)\n    ))\n    .orderBy(auditLogs.createdAt)\n    .limit(limit);\n}\n","size_bytes":5896},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/examples/PricingSection.tsx":{"content":"import PricingSection from '../PricingSection';\n\nexport default function PricingSectionExample() {\n  return <PricingSection />;\n}\n","size_bytes":130},"client/src/components/examples/TestimonialsSection.tsx":{"content":"import TestimonialsSection from '../TestimonialsSection';\n\nexport default function TestimonialsSectionExample() {\n  return <TestimonialsSection />;\n}\n","size_bytes":150},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useViewAsRole } from \"@/contexts/ViewAsRoleContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useLocation } from \"wouter\";\nimport { BookOpen, TrendingUp, Calendar, Users, Eye, FileQuestion, BarChart3, MessageSquare, ShoppingCart, Package } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, isLoading } = useAuth();\n  const { viewAsRole, setViewAsRole, effectiveRole } = useViewAsRole();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading || !user) {\n    return null;\n  }\n\n  const stats = [\n    {\n      title: \"Tests Taken\",\n      value: \"0\",\n      icon: BookOpen,\n      description: \"Total tests completed\",\n    },\n    {\n      title: \"Average Score\",\n      value: \"N/A\",\n      icon: TrendingUp,\n      description: \"Your performance\",\n    },\n    {\n      title: \"Upcoming Tests\",\n      value: \"0\",\n      icon: Calendar,\n      description: \"Scheduled for you\",\n    },\n    {\n      title: \"Rank\",\n      value: \"N/A\",\n      icon: Users,\n      description: \"Among all users\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto p-6 space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-dashboard-title\">\n              Welcome back, {user.name}!\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Track your progress and prepare for GATE\n            </p>\n          </div>\n          \n          {/* Role Switcher (Admin and Moderator) */}\n          {(user.role === \"admin\" || user.role === \"moderator\") && (\n            <div className=\"flex items-center gap-2 mr-4\">\n              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n              <Select value={viewAsRole} onValueChange={setViewAsRole}>\n                <SelectTrigger className=\"w-[160px]\" data-testid=\"select-view-as-role\">\n                  <SelectValue placeholder=\"View as...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {user.role === \"admin\" && (\n                    <SelectItem value=\"admin\" data-testid=\"option-view-as-admin\">Admin</SelectItem>\n                  )}\n                  <SelectItem value=\"moderator\" data-testid=\"option-view-as-moderator\">Moderator</SelectItem>\n                  <SelectItem value=\"student\" data-testid=\"option-view-as-student\">Student</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          <div className=\"flex gap-2\">\n            <Button onClick={() => setLocation(\"/tests\")} data-testid=\"button-browse-tests\">\n              Browse Tests\n            </Button>\n            <Button variant=\"outline\" onClick={() => setLocation(\"/practice\")}>\n              Practice\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {stats.map((stat, index) => (\n            <Card key={index}>\n              <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  {stat.title}\n                </CardTitle>\n                <stat.icon className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid={`text-stat-${index}`}>\n                  {stat.value}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {stat.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Quick Links */}\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Quick Links</h2>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <Card className=\"hover-elevate cursor-pointer\" onClick={() => setLocation(\"/tests\")} data-testid=\"card-quick-link-tests\">\n              <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                <div>\n                  <CardTitle className=\"text-base\">Mock Tests</CardTitle>\n                  <CardDescription className=\"mt-1\">Practice with full-length tests</CardDescription>\n                </div>\n                <BookOpen className=\"h-6 w-6 text-primary\" />\n              </CardHeader>\n            </Card>\n            \n            {(effectiveRole === \"admin\" || effectiveRole === \"moderator\") && (\n              <Card className=\"hover-elevate cursor-pointer\" onClick={() => setLocation(\"/questions\")} data-testid=\"card-quick-link-questions\">\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <div>\n                    <CardTitle className=\"text-base\">Question Bank</CardTitle>\n                    <CardDescription className=\"mt-1\">Create and manage exam questions</CardDescription>\n                  </div>\n                  <FileQuestion className=\"h-6 w-6 text-primary\" />\n                </CardHeader>\n              </Card>\n            )}\n            \n            {effectiveRole === \"student\" && (\n              <Card className=\"hover-elevate cursor-pointer\" onClick={() => setLocation(\"/discussions\")} data-testid=\"card-quick-link-discussions\">\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <div>\n                    <CardTitle className=\"text-base\">Q&A Forum</CardTitle>\n                    <CardDescription className=\"mt-1\">Ask doubts and get answers</CardDescription>\n                  </div>\n                  <MessageSquare className=\"h-6 w-6 text-primary\" />\n                </CardHeader>\n              </Card>\n            )}\n            \n            <Card className=\"hover-elevate cursor-pointer\" onClick={() => setLocation(\"/analytics\")} data-testid=\"card-quick-link-analytics\">\n              <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                <div>\n                  <CardTitle className=\"text-base\">Analytics</CardTitle>\n                  <CardDescription className=\"mt-1\">Track your performance</CardDescription>\n                </div>\n                <BarChart3 className=\"h-6 w-6 text-primary\" />\n              </CardHeader>\n            </Card>\n            \n            {effectiveRole === \"student\" && (\n              <>\n                <Card className=\"hover-elevate cursor-pointer\" onClick={() => setLocation(\"/shop\")} data-testid=\"card-quick-link-shop\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <div>\n                      <CardTitle className=\"text-base\">Test Series Shop</CardTitle>\n                      <CardDescription className=\"mt-1\">Browse and purchase test series</CardDescription>\n                    </div>\n                    <ShoppingCart className=\"h-6 w-6 text-primary\" />\n                  </CardHeader>\n                </Card>\n                \n                <Card className=\"hover-elevate cursor-pointer\" onClick={() => setLocation(\"/my-purchases\")} data-testid=\"card-quick-link-purchases\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <div>\n                      <CardTitle className=\"text-base\">My Purchases</CardTitle>\n                      <CardDescription className=\"mt-1\">View your subscriptions</CardDescription>\n                    </div>\n                    <Package className=\"h-6 w-6 text-primary\" />\n                  </CardHeader>\n                </Card>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Tests</CardTitle>\n              <CardDescription>\n                Your latest test attempts\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No tests taken yet. Start practicing now!\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Analytics</CardTitle>\n              <CardDescription>\n                Topic-wise performance breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Take tests to see your analytics\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Test Series Banner */}\n        {effectiveRole === \"student\" && (\n          <Card className=\"bg-gradient-to-r from-primary/10 to-primary/5 border-primary/20\">\n            <CardHeader>\n              <CardTitle>Explore Test Series</CardTitle>\n              <CardDescription>\n                Access premium mock tests and boost your GATE preparation\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex items-center justify-between\">\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Comprehensive test series for all subjects</li>\n                <li>• GATE-authentic exam interface</li>\n                <li>• Detailed performance analytics</li>\n              </ul>\n              <Button onClick={() => setLocation(\"/shop\")} data-testid=\"button-browse-shop\">\n                Browse Shop\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10267},"server/workers/test-scoring.worker.ts":{"content":"import { Worker, Job } from 'bullmq';\nimport { storage } from '../storage/index.js';\nimport type { TestScoringJob } from '../queue.js';\n\n// Redis connection from environment\nconst redisUrl = process.env.REDIS_URL;\nlet connection: any = undefined;\n\nif (redisUrl) {\n  const url = new URL(redisUrl);\n  connection = {\n    host: url.hostname,\n    port: parseInt(url.port || '6379'),\n    password: url.password || undefined,\n    tls: url.protocol === 'rediss:' ? {} : undefined,\n  };\n}\n\n/**\n * Calculate test score from responses\n */\nasync function calculateTestScore(attemptId: string, testId: string): Promise<{ score: number; maxScore: number }> {\n  // Get test and questions\n  const test = await storage.getTest(testId);\n  const questions = await storage.getTestQuestions(testId);\n  const responses = await storage.getTestAttemptResponses(attemptId);\n  \n  if (!test) {\n    throw new Error(`Test ${testId} not found`);\n  }\n\n  // Calculate score\n  let totalScore = 0;\n  for (const response of responses) {\n    const question = questions.find(q => q.id === response.questionId);\n    if (!question) continue;\n    \n    let isCorrect = false;\n    let marksAwarded = 0;\n    \n    // Skip scoring if answer is empty/cleared (unanswered)\n    if (!response.selectedAnswer || response.selectedAnswer.trim() === \"\") {\n      await storage.updateTestResponse(response.id, {\n        isCorrect: false,\n        marksAwarded: 0,\n      });\n      continue;\n    }\n    \n    if (question.type === \"numerical\") {\n      isCorrect = response.selectedAnswer === question.correctAnswer;\n      marksAwarded = isCorrect ? question.marks : -question.negativeMarks;\n    } else if (question.type === \"mcq_single\") {\n      const correctOption = (question.options as any)?.find((opt: any) => opt.isCorrect);\n      isCorrect = response.selectedAnswer === correctOption?.id;\n      marksAwarded = isCorrect ? question.marks : -question.negativeMarks;\n    } else if (question.type === \"mcq_multiple\") {\n      const correctOptions = (question.options as any)?.filter((opt: any) => opt.isCorrect).map((opt: any) => opt.id).sort().join(\",\");\n      const selectedOptions = response.selectedAnswer?.split(\",\").filter(Boolean).sort().join(\",\");\n      isCorrect = selectedOptions === correctOptions;\n      marksAwarded = isCorrect ? question.marks : -question.negativeMarks;\n    }\n    \n    // Update response with correctness and marks\n    await storage.updateTestResponse(response.id, {\n      isCorrect,\n      marksAwarded,\n    });\n    \n    totalScore += marksAwarded;\n  }\n  \n  return {\n    score: totalScore,\n    maxScore: test.totalMarks || 0,\n  };\n}\n\n/**\n * Test scoring worker\n * Processes test submissions asynchronously\n */\nlet testScoringWorker: Worker | null = null;\n\nif (connection) {\n  testScoringWorker = new Worker<TestScoringJob>(\n    'test-scoring',\n    async (job: Job<TestScoringJob>) => {\n      const { attemptId, userId, testId } = job.data;\n      \n      console.log(`🔄 Processing test scoring for attempt ${attemptId}`);\n      \n      try {\n        // Calculate score\n        const { score, maxScore } = await calculateTestScore(attemptId, testId);\n        \n        // Update attempt with score and status\n        await storage.updateTestAttempt(attemptId, {\n          score,\n          maxScore,\n          status: \"submitted\",\n        });\n        \n        console.log(`✅ Test scored: ${score}/${maxScore} for attempt ${attemptId}`);\n        \n        // Trigger analytics update job (import will be added at top)\n        const { queueHelpers } = await import('../queue.js');\n        await queueHelpers.updateAnalytics(userId, testId);\n        \n        return { score, maxScore, attemptId };\n      } catch (error) {\n        console.error(`❌ Test scoring failed for attempt ${attemptId}:`, error);\n        throw error;\n      }\n    },\n    {\n      connection,\n      concurrency: 10, // Process 10 jobs concurrently\n      limiter: {\n        max: 100, // Max 100 jobs per duration\n        duration: 1000, // 1 second\n      },\n    }\n  );\n\n  // Event handlers\n  testScoringWorker.on('completed', (job) => {\n    console.log(`✅ Test scoring worker completed job ${job.id}`);\n  });\n\n  testScoringWorker.on('failed', (job, err) => {\n    console.error(`❌ Test scoring worker failed job ${job?.id}:`, err.message);\n  });\n\n  testScoringWorker.on('error', (err) => {\n    console.error('❌ Test scoring worker error:', err);\n  });\n\n  console.log('✅ Test scoring worker initialized');\n} else {\n  console.warn('⚠️ Test scoring worker not initialized - Redis not available');\n}\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  if (testScoringWorker) {\n    await testScoringWorker.close();\n    console.log('Test scoring worker closed');\n  }\n});\n\nexport { testScoringWorker };\n","size_bytes":4753},"client/src/components/examples/FAQSection.tsx":{"content":"import FAQSection from '../FAQSection';\n\nexport default function FAQSectionExample() {\n  return <FAQSection />;\n}\n","size_bytes":114},"client/src/pages/QuestionForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute, useLocation, Link } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, Trash2, Save } from \"lucide-react\";\nimport { RichTextEditor } from \"@/components/RichTextEditor\";\nimport type { Question, Topic, Subject } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\n\nconst questionSchema = z.object({\n  content: z.string().min(10, \"Question content must be at least 10 characters\"),\n  type: z.enum([\"mcq_single\", \"mcq_multiple\", \"numerical\"]),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  marks: z.number().min(1).max(10),\n  negativeMarks: z.number().min(0).max(5),\n  explanation: z.string().optional(),\n  imageUrl: z.string().url().optional().or(z.literal(\"\")),\n  isPublished: z.boolean(),\n  options: z.array(z.object({\n    id: z.string(),\n    text: z.string().min(1, \"Option text is required\"),\n    isCorrect: z.boolean(),\n  })).optional(),\n  correctAnswer: z.string().optional(),\n  topicId: z.string().min(1, \"Please select a topic\"),\n});\n\ntype QuestionFormData = z.infer<typeof questionSchema>;\n\nexport default function QuestionForm() {\n  const { user } = useAuth();\n  const [, params] = useRoute(\"/questions/:id/edit\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const questionId = params?.id;\n  const isEditing = !!questionId;\n\n  const [selectedSubjectId, setSelectedSubjectId] = useState<string>(\"\");\n  const [isNewTopicDialogOpen, setIsNewTopicDialogOpen] = useState(false);\n  const [newTopicName, setNewTopicName] = useState(\"\");\n  const [newTopicDescription, setNewTopicDescription] = useState(\"\");\n\n  // Fetch subjects\n  const { data: subjects = [] } = useQuery<Subject[]>({\n    queryKey: [\"/api/subjects\"],\n  });\n\n  // Fetch topics based on selected subject\n  const { data: topics = [] } = useQuery<Topic[]>({\n    queryKey: [\"/api/topics\", selectedSubjectId],\n    enabled: !!selectedSubjectId,\n    queryFn: async () => {\n      const response = await fetch(`/api/topics?subjectId=${selectedSubjectId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch topics\");\n      return response.json();\n    },\n  });\n\n  // Fetch existing question if editing\n  const { data: question } = useQuery<Question>({\n    queryKey: [\"/api/questions\", questionId],\n    enabled: isEditing,\n  });\n\n  const form = useForm<QuestionFormData>({\n    resolver: zodResolver(questionSchema),\n    defaultValues: {\n      content: \"\",\n      type: \"mcq_single\",\n      difficulty: \"medium\",\n      marks: 1,\n      negativeMarks: 0,\n      explanation: \"\",\n      imageUrl: \"\",\n      isPublished: false,\n      options: [\n        { id: \"A\", text: \"\", isCorrect: false },\n        { id: \"B\", text: \"\", isCorrect: false },\n        { id: \"C\", text: \"\", isCorrect: false },\n        { id: \"D\", text: \"\", isCorrect: false },\n      ],\n      correctAnswer: \"\",\n      topicId: \"\",\n    },\n  });\n\n  const questionType = form.watch(\"type\");\n\n  // Update form when question data is loaded\n  useEffect(() => {\n    if (question) {\n      const questionWithTopics = question as any;\n      form.reset({\n        content: question.content,\n        type: question.type,\n        difficulty: question.difficulty,\n        marks: question.marks,\n        negativeMarks: question.negativeMarks,\n        explanation: question.explanation || \"\",\n        imageUrl: question.imageUrl || \"\",\n        isPublished: question.isPublished,\n        options: question.options as any || [],\n        correctAnswer: question.correctAnswer || \"\",\n        topicId: questionWithTopics.topics?.[0]?.id || \"\",\n      });\n    }\n  }, [question, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: QuestionFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/questions\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Question created successfully\",\n      });\n      setLocation(\"/questions\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create question\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: QuestionFormData) => {\n      const response = await apiRequest(\"PATCH\", `/api/questions/${questionId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\", questionId] });\n      toast({\n        title: \"Success\",\n        description: \"Question updated successfully\",\n      });\n      setLocation(`/questions/${questionId}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update question\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createTopicMutation = useMutation({\n    mutationFn: async (data: { name: string; slug: string; subjectId: string; description?: string }) => {\n      return apiRequest(\"POST\", \"/api/topics\", data);\n    },\n    onSuccess: (newTopic: Topic) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics\"] });\n      setIsNewTopicDialogOpen(false);\n      setNewTopicName(\"\");\n      setNewTopicDescription(\"\");\n      form.setValue(\"topicId\", newTopic.id);\n      toast({ title: \"Topic created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create topic\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCreateTopic = () => {\n    if (!selectedSubjectId || !newTopicName.trim()) {\n      toast({ title: \"Please provide topic name\", variant: \"destructive\" });\n      return;\n    }\n    const slug = newTopicName.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');\n    createTopicMutation.mutate({\n      name: newTopicName.trim(),\n      slug,\n      subjectId: selectedSubjectId,\n      description: newTopicDescription.trim() || undefined,\n    });\n  };\n\n  const onSubmit = (data: QuestionFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const addOption = () => {\n    const currentOptions = form.getValues(\"options\") || [];\n    const nextLetter = String.fromCharCode(65 + currentOptions.length); // A, B, C, ...\n    form.setValue(\"options\", [\n      ...currentOptions,\n      { id: nextLetter, text: \"\", isCorrect: false },\n    ]);\n  };\n\n  const removeOption = (index: number) => {\n    const currentOptions = form.getValues(\"options\") || [];\n    form.setValue(\"options\", currentOptions.filter((_, i) => i !== index));\n  };\n\n  // All authenticated users can create/edit questions\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 md:p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <p className=\"text-lg font-medium text-foreground\">Access Denied</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                You need to be logged in to manage questions\n              </p>\n              <Link href=\"/login\">\n                <Button className=\"mt-4\" variant=\"outline\">\n                  Go to Login\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-8\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/questions\">\n            <Button variant=\"ghost\" className=\"gap-2\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Questions\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>{isEditing ? \"Edit Question\" : \"Create New Question\"}</CardTitle>\n            <CardDescription>\n              {isEditing ? \"Update question details\" : \"Add a new question to the question bank\"}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Basic Information */}\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <RichTextEditor\n                          value={field.value}\n                          onChange={field.onChange}\n                          label=\"Question Content *\"\n                          placeholder=\"Write your question here... You can use Markdown, LaTeX equations ($...$), and code blocks.\"\n                          minHeight=\"250px\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Question Type *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-question-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"mcq_single\">MCQ (Single Correct)</SelectItem>\n                            <SelectItem value=\"mcq_multiple\">MSQ (Multiple Correct)</SelectItem>\n                            <SelectItem value=\"numerical\">Numerical Answer</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"difficulty\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Difficulty *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-difficulty\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"easy\">Easy</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"hard\">Hard</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"marks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Marks *</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"10\"\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            data-testid=\"input-marks\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"negativeMarks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Negative Marks</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"5\"\n                            step=\"0.25\"\n                            onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                            data-testid=\"input-negative-marks\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormItem>\n                    <FormLabel>Subject *</FormLabel>\n                    <Select\n                      onValueChange={(value) => {\n                        setSelectedSubjectId(value);\n                        form.setValue(\"topicId\", \"\"); // Reset topic when subject changes\n                      }}\n                      value={selectedSubjectId}\n                    >\n                      <SelectTrigger data-testid=\"select-subject\">\n                        <SelectValue placeholder=\"Select subject\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {subjects.map((subject) => (\n                          <SelectItem key={subject.id} value={subject.id}>\n                            {subject.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n\n                  <FormField\n                    control={form.control}\n                    name=\"topicId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <div className=\"flex items-center justify-between\">\n                          <FormLabel>Topic *</FormLabel>\n                          {selectedSubjectId && (\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setIsNewTopicDialogOpen(true)}\n                              className=\"gap-1\"\n                              data-testid=\"button-add-new-topic\"\n                            >\n                              <Plus className=\"h-3 w-3\" />\n                              New Topic\n                            </Button>\n                          )}\n                        </div>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                          disabled={!selectedSubjectId}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-topic\">\n                              <SelectValue\n                                placeholder={\n                                  selectedSubjectId\n                                    ? \"Select topic\"\n                                    : \"Select a subject first\"\n                                }\n                              />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {topics.map((topic) => (\n                              <SelectItem key={topic.id} value={topic.id}>\n                                {topic.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Options for MCQ/MSQ */}\n                {(questionType === \"mcq_single\" || questionType === \"mcq_multiple\") && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <FormLabel>Options *</FormLabel>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={addOption}\n                        className=\"gap-2\"\n                        data-testid=\"button-add-option\"\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                        Add Option\n                      </Button>\n                    </div>\n                    <div className=\"space-y-3\">\n                      {(form.watch(\"options\") || []).map((option, index) => (\n                        <div key={index} className=\"flex items-start gap-3 p-4 border rounded-lg\">\n                          <FormField\n                            control={form.control}\n                            name={`options.${index}.isCorrect`}\n                            render={({ field }) => (\n                              <FormItem className=\"flex items-center space-y-0\">\n                                <FormControl>\n                                  <Checkbox\n                                    checked={field.value}\n                                    onCheckedChange={field.onChange}\n                                    data-testid={`checkbox-option-${index}-correct`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                          <div className=\"flex-1\">\n                            <FormField\n                              control={form.control}\n                              name={`options.${index}.text`}\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormControl>\n                                    <Textarea\n                                      {...field}\n                                      placeholder={`Option ${option.id} (supports LaTeX: $x^2$)`}\n                                      data-testid={`input-option-${index}`}\n                                      className=\"min-h-20 font-mono text-sm\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeOption(index)}\n                            disabled={(form.watch(\"options\")?.length || 0) <= 2}\n                            data-testid={`button-remove-option-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                    <FormDescription>\n                      Check the box next to the correct option(s)\n                    </FormDescription>\n                  </div>\n                )}\n\n                {/* Correct Answer for Numerical */}\n                {questionType === \"numerical\" && (\n                  <FormField\n                    control={form.control}\n                    name=\"correctAnswer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Correct Answer *</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter the correct numerical answer\"\n                            data-testid=\"input-correct-answer\"\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Enter the numerical value or range\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n                {/* Additional Information */}\n                <FormField\n                  control={form.control}\n                  name=\"explanation\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <RichTextEditor\n                          value={field.value || \"\"}\n                          onChange={field.onChange}\n                          label=\"Explanation\"\n                          placeholder=\"Explain the correct answer with detailed solution steps...\"\n                          minHeight=\"200px\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"imageUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image URL</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"https://example.com/image.jpg\"\n                          data-testid=\"input-image-url\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isPublished\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Publish Question</FormLabel>\n                        <FormDescription>\n                          Make this question visible to students\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-published\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                {/* Submit Button */}\n                <div className=\"flex justify-end gap-4\">\n                  <Link href=\"/questions\">\n                    <Button type=\"button\" variant=\"outline\" data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                  </Link>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    className=\"gap-2\"\n                    data-testid=\"button-submit\"\n                  >\n                    <Save className=\"h-4 w-4\" />\n                    {isEditing ? \"Update Question\" : \"Create Question\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={isNewTopicDialogOpen} onOpenChange={setIsNewTopicDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create New Topic</DialogTitle>\n            <DialogDescription>\n              Add a new topic to {subjects.find(s => s.id === selectedSubjectId)?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"new-topic-name\">Topic Name *</Label>\n              <Input\n                id=\"new-topic-name\"\n                value={newTopicName}\n                onChange={(e) => setNewTopicName(e.target.value)}\n                placeholder=\"e.g., Arrays and Strings\"\n                data-testid=\"input-new-topic-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"new-topic-description\">Description</Label>\n              <Textarea\n                id=\"new-topic-description\"\n                value={newTopicDescription}\n                onChange={(e) => setNewTopicDescription(e.target.value)}\n                placeholder=\"Brief description of the topic\"\n                rows={3}\n                data-testid=\"input-new-topic-description\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsNewTopicDialogOpen(false)}\n              data-testid=\"button-cancel-new-topic\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleCreateTopic}\n              disabled={createTopicMutation.isPending || !newTopicName.trim()}\n              data-testid=\"button-create-new-topic\"\n            >\n              {createTopicMutation.isPending ? \"Creating...\" : \"Create Topic\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":26896},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  return <HeroSection />;\n}\n","size_bytes":118},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/storage/payment.storage.ts":{"content":"import {\n  testSeries,\n  testSeriesTests,\n  userPurchases,\n  transactions,\n  tests,\n  type TestSeries,\n  type InsertTestSeries,\n  type TestSeriesTest,\n  type UserPurchase,\n  type InsertUserPurchase,\n  type Transaction,\n  type InsertTransaction,\n  type Test,\n} from \"@shared/schema\";\nimport { db } from \"../db\";\nimport { eq, and, desc, asc } from \"drizzle-orm\";\n\nexport class PaymentStorage {\n  async getTestSeries(id: string): Promise<TestSeries | undefined> {\n    const [series] = await db\n      .select()\n      .from(testSeries)\n      .where(eq(testSeries.id, id));\n    return series || undefined;\n  }\n\n  async getAllTestSeries(filters?: { isActive?: boolean }): Promise<TestSeries[]> {\n    const query = filters?.isActive !== undefined\n      ? db.select().from(testSeries).where(eq(testSeries.isActive, filters.isActive))\n      : db.select().from(testSeries);\n\n    return await query.orderBy(asc(testSeries.price));\n  }\n\n  async createTestSeries(insertTestSeries: InsertTestSeries): Promise<TestSeries> {\n    const [series] = await db\n      .insert(testSeries)\n      .values(insertTestSeries)\n      .returning();\n    return series;\n  }\n\n  async updateTestSeries(id: string, data: Partial<InsertTestSeries>): Promise<TestSeries | undefined> {\n    const [series] = await db\n      .update(testSeries)\n      .set(data)\n      .where(eq(testSeries.id, id))\n      .returning();\n    return series || undefined;\n  }\n\n  async addTestToSeries(testSeriesId: string, testId: string, order: number): Promise<void> {\n    await db\n      .insert(testSeriesTests)\n      .values({ testSeriesId, testId, order });\n  }\n\n  async removeTestFromSeries(testSeriesId: string, testId: string): Promise<void> {\n    await db\n      .delete(testSeriesTests)\n      .where(\n        and(\n          eq(testSeriesTests.testSeriesId, testSeriesId),\n          eq(testSeriesTests.testId, testId)\n        )\n      );\n  }\n\n  async getTestSeriesTests(testSeriesId: string): Promise<Test[]> {\n    const result = await db\n      .select({\n        test: tests,\n      })\n      .from(testSeriesTests)\n      .innerJoin(tests, eq(testSeriesTests.testId, tests.id))\n      .where(eq(testSeriesTests.testSeriesId, testSeriesId))\n      .orderBy(asc(testSeriesTests.order));\n\n    return result.map(r => r.test);\n  }\n\n  async getTestSeriesByTestId(testId: string): Promise<TestSeries | undefined> {\n    const result = await db\n      .select({\n        testSeries: testSeries,\n      })\n      .from(testSeriesTests)\n      .innerJoin(testSeries, eq(testSeriesTests.testSeriesId, testSeries.id))\n      .where(eq(testSeriesTests.testId, testId))\n      .limit(1);\n\n    return result[0]?.testSeries || undefined;\n  }\n\n  async getTestSeriesTestsByTestId(testId: string): Promise<TestSeriesTest[]> {\n    return await db\n      .select()\n      .from(testSeriesTests)\n      .where(eq(testSeriesTests.testId, testId));\n  }\n\n  async getUserPurchase(userId: string, testSeriesId: string): Promise<UserPurchase | undefined> {\n    const [purchase] = await db\n      .select()\n      .from(userPurchases)\n      .where(\n        and(\n          eq(userPurchases.userId, userId),\n          eq(userPurchases.testSeriesId, testSeriesId)\n        )\n      );\n    return purchase || undefined;\n  }\n\n  async getUserPurchases(userId: string, filters?: { status?: string }): Promise<UserPurchase[]> {\n    const conditions = [eq(userPurchases.userId, userId)];\n    \n    if (filters?.status) {\n      conditions.push(eq(userPurchases.status, filters.status as any));\n    }\n\n    return await db\n      .select()\n      .from(userPurchases)\n      .where(and(...conditions))\n      .orderBy(desc(userPurchases.purchaseDate));\n  }\n\n  async createUserPurchase(insertPurchase: InsertUserPurchase): Promise<UserPurchase> {\n    const [purchase] = await db\n      .insert(userPurchases)\n      .values(insertPurchase)\n      .returning();\n    return purchase;\n  }\n\n  async updateUserPurchase(id: string, data: Partial<InsertUserPurchase>): Promise<UserPurchase | undefined> {\n    const [purchase] = await db\n      .update(userPurchases)\n      .set(data)\n      .where(eq(userPurchases.id, id))\n      .returning();\n    return purchase || undefined;\n  }\n\n  async checkUserHasAccess(userId: string, testSeriesId: string): Promise<boolean> {\n    const [purchase] = await db\n      .select()\n      .from(userPurchases)\n      .where(\n        and(\n          eq(userPurchases.userId, userId),\n          eq(userPurchases.testSeriesId, testSeriesId),\n          eq(userPurchases.status, \"active\")\n        )\n      );\n    \n    if (!purchase) return false;\n    \n    const now = new Date();\n    return purchase.expiryDate > now;\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.id, id));\n    return transaction || undefined;\n  }\n\n  async getTransactionByOrderId(orderId: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.razorpayOrderId, orderId));\n    return transaction || undefined;\n  }\n\n  async getUserTransactions(userId: string, limit: number = 50): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt))\n      .limit(limit);\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(insertTransaction)\n      .returning();\n    return transaction;\n  }\n\n  async updateTransaction(id: string, data: Partial<InsertTransaction>): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .update(transactions)\n      .set(data)\n      .where(eq(transactions.id, id))\n      .returning();\n    return transaction || undefined;\n  }\n}\n","size_bytes":5892},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/QuestionDetail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowLeft, Edit, CheckCircle2, XCircle, BookOpen, Info } from \"lucide-react\";\nimport { MarkdownRenderer } from \"@/components/MarkdownRenderer\";\nimport type { Question } from \"@shared/schema\";\n\nexport default function QuestionDetail() {\n  const { user } = useAuth();\n  const [, params] = useRoute(\"/questions/:id\");\n  const questionId = params?.id;\n\n  const { data: question, isLoading } = useQuery<Question>({\n    queryKey: [\"/api/questions\", questionId],\n    enabled: !!questionId,\n  });\n\n  const canEdit = user?.role === \"admin\" || user?.role === \"moderator\";\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"easy\":\n        return \"bg-emerald-500/10 text-emerald-500 border-emerald-500/20\";\n      case \"medium\":\n        return \"bg-amber-500/10 text-amber-500 border-amber-500/20\";\n      case \"hard\":\n        return \"bg-red-500/10 text-red-500 border-red-500/20\";\n      default:\n        return \"bg-slate-500/10 text-slate-500 border-slate-500/20\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 md:p-8\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          <Skeleton className=\"h-10 w-1/3\" />\n          <Card>\n            <CardHeader>\n              <Skeleton className=\"h-8 w-3/4\" />\n              <Skeleton className=\"h-4 w-1/2 mt-2\" />\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Skeleton className=\"h-24 w-full\" />\n              <Skeleton className=\"h-24 w-full\" />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!question) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 md:p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <BookOpen className=\"h-12 w-12 text-muted-foreground mb-4\" />\n              <p className=\"text-lg font-medium text-foreground\">Question not found</p>\n              <Link href=\"/questions\">\n                <Button className=\"mt-4\" variant=\"outline\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Questions\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-8\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/questions\">\n            <Button variant=\"ghost\" className=\"gap-2\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Questions\n            </Button>\n          </Link>\n          {canEdit && (\n            <Link href={`/questions/${question.id}/edit`}>\n              <Button variant=\"outline\" className=\"gap-2\" data-testid=\"button-edit-question\">\n                <Edit className=\"h-4 w-4\" />\n                Edit\n              </Button>\n            </Link>\n          )}\n        </div>\n\n        {/* Question Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Badge className={getDifficultyColor(question.difficulty)} variant=\"outline\">\n                {question.difficulty}\n              </Badge>\n              <Badge variant=\"secondary\">\n                {question.type === \"mcq_single\" ? \"MCQ\" : question.type === \"mcq_multiple\" ? \"MSQ\" : \"NUMERICAL\"}\n              </Badge>\n              <Badge variant=\"outline\">\n                {question.marks} {question.marks === 1 ? \"mark\" : \"marks\"}\n              </Badge>\n              {question.negativeMarks > 0 && (\n                <Badge variant=\"destructive\">\n                  -{question.negativeMarks} (negative)\n                </Badge>\n              )}\n            </div>\n            <div className=\"prose dark:prose-invert max-w-none\" data-testid=\"text-question-content\">\n              <MarkdownRenderer content={question.content} />\n            </div>\n          </CardHeader>\n\n          {question.imageUrl && (\n            <CardContent>\n              <img\n                src={question.imageUrl}\n                alt=\"Question illustration\"\n                className=\"rounded-lg border border-border max-w-full\"\n              />\n            </CardContent>\n          )}\n\n          {/* Options for MCQ/MSQ */}\n          {(question.type === \"mcq_single\" || question.type === \"mcq_multiple\") && question.options && (\n            <CardContent>\n              <h3 className=\"text-sm font-medium mb-4\">Options:</h3>\n              <div className=\"space-y-3\">\n                {(question.options as any[]).map((option: any) => (\n                  <div\n                    key={option.id}\n                    className={`p-4 rounded-lg border ${\n                      option.isCorrect\n                        ? \"border-emerald-500/50 bg-emerald-500/5\"\n                        : \"border-border bg-card\"\n                    }`}\n                    data-testid={`option-${option.id}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {option.isCorrect ? (\n                          <CheckCircle2 className=\"h-5 w-5 text-emerald-500\" />\n                        ) : (\n                          <XCircle className=\"h-5 w-5 text-muted-foreground\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1 prose dark:prose-invert prose-sm max-w-none\">\n                        <span className=\"font-medium text-sm text-muted-foreground mr-2 not-prose\">\n                          {option.id}.\n                        </span>\n                        <MarkdownRenderer content={option.text} />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          )}\n\n          {/* Correct Answer for Numerical */}\n          {question.type === \"numerical\" && question.correctAnswer && (\n            <CardContent>\n              <div className=\"p-4 rounded-lg border border-emerald-500/50 bg-emerald-500/5\">\n                <h3 className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n                  <CheckCircle2 className=\"h-4 w-4 text-emerald-500\" />\n                  Correct Answer:\n                </h3>\n                <p className=\"text-lg font-semibold text-foreground\" data-testid=\"text-correct-answer\">\n                  {question.correctAnswer}\n                </p>\n              </div>\n            </CardContent>\n          )}\n\n          {/* Explanation */}\n          {question.explanation && (\n            <CardContent>\n              <div className=\"p-4 rounded-lg border border-border bg-muted/50\">\n                <h3 className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n                  <Info className=\"h-4 w-4\" />\n                  Explanation:\n                </h3>\n                <div className=\"prose dark:prose-invert prose-sm max-w-none\" data-testid=\"text-explanation\">\n                  <MarkdownRenderer content={question.explanation} />\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* Metadata */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Question Metadata</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Status:</span>\n              <Badge variant={question.isPublished ? \"default\" : \"secondary\"}>\n                {question.isPublished ? \"Published\" : \"Draft\"}\n              </Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Created:</span>\n              <span className=\"text-foreground\">\n                {new Date(question.createdAt!).toLocaleDateString()}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Last Updated:</span>\n              <span className=\"text-foreground\">\n                {new Date(question.updatedAt!).toLocaleDateString()}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8890},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"server/redis.ts":{"content":"import Redis from 'ioredis';\n\n// Redis connection for caching and sessions\n// Use Upstash Redis or local Redis if REDIS_URL is set\nconst redisUrl = process.env.REDIS_URL;\n\n// Create Redis client only if REDIS_URL is provided\nlet redis: Redis | null = null;\nlet isRedisAvailable = false;\n\nif (redisUrl) {\n  redis = new Redis(redisUrl, {\n    maxRetriesPerRequest: 3,\n    retryStrategy(times) {\n      const delay = Math.min(times * 50, 2000);\n      return delay;\n    },\n    lazyConnect: true,\n  });\n\n  // Handle connection events\n  redis.on('connect', () => {\n    isRedisAvailable = true;\n    console.log('✅ Redis connected successfully');\n  });\n\n  redis.on('error', (err) => {\n    isRedisAvailable = false;\n    console.error('❌ Redis connection error:', err.message);\n  });\n  \n  // Connect to Redis\n  redis.connect().catch((err) => {\n    isRedisAvailable = false;\n    console.warn('⚠️ Redis not available, running without caching:', err.message);\n  });\n} else {\n  console.warn('⚠️ REDIS_URL not set, running without caching. Set REDIS_URL for production scalability.');\n}\n\n/**\n * Wait for Redis to be ready\n */\nexport async function waitForRedis(timeout: number = 5000): Promise<boolean> {\n  if (!redis) return false;\n  \n  const start = Date.now();\n  while (Date.now() - start < timeout) {\n    if (isRedisAvailable) return true;\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n  return false;\n}\n\nexport { redis, isRedisAvailable };\n\n// Cache helper functions with null safety\nexport const cache = {\n  /**\n   * Get cached data\n   */\n  async get<T>(key: string): Promise<T | null> {\n    if (!redis || !isRedisAvailable) return null;\n    try {\n      const data = await redis.get(key);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error(`Cache get error for key ${key}:`, error);\n      return null;\n    }\n  },\n\n  /**\n   * Set cached data with optional TTL (in seconds)\n   */\n  async set(key: string, value: any, ttl?: number): Promise<void> {\n    if (!redis || !isRedisAvailable) return;\n    try {\n      const serialized = JSON.stringify(value);\n      if (ttl) {\n        await redis.setex(key, ttl, serialized);\n      } else {\n        await redis.set(key, serialized);\n      }\n    } catch (error) {\n      console.error(`Cache set error for key ${key}:`, error);\n    }\n  },\n\n  /**\n   * Delete cached data\n   */\n  async del(key: string): Promise<void> {\n    if (!redis || !isRedisAvailable) return;\n    try {\n      await redis.del(key);\n    } catch (error) {\n      console.error(`Cache delete error for key ${key}:`, error);\n    }\n  },\n\n  /**\n   * Clear cache by pattern using SCAN (non-blocking)\n   */\n  async clearPattern(pattern: string): Promise<void> {\n    if (!redis || !isRedisAvailable) return;\n    try {\n      let cursor = '0';\n      do {\n        const [newCursor, keys] = await redis.scan(cursor, 'MATCH', pattern, 'COUNT', 100);\n        cursor = newCursor;\n        if (keys.length > 0) {\n          await redis.del(...keys);\n        }\n      } while (cursor !== '0');\n    } catch (error) {\n      console.error(`Cache clear pattern error for ${pattern}:`, error);\n    }\n  },\n\n  /**\n   * Increment counter (for upvotes, view counts, etc.)\n   */\n  async increment(key: string, amount: number = 1): Promise<number> {\n    if (!redis || !isRedisAvailable) return 0;\n    try {\n      return await redis.incrby(key, amount);\n    } catch (error) {\n      console.error(`Cache increment error for key ${key}:`, error);\n      return 0;\n    }\n  },\n\n  /**\n   * Set expiration time on a key (in seconds)\n   */\n  async expire(key: string, seconds: number): Promise<void> {\n    if (!redis || !isRedisAvailable) return;\n    try {\n      await redis.expire(key, seconds);\n    } catch (error) {\n      console.error(`Cache expire error for key ${key}:`, error);\n    }\n  },\n\n  /**\n   * Set key only if it doesn't exist (atomic operation)\n   * Returns true if key was set, false if it already existed\n   */\n  async setnx(key: string, value: any, ttl?: number): Promise<boolean> {\n    if (!redis || !isRedisAvailable) return false;\n    try {\n      const serialized = JSON.stringify(value);\n      let result: number;\n      if (ttl) {\n        // Use SET with NX and EX options\n        const response = await redis.set(key, serialized, 'EX', ttl, 'NX');\n        result = response === 'OK' ? 1 : 0;\n      } else {\n        result = await redis.setnx(key, serialized);\n      }\n      return result === 1;\n    } catch (error) {\n      console.error(`Cache setnx error for key ${key}:`, error);\n      return false;\n    }\n  },\n\n  /**\n   * Add to sorted set (for leaderboards, rankings)\n   */\n  async addToSortedSet(key: string, score: number, member: string): Promise<void> {\n    if (!redis || !isRedisAvailable) return;\n    try {\n      await redis.zadd(key, score, member);\n    } catch (error) {\n      console.error(`Sorted set add error for key ${key}:`, error);\n    }\n  },\n\n  /**\n   * Get leaderboard (top N members)\n   */\n  async getLeaderboard(key: string, limit: number = 10): Promise<Array<{member: string, score: number}>> {\n    if (!redis || !isRedisAvailable) return [];\n    try {\n      const results = await redis.zrevrange(key, 0, limit - 1, 'WITHSCORES');\n      const leaderboard = [];\n      for (let i = 0; i < results.length; i += 2) {\n        leaderboard.push({\n          member: results[i],\n          score: parseFloat(results[i + 1]),\n        });\n      }\n      return leaderboard;\n    } catch (error) {\n      console.error(`Leaderboard get error for key ${key}:`, error);\n      return [];\n    }\n  },\n\n  /**\n   * Get member rank in sorted set\n   */\n  async getRank(key: string, member: string): Promise<number | null> {\n    if (!redis || !isRedisAvailable) return null;\n    try {\n      const rank = await redis.zrevrank(key, member);\n      return rank !== null ? rank + 1 : null; // Convert to 1-based ranking\n    } catch (error) {\n      console.error(`Rank get error for key ${key}:`, error);\n      return null;\n    }\n  },\n};\n\nexport default redis;\n","size_bytes":5995},"design_guidelines.md":{"content":"# GATE And Tech Landing Page - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Reference-Based (SaaS/EdTech Hybrid)  \n**Primary References:** Linear (typography & polish), Notion (feature presentation), Duolingo (gamification elements)  \n**Aesthetic Direction:** Modern, professional educational platform with dark theme and vibrant green accents that convey growth and success\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode Primary:**\n- Background Base: 15 8% 11% (deep navy, #0f172a)\n- Surface Elevated: 217 33% 17% (lighter slate for cards)\n- Text Primary: 210 40% 98% (near white)\n- Text Secondary: 215 20% 65% (muted slate)\n\n**Brand Colors:**\n- Primary Green: 160 84% 39% (emerald #10b981)\n- Success Accent: 142 76% 36% (deeper green)\n- Gradient Overlay: Linear from emerald to teal (160 84% 39% → 172 66% 50%)\n\n**Supporting Colors:**\n- Warning/Timer: 38 92% 50% (amber for countdown)\n- Error State: 0 84% 60% (red for incorrect)\n- Subtle Borders: 217 20% 25% (dark slate borders)\n\n### B. Typography\n\n**Font Families:**\n- Primary: 'Inter' - all body text, navigation, buttons\n- Display: 'Plus Jakarta Sans' or 'Inter' with increased letter-spacing for headlines\n- Monospace: 'JetBrains Mono' for code snippets in quiz questions\n\n**Type Scale:**\n- Hero Headline: text-5xl md:text-6xl lg:text-7xl, font-bold, tracking-tight\n- Section Headers: text-3xl md:text-4xl, font-bold\n- Feature Titles: text-xl md:text-2xl, font-semibold\n- Body Text: text-base md:text-lg, leading-relaxed\n- Small Text: text-sm, for labels and captions\n- Buttons: text-base, font-medium, tracking-wide\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units of 4, 6, 8, 12, 16, 20, 24, 32  \n**Container Strategy:**\n- Max-width: max-w-7xl for content sections\n- Page padding: px-4 sm:px-6 lg:px-8\n- Section spacing: py-16 md:py-24 lg:py-32\n\n**Grid Patterns:**\n- Features: 3-column on desktop (grid-cols-1 md:grid-cols-3)\n- Pricing: 2-column centered (grid-cols-1 lg:grid-cols-2, max-w-5xl)\n- Stats: 3-column (grid-cols-3, gap-8)\n\n### D. Component Library\n\n**Navigation Bar:**\n- Fixed top, backdrop blur with semi-transparent dark background\n- Logo (left): 40px height with green accent mark\n- Nav items: text-sm, hover:text-green-400 transition\n- CTA button: Bright emerald with subtle glow effect (shadow-lg shadow-green-500/30)\n\n**Hero Section (80vh min-height):**\n- Left content (50%): Headline with green gradient text on \"focused confidence\"\n- Subheadline: text-xl, text-slate-400, max-w-2xl\n- Dual CTAs: Primary (solid green), Secondary (outline with blur backdrop)\n- Right content (50%): Dashboard mockup with subtle perspective tilt and shadow\n\n**YouTube Showcase:**\n- Two-column: Embedded video player (60%) | Stats sidebar (40%)\n- Stats: Large numbers (text-4xl, font-bold, green) with labels below\n- Feature list: Checkmark bullets with green accents\n- Subscribe button: Outline style with YouTube red hover state\n\n**Interactive Quiz Demo:**\n- Two-column layout: Question interface (55%) | Demo preview image (45%)\n- Timer: Circular progress indicator, amber color\n- Options: Radio button cards with hover lift effect (hover:-translate-y-1)\n- \"Live Demo\" badge: Small green pill in top-right\n\n**Feature Cards:**\n- Icon badge: 48x48, green background with white icon\n- Image: Rounded-xl with border, subtle glow on hover\n- Layout: Alternating left-right image placement per feature\n- Label tags: Small green badges (\"120+ Mock Tests\", \"AI-Powered Analytics\")\n\n**Testimonial Carousel:**\n- Card design: Dark slate background, rounded-2xl, border accent\n- Avatar: 56x56 circle with initials on green background\n- Metrics badge: \"+14 percentile\" in emerald pill\n- Navigation: Dots below, prev/next arrows on hover\n\n**Pricing Cards:**\n- Border: 1px solid slate-700, hover border-green-500 transition\n- \"Most Popular\" badge: Absolute positioned, -top-3, green background\n- Features: Checkmark list, text-sm, space-y-3\n- Trust badges: Small icons row at bottom (secure, money-back)\n\n**FAQ Accordion:**\n- Single column, max-w-3xl centered\n- Headers: Flex justify-between, chevron icon rotation on expand\n- Content: Slide-down animation, text-slate-400\n\n**Email Capture:**\n- Form: Inline flex layout, input + button combined\n- Checkbox: Custom green checkbox design\n- Trust indicators: 3-column grid of checkmark items below\n\n### E. Visual Effects & Interactions\n\n**Animations (Minimal, purposeful):**\n- Hero: Fade-in-up on load (0.6s ease)\n- Cards: Scale 1.02 on hover with shadow increase\n- Buttons: Brightness increase + shadow glow on hover\n- Accordion: Smooth height transition (300ms)\n\n**Shadows:**\n- Cards: shadow-xl with green tint (shadow-green-500/10)\n- Elevated elements: shadow-2xl for modals/popovers\n- Button primary: shadow-lg shadow-green-500/30\n\n**Borders & Dividers:**\n- Subtle: border-slate-700/50\n- Active/Focused: border-green-500\n- Section dividers: 1px border-t border-slate-800\n\n## Images\n\n**Hero Dashboard Mockup:**\n- Description: Modern analytics dashboard showing exam performance metrics, charts, and progress indicators\n- Placement: Right 50% of hero section, -rotate-1 perspective tilt\n- Treatment: Rounded-xl, shadow-2xl with green glow\n\n**Feature Section Images (3 total):**\n1. **Mock Test Interface:** Clean exam simulation UI with timer and question layout\n2. **Analytics Dashboard:** Colorful charts showing topic-wise performance and predictions\n3. **Community Interface:** Chat/discussion board with user avatars and activity\n\n- Placement: Alternating sides (right, left, right) of feature cards\n- Treatment: Rounded-lg, border border-slate-700, hover:scale-105 transition\n\n**Demo Interface Preview:**\n- Description: Side-by-side comparison showing question interface\n- Placement: Right side of interactive quiz section\n- Treatment: Rounded-xl with spotlight effect overlay\n\n## Responsive Behavior\n\n**Breakpoints:**\n- Mobile (< 768px): Single column, hero stacked, reduced padding\n- Tablet (768-1024px): 2-column grids, hero side-by-side\n- Desktop (> 1024px): Full 3-column layouts, spacious padding\n\n**Mobile Optimizations:**\n- Hero: Stack content above image, full-width CTAs\n- Stats: 2-column grid instead of 3\n- Pricing: Full-width cards with spacing\n- Navigation: Hamburger menu with slide-out drawer\n\n## Key Design Principles\n\n1. **Trust Through Professionalism:** Dark theme conveys sophistication, green accents inspire growth\n2. **Progressive Disclosure:** Content reveals value at each scroll, no filler sections\n3. **Social Proof Integration:** Stats, testimonials, and badges throughout to build credibility\n4. **Action-Oriented:** Multiple CTAs strategically placed (hero, features, pricing, footer)\n5. **Scannable Content:** Clear visual hierarchy with numbers, bullets, and spacing","size_bytes":6748},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { LogIn } from \"lucide-react\";\nimport { SiGoogle, SiGithub } from \"react-icons/si\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [show2FA, setShow2FA] = useState(false);\n  const [twoFAEmail, setTwoFAEmail] = useState(\"\");\n  const [twoFAToken, setTwoFAToken] = useState(\"\");\n\n  // 2FA verification mutation\n  const verify2FAMutation = useMutation({\n    mutationFn: async (data: { email: string; token: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/2fa/login\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in with 2FA.\",\n      });\n      setShow2FA(false);\n      setTwoFAToken(\"\");\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"2FA verification failed\",\n        description: error.message || \"Invalid verification code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const result = await login(email, password);\n      \n      // Check if 2FA is required\n      if (result.requires2FA && result.email) {\n        setTwoFAEmail(result.email);\n        setShow2FA(true);\n        toast({\n          title: \"2FA Required\",\n          description: \"Please enter your 6-digit verification code.\",\n        });\n      } else {\n        // Normal login without 2FA\n        toast({\n          title: \"Welcome back!\",\n          description: \"You have successfully logged in.\",\n        });\n        setLocation(\"/dashboard\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handle2FAVerify = () => {\n    if (twoFAToken.length === 6) {\n      verify2FAMutation.mutate({ email: twoFAEmail, token: twoFAToken });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-1\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <LogIn className=\"h-12 w-12 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl text-center\">Welcome back</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your credentials to access your account\n            </CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your.email@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Link href=\"/forgot-password\">\n                    <span className=\"text-sm text-primary hover:underline cursor-pointer\" data-testid=\"link-forgot-password\">\n                      Forgot password?\n                    </span>\n                  </Link>\n                </div>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Logging in...\" : \"Login\"}\n              </Button>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <Separator className=\"w-full\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    Or continue with\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => window.location.href = '/api/auth/google'}\n                  data-testid=\"button-google-login\"\n                >\n                  <SiGoogle className=\"mr-2 h-4 w-4\" />\n                  Google\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => window.location.href = '/api/auth/github'}\n                  data-testid=\"button-github-login\"\n                >\n                  <SiGithub className=\"mr-2 h-4 w-4\" />\n                  GitHub\n                </Button>\n              </div>\n\n              <div className=\"text-sm text-center text-muted-foreground\">\n                Don't have an account?{\" \"}\n                <Link href=\"/register\" data-testid=\"link-register\">\n                  <span className=\"text-primary hover:underline cursor-pointer\">\n                    Register here\n                  </span>\n                </Link>\n              </div>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n\n      {/* 2FA Verification Dialog */}\n      <Dialog open={show2FA} onOpenChange={setShow2FA}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Two-Factor Authentication</DialogTitle>\n            <DialogDescription>\n              Enter the 6-digit code from your authenticator app\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-center\">\n              <InputOTP\n                maxLength={6}\n                value={twoFAToken}\n                onChange={setTwoFAToken}\n                data-testid=\"input-2fa-login\"\n              >\n                <InputOTPGroup>\n                  <InputOTPSlot index={0} />\n                  <InputOTPSlot index={1} />\n                  <InputOTPSlot index={2} />\n                  <InputOTPSlot index={3} />\n                  <InputOTPSlot index={4} />\n                  <InputOTPSlot index={5} />\n                </InputOTPGroup>\n              </InputOTP>\n            </div>\n            <Button\n              onClick={handle2FAVerify}\n              disabled={twoFAToken.length !== 6 || verify2FAMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-verify-2fa-login\"\n            >\n              {verify2FAMutation.isPending ? \"Verifying...\" : \"Verify\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8643},"server/queue.ts":{"content":"import { Queue, Worker, QueueEvents } from 'bullmq';\nimport { redis, isRedisAvailable, waitForRedis } from './redis';\n\n// Job queue for background processing (only if Redis is available)\nconst redisUrl = process.env.REDIS_URL;\nlet connection: any = undefined;\n\nif (redisUrl) {\n  const url = new URL(redisUrl);\n  connection = {\n    host: url.hostname,\n    port: parseInt(url.port || '6379'),\n    password: url.password || undefined,\n    // Support TLS for rediss:// URLs\n    tls: url.protocol === 'rediss:' ? {} : undefined,\n  };\n}\n\n// Define job types\nexport type TestScoringJob = {\n  attemptId: string;\n  userId: string;\n  testId: string;\n};\n\nexport type ReportGenerationJob = {\n  attemptId: string;\n  userId: string;\n  format: 'pdf' | 'csv';\n};\n\nexport type AnalyticsUpdateJob = {\n  userId: string;\n  testId: string;\n};\n\nexport type InvoiceGenerationJob = {\n  purchaseId: string;\n  userId: string;\n};\n\n// Create queues (only if Redis is available)\n// NOTE: Worker implementations will be added in task 5 to actually process these jobs\nexport const testScoringQueue = connection ? new Queue<TestScoringJob>('test-scoring', { connection }) : null;\nexport const reportQueue = connection ? new Queue<ReportGenerationJob>('report-generation', { connection }) : null;\nexport const analyticsQueue = connection ? new Queue<AnalyticsUpdateJob>('analytics-update', { connection }) : null;\nexport const invoiceQueue = connection ? new Queue<InvoiceGenerationJob>('invoice-generation', { connection }) : null;\n\n/**\n * Check if queues are ready to use\n */\nexport async function areQueuesReady(): Promise<boolean> {\n  if (!connection) return false;\n  return await waitForRedis();\n}\n\n// Queue helper functions with null safety\nexport const queueHelpers = {\n  /**\n   * Add test scoring job to queue\n   */\n  async scoreTest(attemptId: string, userId: string, testId: string) {\n    if (!testScoringQueue || !(await areQueuesReady())) {\n      console.warn('⚠️ Queue not available, processing will happen synchronously');\n      return;\n    }\n    try {\n      await testScoringQueue.add(\n        'score',\n        { attemptId, userId, testId },\n        {\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000,\n          },\n        }\n      );\n      console.log(`✅ Test scoring job queued for attempt ${attemptId}`);\n    } catch (error) {\n      console.error('Failed to queue test scoring job, will process synchronously:', error);\n      // Don't throw - degrade gracefully to synchronous processing\n    }\n  },\n\n  /**\n   * Add report generation job to queue\n   */\n  async generateReport(attemptId: string, userId: string, format: 'pdf' | 'csv' = 'pdf') {\n    if (!reportQueue || !(await areQueuesReady())) {\n      console.warn('⚠️ Queue not available, report generation will be handled on-demand');\n      return;\n    }\n    try {\n      await reportQueue.add(\n        'generate',\n        { attemptId, userId, format },\n        {\n          attempts: 2,\n          delay: 1000,\n        }\n      );\n      console.log(`✅ Report generation job queued for attempt ${attemptId}`);\n    } catch (error) {\n      console.error('Failed to queue report generation job, will handle on-demand:', error);\n      // Don't throw - degrade gracefully to on-demand generation\n    }\n  },\n\n  /**\n   * Add analytics update job to queue\n   */\n  async updateAnalytics(userId: string, testId: string) {\n    if (!analyticsQueue || !(await areQueuesReady())) {\n      console.warn('⚠️ Queue not available, analytics will be computed on-demand');\n      return;\n    }\n    try {\n      await analyticsQueue.add(\n        'update',\n        { userId, testId },\n        {\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 1000,\n          },\n        }\n      );\n      console.log(`✅ Analytics update job queued for user ${userId}`);\n    } catch (error) {\n      console.error('Failed to queue analytics update job, will compute on-demand:', error);\n      // Don't throw - degrade gracefully to on-demand analytics\n    }\n  },\n\n  /**\n   * Add invoice generation job to queue\n   */\n  async generateInvoice(purchaseId: string, userId: string) {\n    if (!invoiceQueue || !(await areQueuesReady())) {\n      console.warn('⚠️ Queue not available, invoice will be generated on-demand');\n      return;\n    }\n    try {\n      await invoiceQueue.add(\n        'generate',\n        { purchaseId, userId },\n        {\n          attempts: 3,\n          delay: 500,\n        }\n      );\n      console.log(`✅ Invoice generation job queued for purchase ${purchaseId}`);\n    } catch (error) {\n      console.error('Failed to queue invoice generation job, will generate on-demand:', error);\n      // Don't throw - degrade gracefully to on-demand invoice generation\n    }\n  },\n\n  /**\n   * Get job status\n   */\n  async getJobStatus(queue: Queue | null, jobId: string) {\n    if (!queue) return null;\n    try {\n      const job = await queue.getJob(jobId);\n      if (!job) return null;\n\n      const state = await job.getState();\n      return {\n        id: job.id,\n        state,\n        progress: job.progress,\n        data: job.data,\n        returnValue: job.returnvalue,\n        failedReason: job.failedReason,\n      };\n    } catch (error) {\n      console.error('Failed to get job status:', error);\n      return null;\n    }\n  },\n\n  /**\n   * Clear completed jobs (run periodically)\n   */\n  async clearCompleted(queue: Queue | null, olderThan: number = 3600000) {\n    if (!queue) return;\n    try {\n      await queue.clean(olderThan, 100, 'completed');\n      console.log(`✅ Cleared completed jobs older than ${olderThan}ms`);\n    } catch (error) {\n      console.error('Failed to clear completed jobs:', error);\n    }\n  },\n};\n\n// Queue events for monitoring (only if connection is available)\nlet testScoringEvents: QueueEvents | null = null;\nif (connection) {\n  testScoringEvents = new QueueEvents('test-scoring', { connection });\n  testScoringEvents.on('completed', ({ jobId }) => {\n    console.log(`✅ Test scoring job ${jobId} completed`);\n  });\n\n  testScoringEvents.on('failed', ({ jobId, failedReason }) => {\n    console.error(`❌ Test scoring job ${jobId} failed:`, failedReason);\n  });\n}\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  if (testScoringQueue) await testScoringQueue.close();\n  if (reportQueue) await reportQueue.close();\n  if (analyticsQueue) await analyticsQueue.close();\n  if (invoiceQueue) await invoiceQueue.close();\n  console.log('Job queues closed');\n});\n\nexport default {\n  testScoringQueue,\n  reportQueue,\n  analyticsQueue,\n  invoiceQueue,\n  queueHelpers,\n};\n","size_bytes":6619},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Log database connection info (without exposing credentials)\nconst dbUrl = new URL(process.env.DATABASE_URL);\nconsole.log(`📦 Connecting to database at ${dbUrl.hostname}...`);\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  // Add connection timeout and retry settings\n  connectionTimeoutMillis: 10000,\n});\n\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":750},"client/src/pages/ForgotPassword.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { KeyRound, ArrowLeft } from \"lucide-react\";\nimport Footer from \"@/components/Footer\";\n\nexport default function ForgotPassword() {\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/forgot-password\", { email });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Email Sent\",\n        description: data.message,\n      });\n      setEmail(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send reset email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email) {\n      forgotPasswordMutation.mutate(email);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-1\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <KeyRound className=\"h-12 w-12 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl text-center\">Forgot Password?</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your email address and we'll send you a link to reset your password.\n            </CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your.email@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-forgot-password-email\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={forgotPasswordMutation.isPending}\n                data-testid=\"button-send-reset-link\"\n              >\n                {forgotPasswordMutation.isPending ? \"Sending...\" : \"Send Reset Link\"}\n              </Button>\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" className=\"w-full gap-2\" data-testid=\"link-back-to-login\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Login\n                </Button>\n              </Link>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3369},"server/workers/analytics.worker.ts":{"content":"import { Worker, Job } from 'bullmq';\nimport { storage } from '../storage/index.js';\nimport { cache } from '../redis.js';\nimport type { AnalyticsUpdateJob } from '../queue.js';\n\n// Redis connection from environment\nconst redisUrl = process.env.REDIS_URL;\nlet connection: any = undefined;\n\nif (redisUrl) {\n  const url = new URL(redisUrl);\n  connection = {\n    host: url.hostname,\n    port: parseInt(url.port || '6379'),\n    password: url.password || undefined,\n    tls: url.protocol === 'rediss:' ? {} : undefined,\n  };\n}\n\n/**\n * Calculate percentile for a user's score\n */\nasync function calculatePercentile(testId: string, score: number): Promise<number> {\n  // Get all submitted attempts for this test\n  const allAttempts = await storage.getTestAttemptsByTestId(testId, 'submitted');\n  \n  if (allAttempts.length === 0) return 0;\n  \n  // Count how many attempts scored less than this score\n  const scoresBelow = allAttempts.filter(a => (a.score || 0) < score).length;\n  \n  // Calculate percentile\n  const percentile = Math.round((scoresBelow / allAttempts.length) * 100);\n  \n  return percentile;\n}\n\n/**\n * Update cached analytics for a test\n */\nasync function updateTestAnalyticsCache(testId: string): Promise<void> {\n  const allAttempts = await storage.getTestAttemptsByTestId(testId, 'submitted');\n  \n  if (allAttempts.length === 0) return;\n  \n  // Calculate aggregate stats\n  const scores = allAttempts.map(a => a.score || 0);\n  const avgScore = scores.reduce((a, b) => a + b, 0) / scores.length;\n  const maxScore = Math.max(...scores);\n  const minScore = Math.min(...scores);\n  \n  // Cache test analytics\n  await cache.set(`analytics:test:${testId}`, {\n    totalAttempts: allAttempts.length,\n    avgScore,\n    maxScore,\n    minScore,\n    updatedAt: new Date().toISOString(),\n  }, 300); // Cache for 5 minutes\n  \n  console.log(`✅ Updated analytics cache for test ${testId}`);\n}\n\n/**\n * Analytics worker\n * Updates percentiles and aggregates analytics\n */\nlet analyticsWorker: Worker | null = null;\n\nif (connection) {\n  analyticsWorker = new Worker<AnalyticsUpdateJob>(\n    'analytics-update',\n    async (job: Job<AnalyticsUpdateJob>) => {\n      const { userId, testId } = job.data;\n      \n      console.log(`🔄 Updating analytics for user ${userId}, test ${testId}`);\n      \n      try {\n        // Get all user's attempts for this test, then filter for submitted ones\n        const allUserAttempts = await storage.getUserTestAttempts(userId, 100);\n        const userAttempts = allUserAttempts.filter(a => \n          a.testId === testId && a.status === 'submitted'\n        );\n        \n        if (userAttempts.length === 0) {\n          console.warn(`No submitted attempts found for user ${userId}, test ${testId}`);\n          return;\n        }\n        \n        const latestAttempt = userAttempts.sort((a, b) => \n          new Date(b.submittedAt || 0).getTime() - new Date(a.submittedAt || 0).getTime()\n        )[0];\n        \n        // Calculate percentile\n        const percentile = await calculatePercentile(testId, latestAttempt.score || 0);\n        \n        // Update attempt with percentile\n        await storage.updateTestAttempt(latestAttempt.id, {\n          percentile,\n        });\n        \n        // Update test-level analytics cache\n        await updateTestAnalyticsCache(testId);\n        \n        // Cache user's percentile\n        await cache.set(\n          `percentile:${userId}:${testId}`,\n          percentile,\n          300 // 5 minutes\n        );\n        \n        console.log(`✅ Analytics updated: ${percentile}th percentile for user ${userId}`);\n        \n        return { percentile, userId, testId };\n      } catch (error) {\n        console.error(`❌ Analytics update failed for user ${userId}:`, error);\n        throw error;\n      }\n    },\n    {\n      connection,\n      concurrency: 5,\n      limiter: {\n        max: 50,\n        duration: 1000,\n      },\n    }\n  );\n\n  // Event handlers\n  analyticsWorker.on('completed', (job) => {\n    console.log(`✅ Analytics worker completed job ${job.id}`);\n  });\n\n  analyticsWorker.on('failed', (job, err) => {\n    console.error(`❌ Analytics worker failed job ${job?.id}:`, err.message);\n  });\n\n  analyticsWorker.on('error', (err) => {\n    console.error('❌ Analytics worker error:', err);\n  });\n\n  console.log('✅ Analytics worker initialized');\n} else {\n  console.warn('⚠️ Analytics worker not initialized - Redis not available');\n}\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  if (analyticsWorker) {\n    await analyticsWorker.close();\n    console.log('Analytics worker closed');\n  }\n});\n\nexport { analyticsWorker };\n","size_bytes":4611},"client/src/components/examples/Navbar.tsx":{"content":"import Navbar from '../Navbar';\n\nexport default function NavbarExample() {\n  return <Navbar />;\n}\n","size_bytes":98},"client/src/pages/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { BarChart3, TrendingUp, Target, Clock, Award, Activity } from \"lucide-react\";\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { format } from \"date-fns\";\n\ninterface PerformanceStats {\n  totalTests: number;\n  averageScore: number;\n  averagePercentage: number;\n  totalQuestions: number;\n  correctAnswers: number;\n  incorrectAnswers: number;\n  unanswered: number;\n  averageTimeTaken: number;\n  accuracy: number;\n}\n\ninterface TopicPerformance {\n  topicId: string;\n  topicName: string;\n  totalQuestions: number;\n  correctAnswers: number;\n  incorrectAnswers: number;\n  accuracy: number;\n}\n\ninterface DifficultyPerformance {\n  difficulty: string;\n  totalQuestions: number;\n  correctAnswers: number;\n  incorrectAnswers: number;\n  accuracy: number;\n}\n\ninterface PerformanceTrend {\n  attemptId: string;\n  testTitle: string;\n  score: number;\n  maxScore: number;\n  percentage: number;\n  submittedAt: string;\n}\n\nconst COLORS = {\n  easy: \"hsl(var(--chart-1))\",\n  medium: \"hsl(var(--chart-2))\",\n  hard: \"hsl(var(--chart-3))\",\n  correct: \"hsl(var(--chart-4))\",\n  incorrect: \"hsl(var(--chart-5))\",\n};\n\nexport default function Analytics() {\n  const { data: stats, isLoading: statsLoading } = useQuery<PerformanceStats>({\n    queryKey: [\"/api/analytics/performance\"],\n  });\n\n  const { data: topicPerformance, isLoading: topicLoading } = useQuery<TopicPerformance[]>({\n    queryKey: [\"/api/analytics/topics\"],\n  });\n\n  const { data: difficultyPerformance, isLoading: difficultyLoading } = useQuery<DifficultyPerformance[]>({\n    queryKey: [\"/api/analytics/difficulty\"],\n  });\n\n  const { data: trend, isLoading: trendLoading } = useQuery<PerformanceTrend[]>({\n    queryKey: [\"/api/analytics/trend\"],\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <Skeleton className=\"h-10 w-48\" />\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>No Data Available</CardTitle>\n            <CardDescription>Take some tests to see your analytics</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  const responseDistribution = [\n    { name: \"Correct\", value: stats.correctAnswers, fill: COLORS.correct },\n    { name: \"Incorrect\", value: stats.incorrectAnswers, fill: COLORS.incorrect },\n    { name: \"Unanswered\", value: stats.unanswered, fill: \"hsl(var(--muted))\" },\n  ];\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\" data-testid=\"page-analytics\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-analytics-title\">Analytics Dashboard</h1>\n          <p className=\"text-muted-foreground\">Track your performance and progress</p>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card data-testid=\"card-total-tests\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tests</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-tests\">{stats.totalTests}</div>\n            <p className=\"text-xs text-muted-foreground\">{stats.totalQuestions} questions attempted</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-average-score\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Score</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-average-score\">{stats.averageScore}</div>\n            <p className=\"text-xs text-muted-foreground\">{stats.averagePercentage}% average</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-accuracy\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Accuracy</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-accuracy\">{stats.accuracy}%</div>\n            <p className=\"text-xs text-muted-foreground\">{stats.correctAnswers} correct answers</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-avg-time\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg. Time/Test</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-avg-time\">\n              {Math.floor(stats.averageTimeTaken / 60)}m\n            </div>\n            <p className=\"text-xs text-muted-foreground\">{stats.averageTimeTaken}s total</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Performance Trend */}\n        <Card data-testid=\"card-performance-trend\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Performance Trend\n            </CardTitle>\n            <CardDescription>Your score progression over time</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {trendLoading ? (\n              <Skeleton className=\"h-64 w-full\" />\n            ) : trend && trend.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={trend}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"submittedAt\" \n                    tickFormatter={(value) => format(new Date(value), 'MMM dd')}\n                  />\n                  <YAxis />\n                  <Tooltip \n                    labelFormatter={(value) => format(new Date(value), 'PPP')}\n                    formatter={(value: number) => [`${value}%`, 'Score']}\n                  />\n                  <Legend />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"percentage\" \n                    stroke=\"hsl(var(--primary))\" \n                    strokeWidth={2}\n                    name=\"Score %\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"flex h-64 items-center justify-center text-muted-foreground\">\n                No test history available\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Response Distribution */}\n        <Card data-testid=\"card-response-distribution\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Response Distribution\n            </CardTitle>\n            <CardDescription>Breakdown of your answers</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={responseDistribution}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {responseDistribution.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Topic-wise Performance */}\n      <Card data-testid=\"card-topic-performance\">\n        <CardHeader>\n          <CardTitle>Topic-wise Performance</CardTitle>\n          <CardDescription>Your accuracy across different topics</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {topicLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : topicPerformance && topicPerformance.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={topicPerformance}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"topicName\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"accuracy\" fill=\"hsl(var(--primary))\" name=\"Accuracy %\" />\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"flex h-64 items-center justify-center text-muted-foreground\">\n              No topic data available\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Difficulty-wise Performance */}\n      <Card data-testid=\"card-difficulty-performance\">\n        <CardHeader>\n          <CardTitle>Difficulty-wise Performance</CardTitle>\n          <CardDescription>How you perform at different difficulty levels</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {difficultyLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : difficultyPerformance && difficultyPerformance.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={difficultyPerformance}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"difficulty\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"correctAnswers\" fill={COLORS.correct} name=\"Correct\" />\n                <Bar dataKey=\"incorrectAnswers\" fill={COLORS.incorrect} name=\"Incorrect\" />\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"flex h-64 items-center justify-center text-muted-foreground\">\n              No difficulty data available\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Weak Areas */}\n      {topicPerformance && topicPerformance.length > 0 && (\n        <Card data-testid=\"card-weak-areas\">\n          <CardHeader>\n            <CardTitle>Areas for Improvement</CardTitle>\n            <CardDescription>Topics where you need more practice</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {topicPerformance\n                .sort((a, b) => a.accuracy - b.accuracy)\n                .slice(0, 5)\n                .map((topic) => (\n                  <div key={topic.topicId} className=\"flex items-center justify-between\" data-testid={`weak-area-${topic.topicId}`}>\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm font-medium leading-none\">{topic.topicName}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {topic.correctAnswers}/{topic.totalQuestions} correct\n                      </p>\n                    </div>\n                    <div className=\"ml-auto font-medium\">\n                      <span className={topic.accuracy < 50 ? \"text-destructive\" : \"text-muted-foreground\"}>\n                        {topic.accuracy}%\n                      </span>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":12515},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/routes/question.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { can } from \"../middleware/permissions\";\nimport { insertQuestionSchema, updateQuestionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport function questionRoutes(app: Express): void {\n  // ============================================================================\n  // QUESTION ROUTES (Admin/Moderator Only)\n  // ============================================================================\n\n  // Get questions with filters (requires read:Question permission)\n  app.get(\"/api/questions\", can('read', 'Question'), async (req: Request, res: Response) => {\n    try {\n      const filters = {\n        topicId: req.query.topicId as string,\n        difficulty: req.query.difficulty as string,\n        type: req.query.type as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : undefined,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : undefined,\n      };\n      const questions = await storage.getQuestions(filters);\n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching questions:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get single question (requires read:Question permission)\n  app.get(\"/api/questions/:id\", can('read', 'Question'), async (req: Request, res: Response) => {\n    try {\n      const question = await storage.getQuestion(req.params.id);\n      if (!question) {\n        return res.status(404).json({ error: \"Question not found\" });\n      }\n      \n      // Get associated topics\n      const topics = await storage.getQuestionTopics(req.params.id);\n      \n      res.json({ ...question, topics });\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create question (requires create:Question permission)\n  app.post(\"/api/questions\", can('create', 'Question'), async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const { topicId, ...questionData } = req.body;\n      \n      const validatedData = insertQuestionSchema.parse({\n        ...questionData,\n        createdBy: currentUser.id,\n      });\n      \n      const question = await storage.createQuestion(validatedData);\n      \n      // Associate with topic if provided\n      if (topicId) {\n        await storage.addQuestionTopic(question.id, topicId);\n      }\n      \n      res.status(201).json(question);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating question:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update question (requires update:Question permission)\n  app.patch(\"/api/questions/:id\", can('update', 'Question'), async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      const { topicId, ...questionData } = req.body;\n      \n      // Fetch existing question to check if it exists\n      const existingQuestion = await storage.getQuestion(req.params.id);\n      if (!existingQuestion) {\n        return res.status(404).json({ error: \"Question not found\" });\n      }\n      \n      // Validate update data - only allow safe fields to be modified\n      const validatedData = updateQuestionSchema.parse(questionData);\n      \n      // Update question fields\n      const question = await storage.updateQuestion(req.params.id, validatedData);\n      if (!question) {\n        return res.status(404).json({ error: \"Question not found\" });\n      }\n      \n      // Update topic association if topicId is provided\n      if (topicId) {\n        // Remove existing topics and add new one\n        const existingTopics = await storage.getQuestionTopics(req.params.id);\n        for (const topic of existingTopics) {\n          await storage.removeQuestionTopic(req.params.id, topic.id);\n        }\n        await storage.addQuestionTopic(req.params.id, topicId);\n      }\n      \n      res.json(question);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error updating question:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Delete question (requires delete:Question permission)\n  app.delete(\"/api/questions/:id\", can('delete', 'Question'), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteQuestion(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting question:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}\n","size_bytes":4833},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/test/TestInstructions.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Loader2, User } from \"lucide-react\";\nimport type { Test, Question } from \"@shared/schema\";\n\ninterface TestInstructionsProps {\n  test: Test;\n  questions: Question[];\n  onBegin: () => void;\n  isStarting: boolean;\n}\n\nexport default function TestInstructions({ test, questions, onBegin, isStarting }: TestInstructionsProps) {\n  return (\n    <div className=\"min-h-screen bg-slate-100 dark:bg-slate-900\">\n      {/* Header */}\n      <div className=\"bg-blue-600 text-white py-3 px-6\">\n        <h1 className=\"text-xl font-semibold\" data-testid=\"text-test-title\">{test.title}</h1>\n      </div>\n\n      <div className=\"container mx-auto py-8 px-4 max-w-6xl\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Instructions */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-bold mb-4 text-blue-700 dark:text-blue-400\">Instructions</h2>\n              <div className=\"space-y-4 text-sm\">\n                <div>\n                  <h3 className=\"font-semibold mb-2\">General Instructions:</h3>\n                  <ol className=\"list-decimal list-inside space-y-2 text-muted-foreground\">\n                    <li>Total duration of examination is <strong>{test.duration} minutes</strong>.</li>\n                    <li>The clock will be set at the server. The countdown timer in the top right corner will display the remaining time available for you to complete the examination.</li>\n                    <li>The Question Palette displayed on the right side of screen will show the status of each question using symbols.</li>\n                    <li>You have <strong>not visited</strong> the question yet (Gray).</li>\n                    <li>You have <strong>not answered</strong> the question (Red).</li>\n                    <li>You have <strong>answered</strong> the question (Green).</li>\n                    <li>You have <strong>NOT answered</strong> the question, but have <strong>marked the question for review</strong> (Purple).</li>\n                    <li>You have <strong>answered</strong> the question, but <strong>marked it for review</strong> (Purple).</li>\n                  </ol>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Navigating to a Question:</h3>\n                  <ol className=\"list-decimal list-inside space-y-2 text-muted-foreground\" start={9}>\n                    <li>To answer a question, do the following:\n                      <ul className=\"list-disc list-inside ml-4 mt-1\">\n                        <li>Click on the question number in the Question Palette to go to that question directly.</li>\n                        <li>Select an answer for a multiple choice type question. Use the virtual numeric keypad to enter a number as answer for a numerical type question.</li>\n                        <li>Click on <strong>Save & Next</strong> to save your answer for the current question and then go to the next question.</li>\n                        <li>Click on <strong>Mark for Review & Next</strong> to save your answer for the current question, mark it for review, and then go to the next question.</li>\n                      </ul>\n                    </li>\n                  </ol>\n                </div>\n\n                <Separator />\n\n                <div className=\"bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 p-4 rounded\">\n                  <p className=\"text-xs text-amber-900 dark:text-amber-100\">\n                    I have read and understood the instructions. All computer hardware allotted to me are in proper working condition. \n                    I declare that I am not in possession of / not wearing / not carrying any prohibited gadget like mobile phone, bluetooth devices etc.\n                    I agree that in case of not adhering to the instructions, I shall be liable to be debarred from this Test and/or to disciplinary action, which may include ban from future Tests / Examinations.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"mt-6 flex justify-center\">\n                <Button \n                  onClick={onBegin}\n                  disabled={isStarting}\n                  size=\"lg\"\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                  data-testid=\"button-start-test\"\n                >\n                  {isStarting ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Starting...\n                    </>\n                  ) : (\n                    \"I am ready to begin\"\n                  )}\n                </Button>\n              </div>\n            </Card>\n          </div>\n\n          {/* User Info */}\n          <div className=\"space-y-4\">\n            <Card className=\"p-4 text-center\">\n              <div className=\"w-20 h-20 rounded-full bg-blue-100 dark:bg-blue-900 mx-auto mb-3 flex items-center justify-center\">\n                <User className=\"h-10 w-10 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <h3 className=\"font-semibold\">Candidate</h3>\n              <p className=\"text-sm text-muted-foreground\">Test Taker</p>\n            </Card>\n\n            <Card className=\"p-4\">\n              <h3 className=\"font-semibold mb-3\">Test Information</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Duration:</span>\n                  <span className=\"font-medium\">{test.duration} minutes</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Marks:</span>\n                  <span className=\"font-medium\">{test.totalMarks}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Questions:</span>\n                  <span className=\"font-medium\">{questions.length}</span>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6378},"client/src/pages/examples/LandingPage.tsx":{"content":"import LandingPage from '../LandingPage';\n\nexport default function LandingPageExample() {\n  return <LandingPage />;\n}\n","size_bytes":118},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as GitHubStrategy } from \"passport-github2\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\nimport type { Express } from \"express\";\n\n// Configure Passport Local Strategy\npassport.use(\n  new LocalStrategy(\n    {\n      usernameField: \"email\",\n      passwordField: \"password\",\n    },\n    async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        \n        if (!user) {\n          return done(null, false, { message: \"Invalid email or password\" });\n        }\n\n        if (!user.passwordHash) {\n          return done(null, false, { message: \"Please use social login\" });\n        }\n\n        const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n        \n        if (!isValidPassword) {\n          return done(null, false, { message: \"Invalid email or password\" });\n        }\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  )\n);\n\n// Configure Google OAuth Strategy\nif (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n  passport.use(\n    new GoogleStrategy(\n      {\n        clientID: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        callbackURL: \"/api/auth/google/callback\",\n      },\n      async (accessToken, refreshToken, profile, done) => {\n        try {\n          const email = profile.emails?.[0]?.value;\n          const avatar = profile.photos?.[0]?.value;\n          \n          if (!email) {\n            return done(new Error(\"No email from Google\"), undefined);\n          }\n\n          const user = await storage.upsertOAuthUser({\n            email,\n            name: profile.displayName || email.split('@')[0],\n            authProvider: \"google\",\n            providerId: profile.id,\n            avatar,\n          });\n\n          return done(null, user);\n        } catch (error) {\n          return done(error as Error, undefined);\n        }\n      }\n    )\n  );\n}\n\n// Configure GitHub OAuth Strategy\nif (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {\n  passport.use(\n    new GitHubStrategy(\n      {\n        clientID: process.env.GITHUB_CLIENT_ID,\n        clientSecret: process.env.GITHUB_CLIENT_SECRET,\n        callbackURL: \"/api/auth/github/callback\",\n        scope: ['user:email'],\n      },\n      async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n        try {\n          const email = profile.emails?.[0]?.value;\n          const avatar = profile.photos?.[0]?.value;\n          \n          if (!email) {\n            return done(new Error(\"No email from GitHub\"), undefined);\n          }\n\n          const user = await storage.upsertOAuthUser({\n            email,\n            name: profile.displayName || profile.username || email.split('@')[0],\n            authProvider: \"github\",\n            providerId: profile.id,\n            avatar,\n          });\n\n          return done(null, user);\n        } catch (error) {\n          return done(error as Error, undefined);\n        }\n      }\n    )\n  );\n}\n\n// Serialize user to session\npassport.serializeUser((user: Express.User, done) => {\n  done(null, (user as User).id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    if (user) {\n      done(null, user);\n    } else {\n      done(null, false);\n    }\n  } catch (error) {\n    done(error);\n  }\n});\n\nexport { passport };\n\n// Middleware to check if user is authenticated\nexport function requireAuth(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ error: \"Authentication required\" });\n}\n\n// Middleware to check if user has specific role\nexport function requireRole(...roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    const user = req.user as User;\n    if (!roles.includes(user.role)) {\n      return res.status(403).json({ error: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n}\n","size_bytes":4349},"client/src/components/FAQSection.tsx":{"content":"import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\n\nexport default function FAQSection() {\n  const faqs = [\n    {\n      question: \"How close are your mocks to the actual exam?\",\n      answer: \"Our mock tests are designed to closely mirror the actual GATE exam interface, difficulty level, and question patterns. They are created by experts who have analyzed years of GATE papers to ensure maximum authenticity.\",\n    },\n    {\n      question: \"Is the free plan really free forever?\",\n      answer: \"Yes! The free plan gives you lifetime access to 30 sample tests, basic analytics, and community features. There are no time limits or hidden charges.\",\n    },\n    {\n      question: \"Can I reset a test and try again?\",\n      answer: \"Absolutely! You can reset and retake any mock test as many times as you want. This helps you practice until you're completely comfortable with the material.\",\n    },\n    {\n      question: \"What happens to my progress if I upgrade?\",\n      answer: \"All your progress, test history, and analytics are preserved when you upgrade. You'll continue right where you left off with access to additional premium features.\",\n    },\n    {\n      question: \"Do you offer doubt-solving sessions?\",\n      answer: \"Yes! Pro members get priority access to our doubt-solving sessions where mentors who have cleared GATE help clarify concepts and solve tricky questions.\",\n    },\n    {\n      question: \"How does the refund work?\",\n      answer: \"We offer a 7-day money-back guarantee. If you're not satisfied with the Pro plan for any reason within the first 7 days, contact us for a full refund—no questions asked.\",\n    },\n  ];\n\n  return (\n    <section className=\"py-16 md:py-24\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Frequently Asked Questions\n          </h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Everything you need to know about getting started\n          </p>\n        </div>\n\n        <div className=\"max-w-3xl mx-auto\">\n          <Accordion type=\"single\" collapsible className=\"space-y-4\">\n            {faqs.map((faq, index) => (\n              <AccordionItem\n                key={index}\n                value={`item-${index}`}\n                className=\"border border-border rounded-lg px-6 hover-elevate\"\n              >\n                <AccordionTrigger className=\"text-left hover:no-underline\">\n                  <span className=\"font-semibold\">{faq.question}</span>\n                </AccordionTrigger>\n                <AccordionContent className=\"text-muted-foreground\">\n                  {faq.answer}\n                </AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2920},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/ViewAsRoleContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { useAuth } from \"./AuthContext\";\n\ninterface ViewAsRoleContextType {\n  viewAsRole: string;\n  setViewAsRole: (role: string) => void;\n  effectiveRole: string; // The role to use for access control\n}\n\nconst ViewAsRoleContext = createContext<ViewAsRoleContextType | undefined>(undefined);\n\nexport function ViewAsRoleProvider({ children }: { children: ReactNode }) {\n  const { user } = useAuth();\n  const [viewAsRole, setViewAsRole] = useState<string>(user?.role || \"student\");\n\n  // Update viewAsRole when user changes\n  useEffect(() => {\n    if (user) {\n      setViewAsRole(user.role);\n    }\n  }, [user]);\n\n  // Effective role logic:\n  // - Admin can view as: admin, moderator, student\n  // - Moderator can view as: moderator, student\n  // - Student can only view as: student\n  const effectiveRole = \n    user?.role === \"admin\" ? viewAsRole : \n    user?.role === \"moderator\" ? viewAsRole :\n    (user?.role || \"student\");\n\n  return (\n    <ViewAsRoleContext.Provider value={{ viewAsRole, setViewAsRole, effectiveRole }}>\n      {children}\n    </ViewAsRoleContext.Provider>\n  );\n}\n\nexport function useViewAsRole() {\n  const context = useContext(ViewAsRoleContext);\n  if (context === undefined) {\n    throw new Error(\"useViewAsRole must be used within a ViewAsRoleProvider\");\n  }\n  return context;\n}\n","size_bytes":1382},"server/routes/payment.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport Razorpay from \"razorpay\";\nimport crypto from \"crypto\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth\";\nimport { verifyPaymentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiLimiter } from \"../middleware/rate-limit.js\";\n\nconst isPaymentEnabled = Boolean(process.env.RAZORPAY_KEY_ID && process.env.RAZORPAY_KEY_SECRET);\n\nlet razorpay: Razorpay | null = null;\nif (isPaymentEnabled) {\n  razorpay = new Razorpay({\n    key_id: process.env.RAZORPAY_KEY_ID!,\n    key_secret: process.env.RAZORPAY_KEY_SECRET!,\n  });\n  console.log(\"✓ Razorpay payment integration enabled\");\n} else {\n  console.log(\"⚠️ Razorpay credentials not found. Payment features disabled. Set RAZORPAY_KEY_ID and RAZORPAY_KEY_SECRET to enable payments.\");\n}\n\nexport function paymentRoutes(app: Express) {\n  \n  // ============================================================================\n  // GET RAZORPAY KEY - For frontend checkout\n  // ============================================================================\n  \n  app.get(\"/api/payments/key\", async (req: Request, res: Response) => {\n    try {\n      if (!isPaymentEnabled) {\n        return res.status(503).json({ error: \"Payment service not configured\" });\n      }\n      res.json({ key: process.env.RAZORPAY_KEY_ID || \"\" });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n  \n  // ============================================================================\n  // GET TEST SERIES - Shop page\n  // ============================================================================\n  \n  app.get(\"/api/test-series\", async (req: Request, res: Response) => {\n    try {\n      const testSeriesList = await storage.getAllTestSeries({ isActive: true });\n      res.json(testSeriesList);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============================================================================\n  // GET SINGLE TEST SERIES - With tests\n  // ============================================================================\n  \n  app.get(\"/api/test-series/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      \n      const testSeriesData = await storage.getTestSeries(id);\n      if (!testSeriesData) {\n        return res.status(404).json({ error: \"Test series not found\" });\n      }\n\n      const tests = await storage.getTestSeriesTests(id);\n\n      res.json({\n        ...testSeriesData,\n        tests,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============================================================================\n  // CREATE RAZORPAY ORDER - Purchase test series\n  // ============================================================================\n  \n  app.post(\"/api/payments/create-order\", requireAuth, apiLimiter, async (req: Request, res: Response) => {\n    try {\n      if (!isPaymentEnabled || !razorpay) {\n        return res.status(503).json({ error: \"Payment service not configured\" });\n      }\n      \n      const { testSeriesId } = req.body;\n      \n      if (!testSeriesId) {\n        return res.status(400).json({ error: \"Test series ID is required\" });\n      }\n\n      const testSeriesData = await storage.getTestSeries(testSeriesId);\n      if (!testSeriesData) {\n        return res.status(404).json({ error: \"Test series not found\" });\n      }\n\n      if (!testSeriesData.isActive) {\n        return res.status(400).json({ error: \"This test series is not available\" });\n      }\n\n      // Convert price from string to number (paise)\n      const priceInPaise = Math.round(parseFloat(testSeriesData.price) * 100);\n      \n      if (priceInPaise === 0) {\n        return res.status(400).json({ error: \"Cannot create order for free test series\" });\n      }\n\n      const user = req.user as any;\n\n      // Check if already purchased\n      const existingPurchase = await storage.getUserPurchase(user.id, testSeriesId);\n      if (existingPurchase && existingPurchase.status === \"active\") {\n        const now = new Date();\n        if (existingPurchase.expiryDate > now) {\n          return res.status(400).json({ error: \"You already have an active purchase for this test series\" });\n        }\n      }\n\n      // Create Razorpay order\n      const orderOptions = {\n        amount: priceInPaise, // amount in paise\n        currency: \"INR\",\n        receipt: `receipt_${Date.now()}`,\n        notes: {\n          userId: user.id,\n          testSeriesId: testSeriesData.id,\n          validityDays: testSeriesData.validityDays.toString(),\n        },\n      };\n\n      const order = await razorpay.orders.create(orderOptions);\n\n      // Create transaction record\n      const transaction = await storage.createTransaction({\n        userId: user.id,\n        testSeriesId: testSeriesData.id,\n        amount: priceInPaise,\n        currency: \"INR\",\n        razorpayOrderId: order.id,\n        status: \"pending\",\n      });\n\n      res.json({\n        orderId: order.id,\n        amount: order.amount,\n        currency: order.currency,\n        transactionId: transaction.id,\n        key: process.env.RAZORPAY_KEY_ID,\n      });\n    } catch (error: any) {\n      console.error(\"Error creating Razorpay order:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============================================================================\n  // VERIFY PAYMENT - Confirms payment and grants access\n  // ============================================================================\n  \n  app.post(\"/api/payments/verify\", requireAuth, apiLimiter, async (req: Request, res: Response) => {\n    try {\n      if (!isPaymentEnabled || !razorpay) {\n        return res.status(503).json({ error: \"Payment service not configured\" });\n      }\n      \n      const validatedData = verifyPaymentSchema.parse(req.body);\n      const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = validatedData;\n\n      // Verify signature\n      const text = razorpay_order_id + \"|\" + razorpay_payment_id;\n      const expectedSignature = crypto\n        .createHmac(\"sha256\", process.env.RAZORPAY_KEY_SECRET || \"\")\n        .update(text)\n        .digest(\"hex\");\n\n      if (expectedSignature !== razorpay_signature) {\n        return res.status(400).json({ error: \"Invalid payment signature\" });\n      }\n\n      const user = req.user as any;\n\n      // Get transaction\n      const transaction = await storage.getTransactionByOrderId(razorpay_order_id);\n      if (!transaction) {\n        return res.status(404).json({ error: \"Transaction not found\" });\n      }\n\n      if (transaction.userId !== user.id) {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      // Update transaction status\n      await storage.updateTransaction(transaction.id, {\n        razorpayPaymentId: razorpay_payment_id,\n        razorpaySignature: razorpay_signature,\n        status: \"success\",\n      });\n\n      // Get the Razorpay order to extract test series details from notes\n      const order = await razorpay.orders.fetch(razorpay_order_id);\n      const testSeriesIdRaw = order.notes?.testSeriesId;\n      const validityDaysRaw = order.notes?.validityDays;\n      const validityDays = typeof validityDaysRaw === 'number' \n        ? validityDaysRaw \n        : parseInt(String(validityDaysRaw || \"90\"));\n\n      if (!testSeriesIdRaw) {\n        return res.status(400).json({ error: \"Test series information not found\" });\n      }\n\n      const testSeriesId = String(testSeriesIdRaw);\n      const testSeriesData = await storage.getTestSeries(testSeriesId);\n      if (!testSeriesData) {\n        return res.status(404).json({ error: \"Test series not found\" });\n      }\n\n      // Calculate expiry date\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + validityDays);\n\n      // Check if user already has a purchase (could be expired)\n      const existingPurchase = await storage.getUserPurchase(user.id, testSeriesId);\n      \n      if (existingPurchase) {\n        // Update existing purchase\n        await storage.updateUserPurchase(existingPurchase.id, {\n          status: \"active\",\n          expiryDate,\n          transactionId: transaction.id,\n        });\n      } else {\n        // Create new purchase\n        await storage.createUserPurchase({\n          userId: user.id,\n          testSeriesId: testSeriesId,\n          status: \"active\",\n          expiryDate,\n          transactionId: transaction.id,\n        });\n      }\n\n      res.json({\n        success: true,\n        expiryDate,\n        message: \"Payment verified and access granted\",\n      });\n    } catch (error: any) {\n      console.error(\"Error verifying payment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============================================================================\n  // RAZORPAY WEBHOOK - Handles payment events\n  // ============================================================================\n  \n  app.post(\"/api/payments/webhook\", async (req: Request, res: Response) => {\n    try {\n      const webhookSecret = process.env.RAZORPAY_WEBHOOK_SECRET || \"\";\n      const signature = req.headers[\"x-razorpay-signature\"] as string;\n\n      // Verify webhook signature\n      const expectedSignature = crypto\n        .createHmac(\"sha256\", webhookSecret)\n        .update(JSON.stringify(req.body))\n        .digest(\"hex\");\n\n      if (signature !== expectedSignature) {\n        return res.status(400).json({ error: \"Invalid webhook signature\" });\n      }\n\n      const event = req.body.event;\n      const payload = req.body.payload;\n\n      switch (event) {\n        case \"payment.captured\":\n          console.log(\"Payment captured:\", payload.payment.entity.id);\n          break;\n\n        case \"payment.failed\":\n          const orderId = payload.payment.entity.order_id;\n          const transaction = await storage.getTransactionByOrderId(orderId);\n          \n          if (transaction) {\n            await storage.updateTransaction(transaction.id, {\n              status: \"failed\",\n            });\n          }\n          console.log(\"Payment failed:\", payload.payment.entity.id);\n          break;\n\n        default:\n          console.log(\"Unhandled webhook event:\", event);\n      }\n\n      res.json({ status: \"ok\" });\n    } catch (error: any) {\n      console.error(\"Webhook error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============================================================================\n  // GET USER PURCHASES - All purchases with status\n  // ============================================================================\n  \n  app.get(\"/api/payments/purchases\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as any;\n      \n      const purchases = await storage.getUserPurchases(user.id);\n      \n      res.json(purchases);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============================================================================\n  // GET TRANSACTION HISTORY - User's payment history\n  // ============================================================================\n  \n  app.get(\"/api/payments/transactions\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as any;\n      const limit = parseInt(req.query.limit as string) || 50;\n      \n      const transactions = await storage.getUserTransactions(user.id, limit);\n      \n      res.json(transactions);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============================================================================\n  // CHECK ACCESS - Check if user has access to test series\n  // ============================================================================\n  \n  app.get(\"/api/payments/check-access/:testSeriesId\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as any;\n      const { testSeriesId } = req.params;\n      \n      const hasAccess = await storage.checkUserHasAccess(user.id, testSeriesId);\n      \n      res.json({ hasAccess });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n}\n","size_bytes":12447},"client/src/components/RichTextEditor.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { MarkdownRenderer } from \"./MarkdownRenderer\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Bold, \n  Italic, \n  Code, \n  List, \n  ListOrdered,\n  Image,\n  Sigma,\n  Braces,\n  Link as LinkIcon,\n  Table,\n  Heading1,\n  Heading2,\n  Heading3,\n  Quote,\n  Maximize2,\n  Minimize2\n} from \"lucide-react\";\n\ninterface RichTextEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  minHeight?: string;\n  label?: string;\n}\n\nexport function RichTextEditor({ \n  value, \n  onChange, \n  placeholder = \"Write your content here...\",\n  minHeight = \"300px\",\n  label \n}: RichTextEditorProps) {\n  const [activeTab, setActiveTab] = useState<\"write\" | \"preview\">(\"write\");\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const insertAtCursor = (before: string, after: string = \"\", placeholder: string = \"\") => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = value.substring(start, end);\n    const textToInsert = selectedText || placeholder;\n    const newValue = value.substring(0, start) + before + textToInsert + after + value.substring(end);\n    \n    onChange(newValue);\n    \n    // Set cursor position\n    setTimeout(() => {\n      textarea.focus();\n      const newCursorPos = start + before.length + textToInsert.length;\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n    }, 0);\n  };\n\n  const insertText = (text: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const newValue = value.substring(0, start) + text + value.substring(start);\n    onChange(newValue);\n    \n    setTimeout(() => {\n      textarea.focus();\n      const newCursorPos = start + text.length;\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n    }, 0);\n  };\n\n  const toolbarButtons = [\n    { \n      icon: Bold, \n      action: () => insertAtCursor(\"**\", \"**\", \"bold text\"),\n      tooltip: \"Bold (Ctrl+B)\"\n    },\n    { \n      icon: Italic, \n      action: () => insertAtCursor(\"*\", \"*\", \"italic text\"),\n      tooltip: \"Italic (Ctrl+I)\"\n    },\n    { \n      icon: Code, \n      action: () => insertAtCursor(\"`\", \"`\", \"code\"),\n      tooltip: \"Inline code\"\n    },\n    { \n      icon: Quote, \n      action: () => insertAtCursor(\"\\n> \", \"\", \"quote\"),\n      tooltip: \"Quote\"\n    },\n  ];\n\n  const headingButtons = [\n    { \n      icon: Heading1, \n      action: () => insertAtCursor(\"\\n# \", \"\", \"Heading 1\"),\n      tooltip: \"Heading 1\"\n    },\n    { \n      icon: Heading2, \n      action: () => insertAtCursor(\"\\n## \", \"\", \"Heading 2\"),\n      tooltip: \"Heading 2\"\n    },\n    { \n      icon: Heading3, \n      action: () => insertAtCursor(\"\\n### \", \"\", \"Heading 3\"),\n      tooltip: \"Heading 3\"\n    },\n  ];\n\n  const latexTemplates = [\n    { name: 'Inline Equation', template: '$x^2 + y^2 = z^2$' },\n    { name: 'Block Equation', template: '\\n$$\\n\\\\int_{a}^{b} f(x) \\\\, dx\\n$$\\n' },\n    { name: 'Fraction', template: '$\\\\frac{a}{b}$' },\n    { name: 'Square Root', template: '$\\\\sqrt{x}$' },\n    { name: 'Nth Root', template: '$\\\\sqrt[n]{x}$' },\n    { name: 'Sum', template: '$\\\\sum_{i=1}^{n} x_i$' },\n    { name: 'Product', template: '$\\\\prod_{i=1}^{n} x_i$' },\n    { name: 'Limit', template: '$\\\\lim_{x \\\\to \\\\infty} f(x)$' },\n    { name: 'Derivative', template: '$\\\\frac{dy}{dx}$' },\n    { name: 'Partial Derivative', template: '$\\\\frac{\\\\partial f}{\\\\partial x}$' },\n    { name: 'Integral', template: '$\\\\int f(x) \\\\, dx$' },\n    { name: 'Definite Integral', template: '$\\\\int_{a}^{b} f(x) \\\\, dx$' },\n    { name: 'Double Integral', template: '$\\\\iint f(x,y) \\\\, dx \\\\, dy$' },\n    { name: 'Matrix 2x2', template: '\\n$$\\n\\\\begin{bmatrix}\\na & b \\\\\\\\\\nc & d\\n\\\\end{bmatrix}\\n$$\\n' },\n    { name: 'Matrix 3x3', template: '\\n$$\\n\\\\begin{bmatrix}\\na & b & c \\\\\\\\\\nd & e & f \\\\\\\\\\ng & h & i\\n\\\\end{bmatrix}\\n$$\\n' },\n    { name: 'Binomial', template: '$\\\\binom{n}{k}$' },\n    { name: 'Vector', template: '$\\\\vec{v}$' },\n    { name: 'Greek Letters', template: '$\\\\alpha, \\\\beta, \\\\gamma, \\\\delta, \\\\epsilon, \\\\theta, \\\\lambda, \\\\pi, \\\\sigma, \\\\phi, \\\\omega$' },\n    { name: 'Trigonometry', template: '$\\\\sin(x), \\\\cos(x), \\\\tan(x)$' },\n    { name: 'Logarithm', template: '$\\\\log_b(x), \\\\ln(x)$' },\n    { name: 'Exponent', template: '$e^{x}$' },\n    { name: 'Infinity', template: '$\\\\infty$' },\n    { name: 'Subscript', template: '$x_i$' },\n    { name: 'Superscript', template: '$x^2$' },\n    { name: 'Both Scripts', template: '$x_i^2$' },\n  ];\n\n  const wordCount = value.trim().split(/\\s+/).filter(Boolean).length;\n  const charCount = value.length;\n\n  return (\n    <div className={`space-y-2 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 flex flex-col' : ''}`}>\n      {label && !isFullscreen && <label className=\"text-sm font-medium\">{label}</label>}\n      \n      <Card className={`overflow-hidden ${isFullscreen ? 'flex-1 flex flex-col' : ''}`}>\n        <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as \"write\" | \"preview\")} className={isFullscreen ? 'h-full flex flex-col' : ''}>\n          <div className=\"border-b bg-muted/50 flex items-center justify-between\">\n            <TabsList className=\"h-auto p-1 bg-transparent\">\n              <TabsTrigger value=\"write\" className=\"data-[state=active]:bg-background\">\n                Write\n              </TabsTrigger>\n              <TabsTrigger value=\"preview\" className=\"data-[state=active]:bg-background\">\n                Preview\n              </TabsTrigger>\n            </TabsList>\n            \n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsFullscreen(!isFullscreen)}\n              className=\"mr-2\"\n              title={isFullscreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n            >\n              {isFullscreen ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n\n          <TabsContent value=\"write\" className={`mt-0 ${isFullscreen ? 'flex-1 flex flex-col' : ''}`}>\n            {/* Toolbar */}\n            <div className=\"flex flex-wrap gap-1 p-2 border-b bg-muted/30\">\n              {/* Text Formatting */}\n              {toolbarButtons.map((btn, idx) => (\n                <Button\n                  key={idx}\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={btn.action}\n                  title={btn.tooltip}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <btn.icon className=\"h-4 w-4\" />\n                </Button>\n              ))}\n\n              <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\n\n              {/* Headings */}\n              {headingButtons.map((btn, idx) => (\n                <Button\n                  key={idx}\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={btn.action}\n                  title={btn.tooltip}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <btn.icon className=\"h-4 w-4\" />\n                </Button>\n              ))}\n\n              <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\n\n              {/* Lists */}\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertAtCursor(\"\\n- \", \"\", \"List item\")}\n                title=\"Bullet list\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertAtCursor(\"\\n1. \", \"\", \"List item\")}\n                title=\"Numbered list\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <ListOrdered className=\"h-4 w-4\" />\n              </Button>\n\n              <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\n\n              {/* Insert Elements */}\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertAtCursor(\"[\", \"](url)\", \"link text\")}\n                title=\"Insert link\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <LinkIcon className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertAtCursor(\"\\n![\", \"](image-url)\", \"alt text\")}\n                title=\"Insert image\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <Image className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertText('\\n| Column 1 | Column 2 |\\n|----------|----------|\\n| Cell 1   | Cell 2   |\\n')}\n                title=\"Insert table\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <Table className=\"h-4 w-4\" />\n              </Button>\n\n              <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\n\n              {/* Math */}\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertAtCursor(\"$\", \"$\", \"equation\")}\n                title=\"Inline LaTeX: $equation$\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <Sigma className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertAtCursor(\"\\n$$\\n\", \"\\n$$\\n\", \"equation\")}\n                title=\"Block LaTeX: $$equation$$\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <Sigma className=\"h-5 w-5\" />\n              </Button>\n\n              {/* LaTeX Templates Dropdown */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    title=\"LaTeX templates\"\n                    className=\"h-8 px-2 text-xs font-mono\"\n                  >\n                    ƒ(x)\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\" className=\"w-64 max-h-96 overflow-y-auto\">\n                  <DropdownMenuLabel>LaTeX Templates</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  {latexTemplates.map((template, idx) => (\n                    <DropdownMenuItem\n                      key={idx}\n                      onClick={() => insertText(template.template)}\n                      className=\"font-mono text-xs cursor-pointer\"\n                    >\n                      {template.name}\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\n\n              {/* Code Block */}\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => insertText('\\n```javascript\\n// Your code here\\n```\\n')}\n                title=\"Insert code block\"\n                className=\"h-8 w-8 p-0\"\n              >\n                <Braces className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Editor */}\n            <Textarea\n              ref={textareaRef}\n              data-editor=\"true\"\n              value={value}\n              onChange={(e) => onChange(e.target.value)}\n              placeholder={placeholder}\n              className=\"border-0 focus-visible:ring-0 focus-visible:ring-offset-0 resize-none font-mono text-sm\"\n              style={{ minHeight: isFullscreen ? '100%' : minHeight }}\n            />\n\n            {/* Help text & Stats */}\n            <div className=\"px-3 py-2 text-xs text-muted-foreground bg-muted/30 border-t flex items-center justify-between\">\n              <div>\n                <strong>Tips:</strong> Use <code>$equation$</code> for inline math, <code>$$equation$$</code> for block math. \n                Example: <code>$\\frac{'{x^2 + y^2}'}{2}$</code>\n              </div>\n              <div className=\"font-mono\">\n                {wordCount} words • {charCount} chars\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"preview\" className={`mt-0 p-4 ${isFullscreen ? 'flex-1 overflow-auto' : ''}`} style={!isFullscreen ? { minHeight } : {}}>\n            {value ? (\n              <MarkdownRenderer content={value} />\n            ) : (\n              <p className=\"text-muted-foreground text-sm\">Nothing to preview yet...</p>\n            )}\n          </TabsContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13624},"client/src/pages/ResetPassword.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { KeyRound, CheckCircle } from \"lucide-react\";\nimport Footer from \"@/components/Footer\";\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [token, setToken] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [resetSuccess, setResetSuccess] = useState(false);\n\n  useEffect(() => {\n    // Get token from URL query params\n    const params = new URLSearchParams(window.location.search);\n    const tokenParam = params.get('token');\n    if (tokenParam) {\n      setToken(tokenParam);\n    }\n  }, []);\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (data: { token: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/reset-password\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setResetSuccess(true);\n      toast({\n        title: \"Success\",\n        description: data.message,\n      });\n      // Redirect to login after 3 seconds\n      setTimeout(() => {\n        setLocation(\"/login\");\n      }, 3000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!token) {\n      toast({\n        title: \"Error\",\n        description: \"Reset token is missing\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    resetPasswordMutation.mutate({ token, password });\n  };\n\n  if (resetSuccess) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-background\">\n        <div className=\"flex-1 flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader className=\"space-y-1\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <CheckCircle className=\"h-12 w-12 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-2xl text-center\">Password Reset Successful</CardTitle>\n              <CardDescription className=\"text-center\">\n                Your password has been reset. Redirecting to login...\n              </CardDescription>\n            </CardHeader>\n            <CardFooter>\n              <Link href=\"/login\" className=\"w-full\">\n                <Button className=\"w-full\" data-testid=\"button-go-to-login\">\n                  Go to Login\n                </Button>\n              </Link>\n            </CardFooter>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-1\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <KeyRound className=\"h-12 w-12 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl text-center\">Reset Password</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your new password below\n            </CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">New Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-new-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={resetPasswordMutation.isPending}\n                data-testid=\"button-reset-password\"\n              >\n                {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n              </Button>\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" className=\"w-full\" data-testid=\"link-back-to-login\">\n                  Back to Login\n                </Button>\n              </Link>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5970},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/Questions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useViewAsRole } from \"@/contexts/ViewAsRoleContext\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Plus, Filter, BookOpen, Clock, BarChart } from \"lucide-react\";\nimport type { Question, Topic } from \"@shared/schema\";\n\nexport default function Questions() {\n  const { user, isLoading: isAuthLoading } = useAuth();\n  const { effectiveRole } = useViewAsRole();\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"all\");\n  const [selectedDifficulty, setSelectedDifficulty] = useState<string>(\"all\");\n  const [selectedType, setSelectedType] = useState<string>(\"all\");\n\n  // Fetch topics\n  const { data: topics = [] } = useQuery<Topic[]>({\n    queryKey: [\"/api/topics\"],\n  });\n\n  // Fetch questions with filters\n  const queryParams = new URLSearchParams();\n  if (selectedTopic !== \"all\") queryParams.append(\"topicId\", selectedTopic);\n  if (selectedDifficulty !== \"all\") queryParams.append(\"difficulty\", selectedDifficulty);\n  if (selectedType !== \"all\") queryParams.append(\"type\", selectedType);\n\n  const { data: questions = [], isLoading } = useQuery<Question[]>({\n    queryKey: [\"/api/questions\", selectedTopic, selectedDifficulty, selectedType],\n    queryFn: async () => {\n      const response = await fetch(`/api/questions?${queryParams.toString()}`);\n      if (!response.ok) throw new Error(\"Failed to fetch questions\");\n      return response.json();\n    },\n    enabled: !isAuthLoading, // Only fetch when auth is loaded\n  });\n\n  // All authenticated users (student, moderator, admin) can create questions\n  // Wait for auth to load before showing the button\n  const canManageQuestions = !isAuthLoading && !!user;\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"easy\":\n        return \"bg-emerald-500/10 text-emerald-500 border-emerald-500/20\";\n      case \"medium\":\n        return \"bg-amber-500/10 text-amber-500 border-amber-500/20\";\n      case \"hard\":\n        return \"bg-red-500/10 text-red-500 border-red-500/20\";\n      default:\n        return \"bg-slate-500/10 text-slate-500 border-slate-500/20\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"mcq_single\":\n        return <BookOpen className=\"h-4 w-4\" />;\n      case \"numerical\":\n        return <BarChart className=\"h-4 w-4\" />;\n      case \"mcq_multiple\":\n        return <Filter className=\"h-4 w-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Question Bank</h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Browse and practice from our comprehensive question collection\n            </p>\n          </div>\n          {canManageQuestions && (\n            <Link href=\"/questions/new\">\n              <Button className=\"gap-2\" data-testid=\"button-create-question\">\n                <Plus className=\"h-4 w-4\" />\n                Add Question\n              </Button>\n            </Link>\n          )}\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Filter className=\"h-5 w-5\" />\n              Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex flex-col gap-4 md:flex-row md:items-center\">\n            <div className=\"flex-1\">\n              <label className=\"text-sm font-medium mb-2 block\">Topic</label>\n              <Select value={selectedTopic} onValueChange={setSelectedTopic}>\n                <SelectTrigger data-testid=\"select-topic\">\n                  <SelectValue placeholder=\"All Topics\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Topics</SelectItem>\n                  {topics.map((topic) => (\n                    <SelectItem key={topic.id} value={topic.id}>\n                      {topic.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex-1\">\n              <label className=\"text-sm font-medium mb-2 block\">Difficulty</label>\n              <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>\n                <SelectTrigger data-testid=\"select-difficulty\">\n                  <SelectValue placeholder=\"All Levels\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"easy\">Easy</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"hard\">Hard</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex-1\">\n              <label className=\"text-sm font-medium mb-2 block\">Type</label>\n              <Select value={selectedType} onValueChange={setSelectedType}>\n                <SelectTrigger data-testid=\"select-type\">\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"mcq_single\">MCQ (Single)</SelectItem>\n                  <SelectItem value=\"mcq_multiple\">MSQ (Multiple)</SelectItem>\n                  <SelectItem value=\"numerical\">Numerical</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Question List */}\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            // Loading skeleton\n            Array.from({ length: 5 }).map((_, i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2 mt-2\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-4 w-full\" />\n                </CardContent>\n              </Card>\n            ))\n          ) : questions.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <BookOpen className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium text-foreground\">No questions found</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Try adjusting your filters or add a new question\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            questions.map((question) => (\n              <Link key={question.id} href={`/questions/${question.id}`}>\n                <Card className=\"hover-elevate cursor-pointer transition-all\" data-testid={`card-question-${question.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <div className=\"flex items-center gap-1\">\n                            {getTypeIcon(question.type)}\n                            <span className=\"text-xs font-medium text-muted-foreground uppercase\">\n                              {question.type === \"mcq_single\" ? \"MCQ\" : question.type === \"mcq_multiple\" ? \"MSQ\" : \"NUM\"}\n                            </span>\n                          </div>\n                          <Badge className={getDifficultyColor(question.difficulty)} variant=\"outline\">\n                            {question.difficulty}\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            {question.marks} {question.marks === 1 ? \"mark\" : \"marks\"}\n                          </Badge>\n                        </div>\n                        <CardTitle className=\"text-base line-clamp-2\">\n                          {question.content}\n                        </CardTitle>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  {question.explanation && (\n                    <CardContent>\n                      <CardDescription className=\"line-clamp-2\">\n                        {question.explanation}\n                      </CardDescription>\n                    </CardContent>\n                  )}\n                </Card>\n              </Link>\n            ))\n          )}\n        </div>\n\n        {/* Results count */}\n        {!isLoading && questions.length > 0 && (\n          <div className=\"text-center text-sm text-muted-foreground\">\n            Showing {questions.length} {questions.length === 1 ? \"question\" : \"questions\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9585},"server/storage/user.storage.ts":{"content":"import {\n  users,\n  sessions,\n  verificationTokens,\n  type User,\n  type InsertUser,\n  type Session,\n  type InsertSession,\n  type VerificationToken,\n} from \"@shared/schema\";\nimport { db } from \"../db\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport class UserStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async upsertOAuthUser(data: {\n    email: string;\n    name: string;\n    authProvider: \"google\" | \"github\";\n    providerId: string;\n    avatar?: string;\n  }): Promise<User> {\n    const existingUser = await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.authProvider, data.authProvider),\n          eq(users.providerId, data.providerId)\n        )\n      )\n      .limit(1);\n\n    if (existingUser.length > 0) {\n      const [user] = await db\n        .update(users)\n        .set({\n          name: data.name,\n          avatar: data.avatar,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, existingUser[0].id))\n        .returning();\n      return user;\n    }\n\n    const userByEmail = await this.getUserByEmail(data.email);\n    if (userByEmail) {\n      const [user] = await db\n        .update(users)\n        .set({\n          authProvider: data.authProvider,\n          providerId: data.providerId,\n          avatar: data.avatar || userByEmail.avatar,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userByEmail.id))\n        .returning();\n      return user;\n    }\n\n    const [newUser] = await db\n      .insert(users)\n      .values({\n        email: data.email,\n        name: data.name,\n        authProvider: data.authProvider,\n        providerId: data.providerId,\n        avatar: data.avatar,\n        role: \"student\",\n        theme: \"system\",\n        twofaEnabled: false,\n      })\n      .returning();\n    return newUser;\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const [session] = await db\n      .insert(sessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async getSession(token: string): Promise<Session | undefined> {\n    const [session] = await db\n      .select()\n      .from(sessions)\n      .where(eq(sessions.token, token));\n    return session || undefined;\n  }\n\n  async deleteSession(token: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.token, token));\n  }\n\n  async deleteUserSessions(userId: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.userId, userId));\n  }\n\n  async createPasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<VerificationToken> {\n    const [resetToken] = await db\n      .insert(verificationTokens)\n      .values({\n        userId,\n        token,\n        type: 'password_reset',\n        expiresAt,\n      })\n      .returning();\n    return resetToken;\n  }\n\n  async getPasswordResetToken(token: string): Promise<VerificationToken | undefined> {\n    const [resetToken] = await db\n      .select()\n      .from(verificationTokens)\n      .where(\n        and(\n          eq(verificationTokens.token, token),\n          eq(verificationTokens.type, 'password_reset')\n        )\n      );\n    return resetToken || undefined;\n  }\n\n  async deletePasswordResetToken(token: string): Promise<void> {\n    await db\n      .delete(verificationTokens)\n      .where(\n        and(\n          eq(verificationTokens.token, token),\n          eq(verificationTokens.type, 'password_reset')\n        )\n      );\n  }\n\n  async deleteUserPasswordResetTokens(userId: string): Promise<void> {\n    await db\n      .delete(verificationTokens)\n      .where(\n        and(\n          eq(verificationTokens.userId, userId),\n          eq(verificationTokens.type, 'password_reset')\n        )\n      );\n  }\n}\n","size_bytes":4461},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Github, Twitter, Linkedin, Mail } from \"lucide-react\";\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"border-t bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-lg font-bold\">GATE And Tech</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Your comprehensive exam preparation platform for GATE aspirants.\n            </p>\n          </div>\n\n          {/* Quick Links */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold\">Quick Links</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/login\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-login\">\n                  Login\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/register\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-register\">\n                  Sign Up\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/about\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-about\">\n                  About Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-contact\">\n                  Contact\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Resources */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold\">Resources</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/help\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-help\">\n                  Help Center\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/privacy\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-privacy\">\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-terms\">\n                  Terms of Service\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/faq\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-footer-faq\">\n                  FAQ\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Social Links */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold\">Connect With Us</h4>\n            <div className=\"flex gap-3\">\n              <a\n                href=\"https://github.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"h-9 w-9 flex items-center justify-center rounded-md border hover-elevate\"\n                data-testid=\"link-footer-github\"\n                aria-label=\"GitHub\"\n              >\n                <Github className=\"h-4 w-4\" />\n              </a>\n              <a\n                href=\"https://twitter.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"h-9 w-9 flex items-center justify-center rounded-md border hover-elevate\"\n                data-testid=\"link-footer-twitter\"\n                aria-label=\"Twitter\"\n              >\n                <Twitter className=\"h-4 w-4\" />\n              </a>\n              <a\n                href=\"https://linkedin.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"h-9 w-9 flex items-center justify-center rounded-md border hover-elevate\"\n                data-testid=\"link-footer-linkedin\"\n                aria-label=\"LinkedIn\"\n              >\n                <Linkedin className=\"h-4 w-4\" />\n              </a>\n              <a\n                href=\"mailto:support@gateandtech.com\"\n                className=\"h-9 w-9 flex items-center justify-center rounded-md border hover-elevate\"\n                data-testid=\"link-footer-email\"\n                aria-label=\"Email\"\n              >\n                <Mail className=\"h-4 w-4\" />\n              </a>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"mt-8 pt-6 border-t text-center text-sm text-muted-foreground\">\n          <p>© {currentYear} GATE And Tech. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4825},"server/storage/index.ts":{"content":"import { UserStorage } from \"./user.storage\";\nimport { QuestionStorage } from \"./question.storage\";\nimport { TestStorage } from \"./test.storage\";\nimport { PaymentStorage } from \"./payment.storage\";\nimport { DiscussionStorage } from \"./discussion.storage\";\nimport type {\n  User,\n  InsertUser,\n  Session,\n  InsertSession,\n  VerificationToken,\n  Question,\n  InsertQuestion,\n  Subject,\n  InsertSubject,\n  Topic,\n  InsertTopic,\n  Test,\n  InsertTest,\n  TestAttempt,\n  InsertTestAttempt,\n  TestResponse,\n  InsertTestResponse,\n  TestSeries,\n  InsertTestSeries,\n  TestSeriesTest,\n  UserPurchase,\n  InsertUserPurchase,\n  Transaction,\n  InsertTransaction,\n  DiscussionThread,\n  InsertDiscussionThread,\n  DiscussionPost,\n  InsertDiscussionPost,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<InsertUser>): Promise<User | undefined>;\n  upsertOAuthUser(data: {\n    email: string;\n    name: string;\n    authProvider: \"google\" | \"github\";\n    providerId: string;\n    avatar?: string;\n  }): Promise<User>;\n  createSession(session: InsertSession): Promise<Session>;\n  getSession(token: string): Promise<Session | undefined>;\n  deleteSession(token: string): Promise<void>;\n  deleteUserSessions(userId: string): Promise<void>;\n  createPasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<VerificationToken>;\n  getPasswordResetToken(token: string): Promise<VerificationToken | undefined>;\n  deletePasswordResetToken(token: string): Promise<void>;\n  deleteUserPasswordResetTokens(userId: string): Promise<void>;\n  getQuestion(id: string): Promise<Question | undefined>;\n  getQuestions(filters?: { \n    topicId?: string; \n    difficulty?: string; \n    type?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Question[]>;\n  createQuestion(question: InsertQuestion): Promise<Question>;\n  updateQuestion(id: string, data: Partial<InsertQuestion>): Promise<Question | undefined>;\n  deleteQuestion(id: string): Promise<void>;\n  addQuestionTopic(questionId: string, topicId: string): Promise<void>;\n  removeQuestionTopic(questionId: string, topicId: string): Promise<void>;\n  getQuestionTopics(questionId: string): Promise<Topic[]>;\n  getTopic(id: string): Promise<Topic | undefined>;\n  getTopics(): Promise<Topic[]>;\n  getTopicsBySubject(subjectId: string): Promise<Topic[]>;\n  createTopic(topic: InsertTopic): Promise<Topic>;\n  updateTopic(id: string, data: Partial<InsertTopic>): Promise<Topic | undefined>;\n  deleteTopic(id: string): Promise<void>;\n  getSubject(id: string): Promise<Subject | undefined>;\n  getSubjects(): Promise<Subject[]>;\n  createSubject(subject: InsertSubject): Promise<Subject>;\n  updateSubject(id: string, data: Partial<InsertSubject>): Promise<Subject | undefined>;\n  deleteSubject(id: string): Promise<void>;\n  getTest(id: string): Promise<Test | undefined>;\n  getTests(filters?: { \n    status?: string; \n    isPro?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Test[]>;\n  createTest(test: InsertTest): Promise<Test>;\n  updateTest(id: string, data: Partial<InsertTest>): Promise<Test | undefined>;\n  deleteTest(id: string): Promise<void>;\n  addQuestionsToTest(testId: string, questionIds: string[]): Promise<void>;\n  getTestQuestions(testId: string): Promise<Question[]>;\n  getTestAttempt(id: string): Promise<TestAttempt | undefined>;\n  getUserTestAttempts(userId: string, limit?: number): Promise<TestAttempt[]>;\n  getTestAttemptsByTestId(testId: string, status?: string): Promise<TestAttempt[]>;\n  createTestAttempt(attempt: InsertTestAttempt): Promise<TestAttempt>;\n  updateTestAttempt(id: string, data: Partial<InsertTestAttempt>): Promise<TestAttempt | undefined>;\n  createTestResponse(response: InsertTestResponse): Promise<TestResponse>;\n  updateTestResponse(id: string, data: Partial<InsertTestResponse>): Promise<TestResponse | undefined>;\n  getTestAttemptResponses(attemptId: string): Promise<TestResponse[]>;\n  getTestResponse(attemptId: string, questionId: string): Promise<TestResponse | undefined>;\n  getTestSeries(id: string): Promise<TestSeries | undefined>;\n  getAllTestSeries(filters?: { isActive?: boolean }): Promise<TestSeries[]>;\n  createTestSeries(testSeries: InsertTestSeries): Promise<TestSeries>;\n  updateTestSeries(id: string, data: Partial<InsertTestSeries>): Promise<TestSeries | undefined>;\n  addTestToSeries(testSeriesId: string, testId: string, order: number): Promise<void>;\n  removeTestFromSeries(testSeriesId: string, testId: string): Promise<void>;\n  getTestSeriesTests(testSeriesId: string): Promise<Test[]>;\n  getTestSeriesByTestId(testId: string): Promise<TestSeries | undefined>;\n  getTestSeriesTestsByTestId(testId: string): Promise<TestSeriesTest[]>;\n  getUserPurchase(userId: string, testSeriesId: string): Promise<UserPurchase | undefined>;\n  getUserPurchases(userId: string, filters?: { status?: string }): Promise<UserPurchase[]>;\n  createUserPurchase(purchase: InsertUserPurchase): Promise<UserPurchase>;\n  updateUserPurchase(id: string, data: Partial<InsertUserPurchase>): Promise<UserPurchase | undefined>;\n  checkUserHasAccess(userId: string, testSeriesId: string): Promise<boolean>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  getTransactionByOrderId(orderId: string): Promise<Transaction | undefined>;\n  getUserTransactions(userId: string, limit?: number): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, data: Partial<InsertTransaction>): Promise<Transaction | undefined>;\n  getThread(id: string): Promise<DiscussionThread | undefined>;\n  getThreads(filters?: { topicId?: string; limit?: number; offset?: number }): Promise<DiscussionThread[]>;\n  createThread(thread: InsertDiscussionThread): Promise<DiscussionThread>;\n  getPost(id: string): Promise<DiscussionPost | undefined>;\n  getThreadPosts(threadId: string): Promise<DiscussionPost[]>;\n  createPost(post: InsertDiscussionPost): Promise<DiscussionPost>;\n  updatePost(id: string, data: Partial<InsertDiscussionPost>): Promise<DiscussionPost | undefined>;\n  incrementPostUpvotes(id: string, amount: number): Promise<void>;\n  getUserPerformanceStats(userId: string): Promise<{\n    totalTests: number;\n    averageScore: number;\n    averagePercentage: number;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    unanswered: number;\n    averageTimeTaken: number;\n    accuracy: number;\n  }>;\n  getTopicWisePerformance(userId: string): Promise<Array<{\n    topicId: string;\n    topicName: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>>;\n  getDifficultyWisePerformance(userId: string): Promise<Array<{\n    difficulty: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>>;\n  getPerformanceTrend(userId: string, limit?: number): Promise<Array<{\n    attemptId: string;\n    testTitle: string;\n    score: number;\n    maxScore: number;\n    percentage: number;\n    submittedAt: Date;\n  }>>;\n}\n\nexport class Storage implements IStorage {\n  private userStorage: UserStorage;\n  private questionStorage: QuestionStorage;\n  private testStorage: TestStorage;\n  private paymentStorage: PaymentStorage;\n  private discussionStorage: DiscussionStorage;\n\n  constructor() {\n    this.userStorage = new UserStorage();\n    this.questionStorage = new QuestionStorage();\n    this.testStorage = new TestStorage();\n    this.paymentStorage = new PaymentStorage();\n    this.discussionStorage = new DiscussionStorage();\n  }\n\n  getUser(id: string): Promise<User | undefined> {\n    return this.userStorage.getUser(id);\n  }\n\n  getUserByEmail(email: string): Promise<User | undefined> {\n    return this.userStorage.getUserByEmail(email);\n  }\n\n  createUser(user: InsertUser): Promise<User> {\n    return this.userStorage.createUser(user);\n  }\n\n  updateUser(id: string, data: Partial<InsertUser>): Promise<User | undefined> {\n    return this.userStorage.updateUser(id, data);\n  }\n\n  upsertOAuthUser(data: {\n    email: string;\n    name: string;\n    authProvider: \"google\" | \"github\";\n    providerId: string;\n    avatar?: string;\n  }): Promise<User> {\n    return this.userStorage.upsertOAuthUser(data);\n  }\n\n  createSession(session: InsertSession): Promise<Session> {\n    return this.userStorage.createSession(session);\n  }\n\n  getSession(token: string): Promise<Session | undefined> {\n    return this.userStorage.getSession(token);\n  }\n\n  deleteSession(token: string): Promise<void> {\n    return this.userStorage.deleteSession(token);\n  }\n\n  deleteUserSessions(userId: string): Promise<void> {\n    return this.userStorage.deleteUserSessions(userId);\n  }\n\n  createPasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<VerificationToken> {\n    return this.userStorage.createPasswordResetToken(userId, token, expiresAt);\n  }\n\n  getPasswordResetToken(token: string): Promise<VerificationToken | undefined> {\n    return this.userStorage.getPasswordResetToken(token);\n  }\n\n  deletePasswordResetToken(token: string): Promise<void> {\n    return this.userStorage.deletePasswordResetToken(token);\n  }\n\n  deleteUserPasswordResetTokens(userId: string): Promise<void> {\n    return this.userStorage.deleteUserPasswordResetTokens(userId);\n  }\n\n  getQuestion(id: string): Promise<Question | undefined> {\n    return this.questionStorage.getQuestion(id);\n  }\n\n  getQuestions(filters?: { \n    topicId?: string; \n    difficulty?: string; \n    type?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Question[]> {\n    return this.questionStorage.getQuestions(filters);\n  }\n\n  createQuestion(question: InsertQuestion): Promise<Question> {\n    return this.questionStorage.createQuestion(question);\n  }\n\n  updateQuestion(id: string, data: Partial<InsertQuestion>): Promise<Question | undefined> {\n    return this.questionStorage.updateQuestion(id, data);\n  }\n\n  deleteQuestion(id: string): Promise<void> {\n    return this.questionStorage.deleteQuestion(id);\n  }\n\n  addQuestionTopic(questionId: string, topicId: string): Promise<void> {\n    return this.questionStorage.addQuestionTopic(questionId, topicId);\n  }\n\n  removeQuestionTopic(questionId: string, topicId: string): Promise<void> {\n    return this.questionStorage.removeQuestionTopic(questionId, topicId);\n  }\n\n  getQuestionTopics(questionId: string): Promise<Topic[]> {\n    return this.questionStorage.getQuestionTopics(questionId);\n  }\n\n  getTopic(id: string): Promise<Topic | undefined> {\n    return this.questionStorage.getTopic(id);\n  }\n\n  getTopics(): Promise<Topic[]> {\n    return this.questionStorage.getTopics();\n  }\n\n  createTopic(topic: InsertTopic): Promise<Topic> {\n    return this.questionStorage.createTopic(topic);\n  }\n\n  getTopicsBySubject(subjectId: string): Promise<Topic[]> {\n    return this.questionStorage.getTopicsBySubject(subjectId);\n  }\n\n  updateTopic(id: string, data: Partial<InsertTopic>): Promise<Topic | undefined> {\n    return this.questionStorage.updateTopic(id, data);\n  }\n\n  deleteTopic(id: string): Promise<void> {\n    return this.questionStorage.deleteTopic(id);\n  }\n\n  getSubject(id: string): Promise<Subject | undefined> {\n    return this.questionStorage.getSubject(id);\n  }\n\n  getSubjects(): Promise<Subject[]> {\n    return this.questionStorage.getSubjects();\n  }\n\n  createSubject(subject: InsertSubject): Promise<Subject> {\n    return this.questionStorage.createSubject(subject);\n  }\n\n  updateSubject(id: string, data: Partial<InsertSubject>): Promise<Subject | undefined> {\n    return this.questionStorage.updateSubject(id, data);\n  }\n\n  deleteSubject(id: string): Promise<void> {\n    return this.questionStorage.deleteSubject(id);\n  }\n\n  getTest(id: string): Promise<Test | undefined> {\n    return this.testStorage.getTest(id);\n  }\n\n  getTests(filters?: { \n    status?: string; \n    isPro?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Test[]> {\n    return this.testStorage.getTests(filters);\n  }\n\n  createTest(test: InsertTest): Promise<Test> {\n    return this.testStorage.createTest(test);\n  }\n\n  updateTest(id: string, data: Partial<InsertTest>): Promise<Test | undefined> {\n    return this.testStorage.updateTest(id, data);\n  }\n\n  deleteTest(id: string): Promise<void> {\n    return this.testStorage.deleteTest(id);\n  }\n\n  addQuestionsToTest(testId: string, questionIds: string[]): Promise<void> {\n    return this.testStorage.addQuestionsToTest(testId, questionIds);\n  }\n\n  getTestQuestions(testId: string): Promise<Question[]> {\n    return this.testStorage.getTestQuestions(testId);\n  }\n\n  getTestAttempt(id: string): Promise<TestAttempt | undefined> {\n    return this.testStorage.getTestAttempt(id);\n  }\n\n  getUserTestAttempts(userId: string, limit?: number): Promise<TestAttempt[]> {\n    return this.testStorage.getUserTestAttempts(userId, limit);\n  }\n\n  getTestAttemptsByTestId(testId: string, status?: string): Promise<TestAttempt[]> {\n    return this.testStorage.getTestAttemptsByTestId(testId, status);\n  }\n\n  createTestAttempt(attempt: InsertTestAttempt): Promise<TestAttempt> {\n    return this.testStorage.createTestAttempt(attempt);\n  }\n\n  updateTestAttempt(id: string, data: Partial<InsertTestAttempt>): Promise<TestAttempt | undefined> {\n    return this.testStorage.updateTestAttempt(id, data);\n  }\n\n  createTestResponse(response: InsertTestResponse): Promise<TestResponse> {\n    return this.testStorage.createTestResponse(response);\n  }\n\n  updateTestResponse(id: string, data: Partial<InsertTestResponse>): Promise<TestResponse | undefined> {\n    return this.testStorage.updateTestResponse(id, data);\n  }\n\n  getTestAttemptResponses(attemptId: string): Promise<TestResponse[]> {\n    return this.testStorage.getTestAttemptResponses(attemptId);\n  }\n\n  getTestResponse(attemptId: string, questionId: string): Promise<TestResponse | undefined> {\n    return this.testStorage.getTestResponse(attemptId, questionId);\n  }\n\n  getTestSeries(id: string): Promise<TestSeries | undefined> {\n    return this.paymentStorage.getTestSeries(id);\n  }\n\n  getAllTestSeries(filters?: { isActive?: boolean }): Promise<TestSeries[]> {\n    return this.paymentStorage.getAllTestSeries(filters);\n  }\n\n  createTestSeries(testSeries: InsertTestSeries): Promise<TestSeries> {\n    return this.paymentStorage.createTestSeries(testSeries);\n  }\n\n  updateTestSeries(id: string, data: Partial<InsertTestSeries>): Promise<TestSeries | undefined> {\n    return this.paymentStorage.updateTestSeries(id, data);\n  }\n\n  addTestToSeries(testSeriesId: string, testId: string, order: number): Promise<void> {\n    return this.paymentStorage.addTestToSeries(testSeriesId, testId, order);\n  }\n\n  removeTestFromSeries(testSeriesId: string, testId: string): Promise<void> {\n    return this.paymentStorage.removeTestFromSeries(testSeriesId, testId);\n  }\n\n  getTestSeriesTests(testSeriesId: string): Promise<Test[]> {\n    return this.paymentStorage.getTestSeriesTests(testSeriesId);\n  }\n\n  getTestSeriesByTestId(testId: string): Promise<TestSeries | undefined> {\n    return this.paymentStorage.getTestSeriesByTestId(testId);\n  }\n\n  getTestSeriesTestsByTestId(testId: string): Promise<TestSeriesTest[]> {\n    return this.paymentStorage.getTestSeriesTestsByTestId(testId);\n  }\n\n  getUserPurchase(userId: string, testSeriesId: string): Promise<UserPurchase | undefined> {\n    return this.paymentStorage.getUserPurchase(userId, testSeriesId);\n  }\n\n  getUserPurchases(userId: string, filters?: { status?: string }): Promise<UserPurchase[]> {\n    return this.paymentStorage.getUserPurchases(userId, filters);\n  }\n\n  createUserPurchase(purchase: InsertUserPurchase): Promise<UserPurchase> {\n    return this.paymentStorage.createUserPurchase(purchase);\n  }\n\n  updateUserPurchase(id: string, data: Partial<InsertUserPurchase>): Promise<UserPurchase | undefined> {\n    return this.paymentStorage.updateUserPurchase(id, data);\n  }\n\n  checkUserHasAccess(userId: string, testSeriesId: string): Promise<boolean> {\n    return this.paymentStorage.checkUserHasAccess(userId, testSeriesId);\n  }\n\n  getTransaction(id: string): Promise<Transaction | undefined> {\n    return this.paymentStorage.getTransaction(id);\n  }\n\n  getTransactionByOrderId(orderId: string): Promise<Transaction | undefined> {\n    return this.paymentStorage.getTransactionByOrderId(orderId);\n  }\n\n  getUserTransactions(userId: string, limit?: number): Promise<Transaction[]> {\n    return this.paymentStorage.getUserTransactions(userId, limit);\n  }\n\n  createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    return this.paymentStorage.createTransaction(transaction);\n  }\n\n  updateTransaction(id: string, data: Partial<InsertTransaction>): Promise<Transaction | undefined> {\n    return this.paymentStorage.updateTransaction(id, data);\n  }\n\n  getThread(id: string): Promise<DiscussionThread | undefined> {\n    return this.discussionStorage.getThread(id);\n  }\n\n  getThreads(filters?: { topicId?: string; limit?: number; offset?: number }): Promise<DiscussionThread[]> {\n    return this.discussionStorage.getThreads(filters);\n  }\n\n  createThread(thread: InsertDiscussionThread): Promise<DiscussionThread> {\n    return this.discussionStorage.createThread(thread);\n  }\n\n  getPost(id: string): Promise<DiscussionPost | undefined> {\n    return this.discussionStorage.getPost(id);\n  }\n\n  getThreadPosts(threadId: string): Promise<DiscussionPost[]> {\n    return this.discussionStorage.getThreadPosts(threadId);\n  }\n\n  createPost(post: InsertDiscussionPost): Promise<DiscussionPost> {\n    return this.discussionStorage.createPost(post);\n  }\n\n  updatePost(id: string, data: Partial<InsertDiscussionPost>): Promise<DiscussionPost | undefined> {\n    return this.discussionStorage.updatePost(id, data);\n  }\n\n  incrementPostUpvotes(id: string, amount: number): Promise<void> {\n    return this.discussionStorage.incrementPostUpvotes(id, amount);\n  }\n\n  getUserPerformanceStats(userId: string): Promise<{\n    totalTests: number;\n    averageScore: number;\n    averagePercentage: number;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    unanswered: number;\n    averageTimeTaken: number;\n    accuracy: number;\n  }> {\n    return this.discussionStorage.getUserPerformanceStats(userId);\n  }\n\n  getTopicWisePerformance(userId: string): Promise<Array<{\n    topicId: string;\n    topicName: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>> {\n    return this.discussionStorage.getTopicWisePerformance(userId);\n  }\n\n  getDifficultyWisePerformance(userId: string): Promise<Array<{\n    difficulty: string;\n    totalQuestions: number;\n    correctAnswers: number;\n    incorrectAnswers: number;\n    accuracy: number;\n  }>> {\n    return this.discussionStorage.getDifficultyWisePerformance(userId);\n  }\n\n  getPerformanceTrend(userId: string, limit?: number): Promise<Array<{\n    attemptId: string;\n    testTitle: string;\n    score: number;\n    maxScore: number;\n    percentage: number;\n    submittedAt: Date;\n  }>> {\n    return this.discussionStorage.getPerformanceTrend(userId, limit);\n  }\n}\n\nexport const storage = new Storage();\n","size_bytes":19281},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { passport } from \"./auth\";\n// Import workers for background processing\nimport \"./workers/test-scoring.worker.js\";\nimport \"./workers/analytics.worker.js\";\n\nconst app = express();\n\n// Trust proxy - Required for rate limiting to work correctly behind Replit's reverse proxy\n// Use 1 to trust only the first proxy (Replit's reverse proxy) for security\napp.set('trust proxy', 1);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"gate-and-tech-secret-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\",\n    },\n  })\n);\n\n// Initialize Passport\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2909},"server/routes/topic.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { can } from \"../middleware/permissions\";\nimport { insertSubjectSchema, insertTopicSchema } from \"@shared/schema\";\n\nexport function topicRoutes(app: Express): void {\n  // ============================================================================\n  // SUBJECT ROUTES\n  // ============================================================================\n\n  // Get all subjects\n  app.get(\"/api/subjects\", async (req: Request, res: Response) => {\n    try {\n      const subjects = await storage.getSubjects();\n      res.json(subjects);\n    } catch (error) {\n      console.error(\"Error fetching subjects:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get single subject\n  app.get(\"/api/subjects/:id\", async (req: Request, res: Response) => {\n    try {\n      const subject = await storage.getSubject(req.params.id);\n      if (!subject) {\n        return res.status(404).json({ error: \"Subject not found\" });\n      }\n      res.json(subject);\n    } catch (error) {\n      console.error(\"Error fetching subject:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create subject (requires create:Topic permission - admin only)\n  app.post(\"/api/subjects\", can('create', 'Topic'), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertSubjectSchema.parse(req.body);\n      const subject = await storage.createSubject(validatedData);\n      res.status(201).json(subject);\n    } catch (error: any) {\n      console.error(\"Error creating subject:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ error: \"Invalid subject data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update subject (requires update:Topic permission - admin only)\n  app.patch(\"/api/subjects/:id\", can('update', 'Topic'), async (req: Request, res: Response) => {\n    try {\n      const subject = await storage.updateSubject(req.params.id, req.body);\n      if (!subject) {\n        return res.status(404).json({ error: \"Subject not found\" });\n      }\n      res.json(subject);\n    } catch (error) {\n      console.error(\"Error updating subject:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Delete subject (requires delete:Topic permission - admin only)\n  app.delete(\"/api/subjects/:id\", can('delete', 'Topic'), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteSubject(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting subject:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ============================================================================\n  // TOPIC ROUTES\n  // ============================================================================\n\n  // Get all topics\n  app.get(\"/api/topics\", async (req: Request, res: Response) => {\n    try {\n      const { subjectId } = req.query;\n      let topics;\n      \n      if (subjectId && typeof subjectId === 'string') {\n        topics = await storage.getTopicsBySubject(subjectId);\n      } else {\n        topics = await storage.getTopics();\n      }\n      \n      res.json(topics);\n    } catch (error) {\n      console.error(\"Error fetching topics:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get single topic\n  app.get(\"/api/topics/:id\", async (req: Request, res: Response) => {\n    try {\n      const topic = await storage.getTopic(req.params.id);\n      if (!topic) {\n        return res.status(404).json({ error: \"Topic not found\" });\n      }\n      res.json(topic);\n    } catch (error) {\n      console.error(\"Error fetching topic:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Create topic (requires create:Topic permission)\n  app.post(\"/api/topics\", can('create', 'Topic'), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertTopicSchema.parse(req.body);\n      const topic = await storage.createTopic(validatedData);\n      res.status(201).json(topic);\n    } catch (error: any) {\n      console.error(\"Error creating topic:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ error: \"Invalid topic data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update topic (requires update:Topic permission)\n  app.patch(\"/api/topics/:id\", can('update', 'Topic'), async (req: Request, res: Response) => {\n    try {\n      const topic = await storage.updateTopic(req.params.id, req.body);\n      if (!topic) {\n        return res.status(404).json({ error: \"Topic not found\" });\n      }\n      res.json(topic);\n    } catch (error) {\n      console.error(\"Error updating topic:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Delete topic (requires delete:Topic permission)\n  app.delete(\"/api/topics/:id\", can('delete', 'Topic'), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteTopic(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting topic:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}\n","size_bytes":5462},"client/src/components/examples/FeaturesSection.tsx":{"content":"import FeaturesSection from '../FeaturesSection';\n\nexport default function FeaturesSectionExample() {\n  return <FeaturesSection />;\n}\n","size_bytes":134},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"server/routes/auth.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { passport, requireAuth } from \"../auth\";\nimport bcrypt from \"bcrypt\";\nimport crypto from \"crypto\";\nimport { registerUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport speakeasy from \"speakeasy\";\nimport qrcode from \"qrcode\";\nimport { authLimiter } from \"../middleware/rate-limit.js\";\n\n// Extend session types to include pending2FA\ndeclare module 'express-session' {\n  interface SessionData {\n    pending2FA?: {\n      userId: string;\n      timestamp: number;\n    };\n  }\n}\n\nexport function authRoutes(app: Express): void {\n  // ============================================================================\n  // AUTHENTICATION ROUTES\n  // ============================================================================\n\n  // Register new user\n  app.post(\"/api/auth/register\", authLimiter, async (req: Request, res: Response) => {\n    try {\n      // Only allow name, email, and password from user input\n      const validatedData = registerUserSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Email already registered\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(validatedData.password, 10);\n\n      // Create user with server-controlled defaults\n      const user = await storage.createUser({\n        name: validatedData.name,\n        email: validatedData.email,\n        passwordHash,\n        authProvider: \"credentials\", // Server-controlled\n        role: \"student\", // Server-controlled - always student on registration\n        theme: \"system\", // Server-controlled default\n      });\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userWithoutPassword } = user;\n\n      // Log in the user automatically\n      req.login(user, (err) => {\n        if (err) {\n          return res.status(500).json({ error: \"Failed to log in after registration\" });\n        }\n        res.status(201).json({ user: userWithoutPassword });\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Login\n  app.post(\"/api/auth/login\", authLimiter, (req: Request, res: Response, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ error: \"Internal server error\" });\n      }\n      if (!user) {\n        return res.status(401).json({ error: info?.message || \"Invalid credentials\" });\n      }\n\n      // Check if user has 2FA enabled\n      if (user.twofaEnabled) {\n        // Store pending 2FA authentication in session (password already verified)\n        req.session.pending2FA = {\n          userId: user.id,\n          timestamp: Date.now(),\n        };\n        \n        // Return 2FA required response (don't log in yet)\n        return res.json({ \n          requires2FA: true, \n          email: user.email \n        });\n      }\n\n      // No 2FA, proceed with login\n      req.login(user, (err) => {\n        if (err) {\n          return res.status(500).json({ error: \"Failed to log in\" });\n        }\n        const { passwordHash: _, ...userWithoutPassword } = user;\n        res.json({ user: userWithoutPassword });\n      });\n    })(req, res, next);\n  });\n\n  // Logout\n  app.post(\"/api/auth/logout\", (req: Request, res: Response) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ error: \"Failed to log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", (req: Request, res: Response) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n    const user = req.user as any;\n    const { passwordHash: _, ...userWithoutPassword } = user;\n    res.json({ user: userWithoutPassword });\n  });\n\n  // OAuth Routes - Google\n  app.get(\"/api/auth/google\", passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] }));\n  \n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { \n      failureRedirect: \"/login\",\n      successRedirect: \"/dashboard\"\n    })\n  );\n\n  // OAuth Routes - GitHub  \n  app.get(\"/api/auth/github\", passport.authenticate(\"github\", { scope: [\"user:email\"] }));\n  \n  app.get(\"/api/auth/github/callback\",\n    passport.authenticate(\"github\", { \n      failureRedirect: \"/login\",\n      successRedirect: \"/dashboard\"\n    })\n  );\n\n  // ============================================================================\n  // 2FA ROUTES\n  // ============================================================================\n\n  // Setup 2FA - Generate secret and QR code\n  app.post(\"/api/auth/2fa/setup\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as any;\n\n      // Generate secret\n      const secret = speakeasy.generateSecret({\n        name: `GATE And Tech (${user.email})`,\n        length: 32,\n      });\n\n      // Generate QR code\n      const qrCodeUrl = await qrcode.toDataURL(secret.otpauth_url!);\n\n      res.json({\n        secret: secret.base32,\n        qrCode: qrCodeUrl,\n      });\n    } catch (error) {\n      console.error(\"2FA setup error:\", error);\n      res.status(500).json({ error: \"Failed to setup 2FA\" });\n    }\n  });\n\n  // Verify and enable 2FA\n  app.post(\"/api/auth/2fa/verify\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as any;\n      const { token, secret } = req.body;\n\n      if (!token || !secret) {\n        return res.status(400).json({ error: \"Token and secret are required\" });\n      }\n\n      // Verify token\n      const verified = speakeasy.totp.verify({\n        secret: secret,\n        encoding: \"base32\",\n        token: token,\n        window: 2, // Allow 2 time steps before/after\n      });\n\n      if (!verified) {\n        return res.status(400).json({ error: \"Invalid verification code\" });\n      }\n\n      // Enable 2FA for user\n      await storage.updateUser(user.id, {\n        twofaEnabled: true,\n        twofaSecret: secret,\n      });\n\n      res.json({ message: \"2FA enabled successfully\" });\n    } catch (error) {\n      console.error(\"2FA verification error:\", error);\n      res.status(500).json({ error: \"Failed to verify 2FA\" });\n    }\n  });\n\n  // Disable 2FA\n  app.post(\"/api/auth/2fa/disable\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as any;\n      const { password } = req.body;\n\n      if (!password) {\n        return res.status(400).json({ error: \"Password is required to disable 2FA\" });\n      }\n\n      // Verify password for security\n      const currentUser = await storage.getUser(user.id);\n      if (!currentUser || !currentUser.passwordHash) {\n        return res.status(400).json({ error: \"Cannot disable 2FA\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, currentUser.passwordHash);\n      if (!validPassword) {\n        return res.status(401).json({ error: \"Invalid password\" });\n      }\n\n      // Disable 2FA\n      await storage.updateUser(user.id, {\n        twofaEnabled: false,\n        twofaSecret: null,\n      });\n\n      res.json({ message: \"2FA disabled successfully\" });\n    } catch (error) {\n      console.error(\"2FA disable error:\", error);\n      res.status(500).json({ error: \"Failed to disable 2FA\" });\n    }\n  });\n\n  // Verify 2FA token during login\n  app.post(\"/api/auth/2fa/login\", async (req: Request, res: Response) => {\n    try {\n      const { email, token } = req.body;\n\n      if (!email || !token) {\n        return res.status(400).json({ error: \"Email and token are required\" });\n      }\n\n      // Check for pending 2FA session (password already verified)\n      const pending2FA = req.session.pending2FA;\n      if (!pending2FA) {\n        return res.status(401).json({ error: \"No pending 2FA authentication. Please login with password first.\" });\n      }\n\n      // Check if pending session is expired (5 minutes)\n      const FIVE_MINUTES = 5 * 60 * 1000;\n      if (Date.now() - pending2FA.timestamp > FIVE_MINUTES) {\n        delete req.session.pending2FA;\n        return res.status(401).json({ error: \"2FA session expired. Please login again.\" });\n      }\n\n      // Get user by pending session userId (not email, for security)\n      const user = await storage.getUser(pending2FA.userId);\n      if (!user || !user.twofaEnabled || !user.twofaSecret) {\n        delete req.session.pending2FA;\n        return res.status(400).json({ error: \"2FA not enabled for this account\" });\n      }\n\n      // Verify email matches (additional security check)\n      if (user.email !== email) {\n        delete req.session.pending2FA;\n        return res.status(401).json({ error: \"Invalid 2FA request\" });\n      }\n\n      // Verify token\n      const verified = speakeasy.totp.verify({\n        secret: user.twofaSecret,\n        encoding: \"base32\",\n        token: token,\n        window: 2,\n      });\n\n      if (!verified) {\n        return res.status(400).json({ error: \"Invalid 2FA code\" });\n      }\n\n      // Clear pending 2FA session\n      delete req.session.pending2FA;\n\n      // Log in the user\n      req.login(user, (err) => {\n        if (err) {\n          return res.status(500).json({ error: \"Failed to log in\" });\n        }\n        const { passwordHash: _, ...userWithoutPassword } = user;\n        res.json({ user: userWithoutPassword });\n      });\n    } catch (error) {\n      console.error(\"2FA login error:\", error);\n      res.status(500).json({ error: \"Failed to verify 2FA\" });\n    }\n  });\n\n  // ============================================================================\n  // PASSWORD RESET ROUTES\n  // ============================================================================\n\n  // Request password reset - generate token\n  app.post(\"/api/auth/forgot-password\", authLimiter, async (req: Request, res: Response) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      \n      // Always return success even if user doesn't exist (security best practice)\n      if (!user) {\n        return res.json({ \n          message: \"If an account exists with that email, a password reset link has been sent.\" \n        });\n      }\n\n      // Generate reset token (cryptographically secure random string)\n      const resetToken = crypto.randomBytes(32).toString('hex');\n      \n      // Token expires in 1 hour\n      const expiresAt = new Date();\n      expiresAt.setHours(expiresAt.getHours() + 1);\n\n      // Delete any existing reset tokens for this user\n      await storage.deleteUserPasswordResetTokens(user.id);\n\n      // Create new reset token\n      await storage.createPasswordResetToken(user.id, resetToken, expiresAt);\n\n      // TODO: Send email with reset link\n      // For development only - log the token (NEVER expose in production)\n      if (process.env.NODE_ENV === 'development') {\n        console.log('==================== PASSWORD RESET TOKEN (DEV ONLY) ====================');\n        console.log(`Email: ${email}`);\n        console.log(`Token: ${resetToken}`);\n        console.log(`Reset link: http://localhost:5000/reset-password?token=${resetToken}`);\n        console.log('========================================================================');\n      }\n\n      res.json({ \n        message: \"If an account exists with that email, a password reset link has been sent.\"\n      });\n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ error: \"Failed to process password reset request\" });\n    }\n  });\n\n  // Reset password with token\n  app.post(\"/api/auth/reset-password\", authLimiter, async (req: Request, res: Response) => {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        return res.status(400).json({ error: \"Token and new password are required\" });\n      }\n\n      // Validate password length\n      if (password.length < 6) {\n        return res.status(400).json({ error: \"Password must be at least 6 characters\" });\n      }\n\n      // Get reset token\n      const resetToken = await storage.getPasswordResetToken(token);\n      \n      if (!resetToken) {\n        return res.status(400).json({ error: \"Invalid or expired reset token\" });\n      }\n\n      // Check if token is expired\n      if (new Date() > resetToken.expiresAt) {\n        await storage.deletePasswordResetToken(token);\n        return res.status(400).json({ error: \"Reset token has expired\" });\n      }\n\n      // Hash new password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Update user's password\n      await storage.updateUser(resetToken.userId, { passwordHash });\n\n      // Delete the used reset token\n      await storage.deletePasswordResetToken(token);\n\n      res.json({ message: \"Password has been reset successfully\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ error: \"Failed to reset password\" });\n    }\n  });\n}\n","size_bytes":13382},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest, getQueryFn } from \"@/lib/queryClient\";\nimport type { User, InsertUser } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<{ requires2FA?: boolean; email?: string; user?: User }>;\n  register: (data: { name: string; email: string; password: string }) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshUser: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const queryClient = useQueryClient();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Fetch current user\n  const { data, isLoading } = useQuery<{ user: User } | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const user = data?.user || null;\n\n  useEffect(() => {\n    setIsAuthenticated(!!user);\n  }, [user]);\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (data: { name: string; email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setIsAuthenticated(false);\n    },\n  });\n\n  const login = async (email: string, password: string) => {\n    const result = await loginMutation.mutateAsync({ email, password });\n    return result;\n  };\n\n  const register = async (data: { name: string; email: string; password: string }) => {\n    await registerMutation.mutateAsync(data);\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const refreshUser = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        login,\n        register,\n        logout,\n        refreshUser,\n        isAuthenticated,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3138},"client/src/components/examples/YouTubeSection.tsx":{"content":"import YouTubeSection from '../YouTubeSection';\n\nexport default function YouTubeSectionExample() {\n  return <YouTubeSection />;\n}\n","size_bytes":130},"client/src/pages/TestForm.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Loader2, Plus, X } from \"lucide-react\";\nimport type { Test, Question, Topic } from \"@shared/schema\";\n\nconst testFormSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters\"),\n  description: z.string().optional(),\n  duration: z.coerce.number().int().positive(\"Duration must be positive\"),\n  totalMarks: z.coerce.number().int().positive(\"Total marks must be positive\"),\n  status: z.enum([\"draft\", \"published\", \"archived\"]),\n  isPro: z.boolean(),\n  scheduledAt: z.string().optional(),\n  questionIds: z.array(z.string()).min(1, \"Select at least one question\"),\n});\n\ntype TestFormData = z.infer<typeof testFormSchema>;\n\nexport default function TestForm() {\n  const [, params] = useRoute(\"/tests/:id/edit\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const testId = params?.id;\n  const isEdit = !!testId;\n  \n  const [selectedQuestions, setSelectedQuestions] = useState<string[]>([]);\n  const [topicFilter, setTopicFilter] = useState<string>(\"all\");\n\n  const { data: test, isLoading: isLoadingTest } = useQuery<Test>({\n    queryKey: [\"/api/tests\", testId],\n    enabled: isEdit,\n  });\n\n  const { data: questions } = useQuery<Question[]>({\n    queryKey: [\"/api/questions\", topicFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (topicFilter !== \"all\") params.append(\"topicId\", topicFilter);\n      const response = await fetch(`/api/questions?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch questions\");\n      return response.json();\n    },\n  });\n\n  const { data: topics } = useQuery<Topic[]>({\n    queryKey: [\"/api/topics\"],\n  });\n\n  const form = useForm<TestFormData>({\n    resolver: zodResolver(testFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      duration: 60,\n      totalMarks: 100,\n      status: \"draft\",\n      isPro: false,\n      scheduledAt: \"\",\n      questionIds: [],\n    },\n  });\n\n  useEffect(() => {\n    if (test) {\n      form.reset({\n        title: test.title,\n        description: test.description || \"\",\n        duration: test.duration,\n        totalMarks: test.totalMarks,\n        status: test.status,\n        isPro: test.isPro,\n        scheduledAt: test.scheduledAt ? new Date(test.scheduledAt).toISOString().slice(0, 16) : \"\",\n        questionIds: [],\n      });\n    }\n  }, [test, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: TestFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      toast({\n        title: \"Success\",\n        description: \"Test created successfully\",\n      });\n      navigate(\"/tests\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: TestFormData) => {\n      const response = await apiRequest(\"PATCH\", `/api/tests/${testId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\", testId] });\n      toast({\n        title: \"Success\",\n        description: \"Test updated successfully\",\n      });\n      navigate(\"/tests\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: TestFormData) => {\n    const formData = {\n      ...data,\n      questionIds: selectedQuestions,\n      scheduledAt: data.scheduledAt ? new Date(data.scheduledAt).toISOString() : undefined,\n    };\n\n    if (isEdit) {\n      updateMutation.mutate(formData);\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const toggleQuestion = (questionId: string) => {\n    setSelectedQuestions(prev =>\n      prev.includes(questionId)\n        ? prev.filter(id => id !== questionId)\n        : [...prev, questionId]\n    );\n  };\n\n  if (isEdit && isLoadingTest) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 max-w-5xl\">\n      <h1 className=\"text-3xl font-bold mb-8\" data-testid=\"text-page-title\">\n        {isEdit ? \"Edit Test\" : \"Create Test\"}\n      </h1>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Details</CardTitle>\n              <CardDescription>Basic information about the test</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"GATE 2024 Mock Test 1\" {...field} data-testid=\"input-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Full-length mock test covering all topics\"\n                        {...field}\n                        data-testid=\"textarea-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"duration\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Duration (minutes)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" {...field} data-testid=\"input-duration\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"totalMarks\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Total Marks</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" {...field} data-testid=\"input-totalMarks\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"draft\">Draft</SelectItem>\n                          <SelectItem value=\"published\">Published</SelectItem>\n                          <SelectItem value=\"archived\">Archived</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"scheduledAt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Schedule (optional)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"datetime-local\"\n                          {...field}\n                          data-testid=\"input-scheduledAt\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"isPro\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Pro Only</FormLabel>\n                      <FormDescription>\n                        Restrict this test to Pro subscribers\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-isPro\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Select Questions</CardTitle>\n              <CardDescription>Choose questions to include in this test</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-4\">\n                <Select value={topicFilter} onValueChange={setTopicFilter}>\n                  <SelectTrigger className=\"w-[200px]\" data-testid=\"select-topic-filter\">\n                    <SelectValue placeholder=\"Filter by topic\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Topics</SelectItem>\n                    {topics?.map((topic) => (\n                      <SelectItem key={topic.id} value={topic.id}>\n                        {topic.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {questions?.map((question) => (\n                  <div\n                    key={question.id}\n                    className=\"flex items-start space-x-3 p-3 border rounded-md hover-elevate\"\n                    data-testid={`question-item-${question.id}`}\n                  >\n                    <Checkbox\n                      id={question.id}\n                      checked={selectedQuestions.includes(question.id)}\n                      onCheckedChange={() => toggleQuestion(question.id)}\n                      data-testid={`checkbox-question-${question.id}`}\n                    />\n                    <label\n                      htmlFor={question.id}\n                      className=\"flex-1 text-sm cursor-pointer\"\n                    >\n                      <div className=\"font-medium\">{question.content.substring(0, 100)}...</div>\n                      <div className=\"text-muted-foreground text-xs mt-1\">\n                        {question.type} • {question.difficulty} • {question.marks} marks\n                      </div>\n                    </label>\n                  </div>\n                ))}\n              </div>\n\n              {selectedQuestions.length > 0 && (\n                <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm font-medium\" data-testid=\"text-selected-count\">\n                    {selectedQuestions.length} question(s) selected\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"flex gap-4\">\n            <Button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {(createMutation.isPending || updateMutation.isPending) && (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              )}\n              {isEdit ? \"Update Test\" : \"Create Test\"}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => navigate(\"/tests\")}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":14053},"server/routes/user.routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth\";\nimport { updateUserProfileSchema, adminUpdateUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport function userRoutes(app: Express): void {\n  // ============================================================================\n  // USER ROUTES\n  // ============================================================================\n\n  // Get user profile\n  app.get(\"/api/users/:id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const { passwordHash: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update user profile\n  app.patch(\"/api/users/:id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.user as any;\n      \n      // Users can only update their own profile unless they're admin\n      if (currentUser.id !== req.params.id && currentUser.role !== \"admin\") {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      // Validate input based on user role\n      let validatedData: any;\n      if (currentUser.role === \"admin\") {\n        // Admins can update additional fields\n        validatedData = adminUpdateUserSchema.parse(req.body);\n      } else {\n        // Regular users can only update safe fields\n        validatedData = updateUserProfileSchema.parse(req.body);\n      }\n\n      const updatedUser = await storage.updateUser(req.params.id, validatedData as any);\n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const { passwordHash: _, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}\n","size_bytes":2305},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 6% 97%;\n\n  --foreground: 217 33% 17%;\n\n  --border: 217 20% 88%;\n\n  --card: 210 6% 95%;\n\n  --card-foreground: 217 33% 17%;\n\n  --card-border: 217 20% 85%;\n\n  --sidebar: 210 6% 93%;\n\n  --sidebar-foreground: 217 33% 17%;\n\n  --sidebar-border: 217 20% 82%;\n\n  --sidebar-primary: 160 84% 39%;\n\n  --sidebar-primary-foreground: 160 84% 98%;\n\n  --sidebar-accent: 210 8% 88%;\n\n  --sidebar-accent-foreground: 217 33% 17%;\n\n  --sidebar-ring: 160 84% 39%;\n\n  --popover: 210 6% 91%;\n\n  --popover-foreground: 217 33% 17%;\n\n  --popover-border: 217 20% 80%;\n\n  --primary: 160 84% 39%;\n\n  --primary-foreground: 160 84% 98%;\n\n  --secondary: 210 8% 86%;\n\n  --secondary-foreground: 217 33% 17%;\n\n  --muted: 210 10% 88%;\n\n  --muted-foreground: 215 20% 45%;\n\n  --accent: 210 12% 90%;\n\n  --accent-foreground: 217 33% 17%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 217 33% 65%;\n  --ring: 160 84% 39%;\n  --chart-1: 160 84% 35%;\n  --chart-2: 172 66% 42%;\n  --chart-3: 142 76% 32%;\n  --chart-4: 38 92% 45%;\n  --chart-5: 190 70% 38%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(160 84% 39% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(160 84% 39% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(160 84% 39% / 0.06), 0px 1px 2px -1px hsl(160 84% 39% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(160 84% 39% / 0.08), 0px 2px 4px -1px hsl(160 84% 39% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(160 84% 39% / 0.10), 0px 3px 6px -2px hsl(160 84% 39% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(160 84% 39% / 0.12), 0px 4px 8px -2px hsl(160 84% 39% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(160 84% 39% / 0.15), 0px 8px 12px -4px hsl(160 84% 39% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(160 84% 39% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 217 33% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 20% 20%;\n\n  --card: 217 33% 13%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 20% 22%;\n\n  --sidebar: 217 33% 15%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 20% 24%;\n\n  --sidebar-primary: 160 84% 39%;\n\n  --sidebar-primary-foreground: 160 84% 98%;\n\n  --sidebar-accent: 217 25% 20%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 160 84% 39%;\n\n  --popover: 217 33% 17%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 20% 26%;\n\n  --primary: 160 84% 39%;\n\n  --primary-foreground: 160 84% 98%;\n\n  --secondary: 217 25% 22%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 20% 19%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 18% 21%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 217 33% 35%;\n  --ring: 160 84% 39%;\n  --chart-1: 160 84% 50%;\n  --chart-2: 172 66% 58%;\n  --chart-3: 142 76% 48%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 190 70% 52%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(160 84% 39% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(160 84% 39% / 0.20);\n  --shadow-sm: 0px 2px 4px 0px hsl(160 84% 39% / 0.15), 0px 1px 2px -1px hsl(160 84% 39% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(160 84% 39% / 0.20), 0px 2px 4px -1px hsl(160 84% 39% / 0.15);\n  --shadow-md: 0px 6px 12px -2px hsl(160 84% 39% / 0.25), 0px 3px 6px -2px hsl(160 84% 39% / 0.20);\n  --shadow-lg: 0px 10px 20px -4px hsl(160 84% 39% / 0.30), 0px 4px 8px -2px hsl(160 84% 39% / 0.20);\n  --shadow-xl: 0px 20px 30px -6px hsl(160 84% 39% / 0.35), 0px 8px 12px -4px hsl(160 84% 39% / 0.25);\n  --shadow-2xl: 0px 25px 50px -12px hsl(160 84% 39% / 0.40);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9793},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/QuizDemo.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { useState, useEffect } from \"react\";\n\nexport default function QuizDemo() {\n  const [selectedOption, setSelectedOption] = useState<string | null>(null);\n  const [timeLeft, setTimeLeft] = useState(30);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft((prev) => (prev > 0 ? prev - 1 : 30));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const options = [\n    { id: \"A\", text: \"O(n)\" },\n    { id: \"B\", text: \"O(log n)\" },\n    { id: \"C\", text: \"O(n²)\" },\n    { id: \"D\", text: \"O(1)\" },\n  ];\n\n  return (\n    <section className=\"py-16 md:py-24 bg-accent/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Try 5 real exam questions right here →\n          </h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Experience the authentic exam simulation\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n          <Card className=\"p-8 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Question 1 of 3\n              </Badge>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-10 h-10 rounded-full border-2 border-chart-4 flex items-center justify-center\">\n                  <span className=\"text-sm font-bold text-chart-4\">{timeLeft}s</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-xl font-semibold mb-6\">\n                What is the time complexity of binary search?\n              </h3>\n\n              <div className=\"space-y-3\">\n                {options.map((option) => (\n                  <button\n                    key={option.id}\n                    onClick={() => {\n                      setSelectedOption(option.id);\n                      console.log(`Selected option: ${option.id}`);\n                    }}\n                    className={`w-full text-left p-4 rounded-lg border transition-all hover-elevate ${\n                      selectedOption === option.id\n                        ? \"border-primary bg-primary/10\"\n                        : \"border-border bg-card\"\n                    }`}\n                    data-testid={`button-option-${option.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\n                        selectedOption === option.id\n                          ? \"border-primary bg-primary\"\n                          : \"border-border\"\n                      }`}>\n                        {selectedOption === option.id && (\n                          <div className=\"w-2 h-2 rounded-full bg-primary-foreground\"></div>\n                        )}\n                      </div>\n                      <span className=\"font-medium\">{option.id}</span>\n                      <span className=\"text-muted-foreground\">{option.text}</span>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"relative\">\n            <Badge className=\"absolute -top-3 -right-3 z-10 shadow-lg\">\n              Live Demo\n            </Badge>\n            <div className=\"rounded-xl overflow-hidden border border-border shadow-xl\">\n              <div className=\"aspect-[4/3] bg-gradient-to-br from-card to-accent p-6\">\n                <div className=\"h-full bg-card/50 backdrop-blur-sm rounded-lg border border-border/30 p-6 space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"h-4 w-24 bg-muted rounded\"></div>\n                    <div className=\"h-8 w-8 rounded-full bg-chart-4/30\"></div>\n                  </div>\n                  <div className=\"h-6 w-3/4 bg-muted rounded\"></div>\n                  <div className=\"space-y-2\">\n                    {[1, 2, 3, 4].map((i) => (\n                      <div key={i} className=\"h-12 bg-muted/50 rounded\"></div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4507},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/YouTubeSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Check, Users, Video, Eye } from \"lucide-react\";\n\nexport default function YouTubeSection() {\n  return (\n    <section className=\"py-16 md:py-24\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Learn with Our YouTube Channel\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n            Join thousands of GATE aspirants on our YouTube channel for free tutorials, tips and comprehensive preparation strategies.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12\">\n          <Card className=\"p-8 text-center hover-elevate\">\n            <Users className=\"w-8 h-8 text-primary mx-auto mb-4\" />\n            <div className=\"text-4xl font-bold text-primary mb-2\">3.6K+</div>\n            <div className=\"text-sm text-muted-foreground\">Subscribers</div>\n          </Card>\n          \n          <Card className=\"p-8 text-center hover-elevate\">\n            <Video className=\"w-8 h-8 text-primary mx-auto mb-4\" />\n            <div className=\"text-4xl font-bold text-primary mb-2\">460+</div>\n            <div className=\"text-sm text-muted-foreground\">Videos</div>\n          </Card>\n          \n          <Card className=\"p-8 text-center hover-elevate\">\n            <Eye className=\"w-8 h-8 text-primary mx-auto mb-4\" />\n            <div className=\"text-4xl font-bold text-primary mb-2\">160K+</div>\n            <div className=\"text-sm text-muted-foreground\">Views</div>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-6\">\n            <h3 className=\"text-2xl font-bold\">Free GATE Preparation Content</h3>\n            <p className=\"text-muted-foreground\">\n              Our channel offers comprehensive tutorials, step-by-step solving strategies, discussions of previous year questions and expert tips to help you crack GATE confidently.\n            </p>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3\">\n                <Check className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                <span className=\"text-sm\">Weekly new video uploads</span>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Check className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                <span className=\"text-sm\">Topic-wise detailed explanations</span>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Check className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                <span className=\"text-sm\">Solutions to previous year questions</span>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Check className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                <span className=\"text-sm\">Study tips and strategies</span>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Check className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                <span className=\"text-sm\">Live doubt-solving sessions</span>\n              </div>\n            </div>\n\n            <Button className=\"shadow-lg shadow-primary/30\" data-testid=\"button-subscribe\">\n              Subscribe to Channel\n            </Button>\n          </div>\n\n          <div className=\"relative\">\n            <div className=\"aspect-video rounded-xl overflow-hidden border border-border shadow-xl\">\n              <div className=\"w-full h-full bg-gradient-to-br from-accent to-card flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"w-16 h-16 rounded-full bg-primary/20 flex items-center justify-center mx-auto\">\n                    <Play className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">YouTube Video Player</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nfunction Play({ className }: { className?: string }) {\n  return (\n    <svg className={className} fill=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path d=\"M8 5v14l11-7z\" />\n    </svg>\n  );\n}\n","size_bytes":4483},"client/src/components/test/CalculatorDialog.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface CalculatorDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function CalculatorDialog({ open, onOpenChange }: CalculatorDialogProps) {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Scientific Calculator</DialogTitle>\n          <DialogDescription>\n            Use this calculator for numerical calculations\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"p-4 bg-slate-100 dark:bg-slate-800 rounded text-center\">\n          <p className=\"text-sm text-muted-foreground\">Calculator functionality coming soon...</p>\n          <p className=\"text-xs text-muted-foreground mt-2\">For now, use your system calculator</p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":979},"server/storage/question.storage.ts":{"content":"import {\n  questions,\n  topics,\n  subjects,\n  questionTopics,\n  type Question,\n  type InsertQuestion,\n  type Topic,\n  type InsertTopic,\n  type Subject,\n  type InsertSubject,\n} from \"@shared/schema\";\nimport { db } from \"../db\";\nimport { eq, and, asc } from \"drizzle-orm\";\n\nexport class QuestionStorage {\n  async getQuestion(id: string): Promise<Question | undefined> {\n    const [question] = await db\n      .select()\n      .from(questions)\n      .where(eq(questions.id, id));\n    return question || undefined;\n  }\n\n  async getQuestions(filters?: {\n    topicId?: string;\n    difficulty?: string;\n    type?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Question[]> {\n    if (filters?.topicId) {\n      const conditions = [eq(questions.isPublished, true), eq(questionTopics.topicId, filters.topicId)];\n\n      if (filters?.difficulty) {\n        conditions.push(eq(questions.difficulty, filters.difficulty as any));\n      }\n\n      if (filters?.type) {\n        conditions.push(eq(questions.type, filters.type as any));\n      }\n\n      const results = await db\n        .select({ question: questions })\n        .from(questionTopics)\n        .innerJoin(questions, eq(questionTopics.questionId, questions.id))\n        .where(and(...conditions))\n        .limit(filters?.limit || 50)\n        .offset(filters?.offset || 0);\n\n      return results.map(r => r.question);\n    }\n\n    const conditions = [eq(questions.isPublished, true)];\n\n    if (filters?.difficulty) {\n      conditions.push(eq(questions.difficulty, filters.difficulty as any));\n    }\n    if (filters?.type) {\n      conditions.push(eq(questions.type, filters.type as any));\n    }\n\n    return await db\n      .select()\n      .from(questions)\n      .where(and(...conditions))\n      .limit(filters?.limit || 50)\n      .offset(filters?.offset || 0);\n  }\n\n  async createQuestion(insertQuestion: InsertQuestion): Promise<Question> {\n    const [question] = await db\n      .insert(questions)\n      .values(insertQuestion)\n      .returning();\n    return question;\n  }\n\n  async updateQuestion(id: string, data: Partial<InsertQuestion>): Promise<Question | undefined> {\n    const [question] = await db\n      .update(questions)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(questions.id, id))\n      .returning();\n    return question || undefined;\n  }\n\n  async deleteQuestion(id: string): Promise<void> {\n    await db.delete(questions).where(eq(questions.id, id));\n  }\n\n  async addQuestionTopic(questionId: string, topicId: string): Promise<void> {\n    await db.insert(questionTopics).values({ questionId, topicId });\n  }\n\n  async removeQuestionTopic(questionId: string, topicId: string): Promise<void> {\n    await db.delete(questionTopics)\n      .where(and(\n        eq(questionTopics.questionId, questionId),\n        eq(questionTopics.topicId, topicId)\n      ));\n  }\n\n  async getQuestionTopics(questionId: string): Promise<Topic[]> {\n    const results = await db\n      .select({ topic: topics })\n      .from(questionTopics)\n      .innerJoin(topics, eq(questionTopics.topicId, topics.id))\n      .where(eq(questionTopics.questionId, questionId));\n    return results.map(r => r.topic);\n  }\n\n  async getTopic(id: string): Promise<Topic | undefined> {\n    const [topic] = await db.select().from(topics).where(eq(topics.id, id));\n    return topic || undefined;\n  }\n\n  async getTopics(): Promise<Topic[]> {\n    return await db.select().from(topics).orderBy(asc(topics.name));\n  }\n\n  async createTopic(insertTopic: InsertTopic): Promise<Topic> {\n    const [topic] = await db\n      .insert(topics)\n      .values(insertTopic)\n      .returning();\n    return topic;\n  }\n\n  async getTopicsBySubject(subjectId: string): Promise<Topic[]> {\n    return await db\n      .select()\n      .from(topics)\n      .where(eq(topics.subjectId, subjectId))\n      .orderBy(asc(topics.name));\n  }\n\n  async updateTopic(id: string, data: Partial<InsertTopic>): Promise<Topic | undefined> {\n    const [topic] = await db\n      .update(topics)\n      .set(data)\n      .where(eq(topics.id, id))\n      .returning();\n    return topic || undefined;\n  }\n\n  async deleteTopic(id: string): Promise<void> {\n    await db.delete(topics).where(eq(topics.id, id));\n  }\n\n  async getSubject(id: string): Promise<Subject | undefined> {\n    const [subject] = await db.select().from(subjects).where(eq(subjects.id, id));\n    return subject || undefined;\n  }\n\n  async getSubjects(): Promise<Subject[]> {\n    return await db.select().from(subjects).orderBy(asc(subjects.displayOrder));\n  }\n\n  async createSubject(insertSubject: InsertSubject): Promise<Subject> {\n    const [subject] = await db\n      .insert(subjects)\n      .values(insertSubject)\n      .returning();\n    return subject;\n  }\n\n  async updateSubject(id: string, data: Partial<InsertSubject>): Promise<Subject | undefined> {\n    const [subject] = await db\n      .update(subjects)\n      .set(data)\n      .where(eq(subjects.id, id))\n      .returning();\n    return subject || undefined;\n  }\n\n  async deleteSubject(id: string): Promise<void> {\n    await db.delete(subjects).where(eq(subjects.id, id));\n  }\n}\n","size_bytes":5078},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/TakeTest.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Loader2, Calculator, BookOpen } from \"lucide-react\";\nimport { MarkdownRenderer } from \"@/components/MarkdownRenderer\";\nimport type { Test, Question, TestAttempt } from \"@shared/schema\";\nimport QuestionPalette from \"@/components/test/QuestionPalette\";\nimport TestInstructions from \"@/components/test/TestInstructions\";\nimport TestSummary from \"@/components/test/TestSummary\";\nimport CalculatorDialog from \"@/components/test/CalculatorDialog\";\n\ntype ViewState = \"instructions\" | \"test\" | \"summary\";\n\nexport default function TakeTest() {\n  const [, params] = useRoute(\"/tests/:id\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const testId = params?.id;\n\n  const [attemptId, setAttemptId] = useState<string | null>(null);\n  const [viewState, setViewState] = useState<ViewState>(\"instructions\");\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<Record<string, string>>({});\n  const [markedForReview, setMarkedForReview] = useState<Set<string>>(new Set());\n  const [visitedQuestions, setVisitedQuestions] = useState<Set<string>>(new Set());\n  const [timeLeft, setTimeLeft] = useState<number>(0);\n  const [showCalculator, setShowCalculator] = useState(false);\n  \n  // Refs for debouncing - avoids cleanup effect dependency issues\n  const saveTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const pendingSaveRef = useRef<{ questionId: string; answer: string; isMarked: boolean } | null>(null);\n  const attemptIdRef = useRef<string | null>(null);\n  const answersRef = useRef<Record<string, string>>({});\n  const markedForReviewRef = useRef<Set<string>>(new Set());\n  const currentQuestionIndexRef = useRef<number>(0);\n\n  const { data: test, isLoading: isLoadingTest } = useQuery<Test>({\n    queryKey: [\"/api/tests\", testId],\n  });\n\n  const { data: questions, isLoading: isLoadingQuestions } = useQuery<Question[]>({\n    queryKey: [\"/api/tests\", testId, \"questions\"],\n    enabled: !!testId,\n  });\n\n  const startTestMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/attempts\", { testId });\n      return response.json();\n    },\n    onSuccess: (attempt: TestAttempt) => {\n      setAttemptId(attempt.id);\n      setTimeLeft((test?.duration || 0) * 60);\n      setViewState(\"test\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const submitTestMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"PATCH\", `/api/attempts/${attemptId}/submit`, {\n        timeTaken: ((test?.duration || 0) * 60) - timeLeft,\n      });\n      return response.json();\n    },\n    onSuccess: (attempt: TestAttempt) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/attempts\"] });\n      navigate(`/attempts/${attempt.id}/results`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (viewState === \"test\" && timeLeft > 0) {\n      const timer = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            clearInterval(timer);\n            handleSubmit();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [viewState, timeLeft]);\n\n  // Sync refs with state to avoid stale closures\n  useEffect(() => {\n    attemptIdRef.current = attemptId;\n  }, [attemptId]);\n\n  useEffect(() => {\n    answersRef.current = answers;\n  }, [answers]);\n\n  useEffect(() => {\n    markedForReviewRef.current = markedForReview;\n  }, [markedForReview]);\n\n  useEffect(() => {\n    currentQuestionIndexRef.current = currentQuestionIndex;\n  }, [currentQuestionIndex]);\n\n  // Mark current question as visited\n  useEffect(() => {\n    if (viewState === \"test\" && questions && questions[currentQuestionIndex]) {\n      const questionId = questions[currentQuestionIndex].id;\n      setVisitedQuestions(prev => new Set(Array.from(prev).concat(questionId)));\n    }\n  }, [currentQuestionIndex, viewState, questions]);\n\n  // Cleanup: flush pending save on unmount only\n  useEffect(() => {\n    return () => {\n      if (saveTimerRef.current) {\n        clearTimeout(saveTimerRef.current);\n        // Flush the pending save using the ref data\n        if (pendingSaveRef.current && attemptIdRef.current) {\n          const { questionId, answer, isMarked } = pendingSaveRef.current;\n          fetch(`/api/attempts/${attemptIdRef.current}/responses`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              questionId,\n              selectedAnswer: answer,\n              isMarkedForReview: isMarked,\n              timeTaken: 0,\n            }),\n            keepalive: true,\n          }).catch(() => {\n            // Ignore errors during cleanup\n          });\n        }\n      }\n    };\n  }, []);\n\n  const saveResponseMutation = useMutation({\n    mutationFn: async (data: { questionId: string; selectedAnswer: string; isMarkedForReview: boolean }) => {\n      const response = await apiRequest(\"POST\", `/api/attempts/${attemptId}/responses`, {\n        ...data,\n        timeTaken: 0,\n      });\n      return response.json();\n    },\n  });\n\n  // Shared helper to flush any pending debounced save\n  const flushPendingSave = () => {\n    // Clear any pending timer\n    if (saveTimerRef.current) {\n      clearTimeout(saveTimerRef.current);\n      saveTimerRef.current = null;\n    }\n    \n    // If there's a pending save, flush it\n    if (pendingSaveRef.current && attemptIdRef.current) {\n      const { questionId, answer, isMarked } = pendingSaveRef.current;\n      saveResponseMutation.mutate({\n        questionId,\n        selectedAnswer: answer,\n        isMarkedForReview: isMarked,\n      });\n      pendingSaveRef.current = null;\n    }\n    // Even if pendingSaveRef is null (debounce already fired), ensure current answer is saved\n    // This handles the case where debounce fired but mutation might have failed or is pending\n    else if (attemptIdRef.current && questions && questions[currentQuestionIndexRef.current]) {\n      const currentQuestion = questions[currentQuestionIndexRef.current];\n      const currentAnswer = answersRef.current[currentQuestion.id] || \"\";\n      const isMarked = markedForReviewRef.current.has(currentQuestion.id);\n      \n      // Only save if there's an answer or mark status (avoid unnecessary saves)\n      if (currentAnswer || isMarked) {\n        saveResponseMutation.mutate({\n          questionId: currentQuestion.id,\n          selectedAnswer: currentAnswer,\n          isMarkedForReview: isMarked,\n        });\n      }\n    }\n  };\n\n  const handleAnswerChange = (questionId: string, value: string, isNumerical: boolean = false) => {\n    setAnswers((prev) => ({ ...prev, [questionId]: value }));\n    \n    // Clear existing timer if exists\n    if (saveTimerRef.current) {\n      clearTimeout(saveTimerRef.current);\n      saveTimerRef.current = null;\n    }\n    \n    if (attemptId) {\n      // For numerical inputs, debounce to avoid race conditions\n      if (isNumerical) {\n        // Store pending save data in ref\n        pendingSaveRef.current = {\n          questionId,\n          answer: value || \"\",\n          isMarked: markedForReview.has(questionId),\n        };\n        \n        // Set debounced timer\n        saveTimerRef.current = setTimeout(() => {\n          if (pendingSaveRef.current) {\n            const { questionId, answer, isMarked } = pendingSaveRef.current;\n            saveResponseMutation.mutate({\n              questionId,\n              selectedAnswer: answer,\n              isMarkedForReview: isMarked,\n            });\n            pendingSaveRef.current = null;\n          }\n          saveTimerRef.current = null;\n        }, 500);\n      } else {\n        // For MCQ, save immediately\n        saveResponseMutation.mutate({\n          questionId,\n          selectedAnswer: value || \"\",\n          isMarkedForReview: markedForReview.has(questionId),\n        });\n      }\n    }\n  };\n\n  const handleMarkForReview = (questionId: string) => {\n    setMarkedForReview((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(questionId)) {\n        newSet.delete(questionId);\n      } else {\n        newSet.add(questionId);\n      }\n      \n      // Save updated mark status\n      if (attemptId) {\n        saveResponseMutation.mutate({\n          questionId,\n          selectedAnswer: answers[questionId] || \"\",\n          isMarkedForReview: newSet.has(questionId),\n        });\n      }\n      \n      return newSet;\n    });\n  };\n\n  const handleClearResponse = () => {\n    const currentQuestion = questions?.[currentQuestionIndex];\n    if (currentQuestion) {\n      handleAnswerChange(currentQuestion.id, \"\");\n    }\n  };\n\n  const handleSaveAndNext = () => {\n    flushPendingSave();\n    \n    if (currentQuestionIndex < (questions?.length || 0) - 1) {\n      setCurrentQuestionIndex((prev) => prev + 1);\n    }\n  };\n\n  const handleMarkAndNext = () => {\n    const currentQuestion = questions?.[currentQuestionIndex];\n    if (currentQuestion) {\n      handleMarkForReview(currentQuestion.id);\n    }\n    handleSaveAndNext();\n  };\n\n  const handleSubmit = () => {\n    flushPendingSave();\n    submitTestMutation.mutate();\n  };\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const mins = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  const handleQuestionSelect = (index: number) => {\n    flushPendingSave();\n    setCurrentQuestionIndex(index);\n  };\n\n  if (isLoadingTest || isLoadingQuestions) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-slate-50 dark:bg-slate-950\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n      </div>\n    );\n  }\n\n  if (!test || !questions || questions.length === 0) {\n    return (\n      <div className=\"container mx-auto py-8 px-4 text-center\">\n        <p className=\"text-muted-foreground\">Test not found</p>\n      </div>\n    );\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n\n  // Instructions Page\n  if (viewState === \"instructions\") {\n    return (\n      <TestInstructions\n        test={test}\n        questions={questions}\n        onBegin={() => startTestMutation.mutate()}\n        isStarting={startTestMutation.isPending}\n      />\n    );\n  }\n\n  // Exam Summary Page\n  if (viewState === \"summary\") {\n    return (\n      <TestSummary\n        test={test}\n        questions={questions}\n        answers={answers}\n        markedForReview={markedForReview}\n        visitedQuestions={visitedQuestions}\n        timeLeft={timeLeft}\n        onBack={() => setViewState(\"test\")}\n        onSubmit={handleSubmit}\n        isSubmitting={submitTestMutation.isPending}\n      />\n    );\n  }\n\n  // Test Taking Interface\n  return (\n    <div className=\"min-h-screen bg-slate-100 dark:bg-slate-900\">\n      {/* Header */}\n      <div className=\"bg-blue-600 text-white\">\n        <div className=\"py-3 px-6 flex justify-between items-center\">\n          <h1 className=\"text-xl font-semibold\">{test.title}</h1>\n          <div className=\"flex items-center gap-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-blue-700\"\n              onClick={() => setShowCalculator(true)}\n              data-testid=\"button-calculator\"\n            >\n              <Calculator className=\"h-4 w-4 mr-2\" />\n              Calculator\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-blue-700\"\n              data-testid=\"button-instructions\"\n            >\n              <BookOpen className=\"h-4 w-4 mr-2\" />\n              Instructions\n            </Button>\n            <div className=\"text-sm font-medium\" data-testid=\"text-timer\">\n              Time Left: {formatTime(timeLeft)}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-blue-700 px-6 py-2 flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Badge variant=\"secondary\" className=\"bg-blue-800 text-white hover:bg-blue-800\">\n              Section\n            </Badge>\n            <span className=\"text-sm\">All Questions</span>\n          </div>\n          <div className=\"text-sm\">\n            Question Type: <strong>{currentQuestion.type === \"mcq_single\" ? \"MCQ\" : currentQuestion.type === \"mcq_multiple\" ? \"MSQ\" : \"Numerical\"}</strong>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex\">\n        {/* Main Question Area */}\n        <div className=\"flex-1 p-6\">\n          <Card className=\"mb-4\">\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-950 border-b\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Question No. {currentQuestionIndex + 1}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  Marks for correct answer: <span className=\"text-emerald-600 font-semibold\">{currentQuestion.marks}</span> | \n                  Negative Marks: <span className=\"text-red-600 font-semibold\">{currentQuestion.negativeMarks}</span>\n                </span>\n              </div>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"prose dark:prose-invert max-w-none mb-6\">\n                <MarkdownRenderer content={currentQuestion.content} />\n                {currentQuestion.imageUrl && (\n                  <img src={currentQuestion.imageUrl} alt=\"Question\" className=\"mt-4 rounded-lg max-w-md\" />\n                )}\n              </div>\n\n              {/* Answer Options */}\n              <div className=\"space-y-4\">\n                {currentQuestion.type === \"mcq_single\" && (\n                  <RadioGroup\n                    value={answers[currentQuestion.id] || \"\"}\n                    onValueChange={(value) => handleAnswerChange(currentQuestion.id, value)}\n                  >\n                    {(currentQuestion.options as any)?.map((option: any) => (\n                      <div key={option.id} className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-muted\">\n                        <RadioGroupItem value={option.id} id={option.id} data-testid={`radio-option-${option.id}`} />\n                        <Label htmlFor={option.id} className=\"flex-1 cursor-pointer prose dark:prose-invert prose-sm max-w-none\">\n                          <MarkdownRenderer content={option.text} />\n                        </Label>\n                      </div>\n                    ))}\n                  </RadioGroup>\n                )}\n\n                {currentQuestion.type === \"mcq_multiple\" && (\n                  <div className=\"space-y-3\">\n                    {(currentQuestion.options as any)?.map((option: any) => {\n                      const selectedOptions = answers[currentQuestion.id]?.split(\",\") || [];\n                      const isChecked = selectedOptions.includes(option.id);\n                      \n                      return (\n                        <div key={option.id} className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-muted\">\n                          <Checkbox\n                            id={option.id}\n                            checked={isChecked}\n                            onCheckedChange={(checked) => {\n                              const current = answers[currentQuestion.id]?.split(\",\").filter(Boolean) || [];\n                              const updated = checked\n                                ? [...current, option.id]\n                                : current.filter((id) => id !== option.id);\n                              handleAnswerChange(currentQuestion.id, updated.join(\",\"));\n                            }}\n                            data-testid={`checkbox-option-${option.id}`}\n                          />\n                          <Label htmlFor={option.id} className=\"flex-1 cursor-pointer prose dark:prose-invert prose-sm max-w-none\">\n                            <MarkdownRenderer content={option.text} />\n                          </Label>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n\n                {currentQuestion.type === \"numerical\" && (\n                  <div>\n                    <Label htmlFor=\"numerical-answer\">Enter your answer:</Label>\n                    <Input\n                      id=\"numerical-answer\"\n                      type=\"text\"\n                      value={answers[currentQuestion.id] || \"\"}\n                      onChange={(e) => handleAnswerChange(currentQuestion.id, e.target.value, true)}\n                      className=\"mt-2 max-w-xs\"\n                      placeholder=\"Type your answer\"\n                      data-testid=\"input-numerical-answer\"\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 justify-between\">\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleMarkAndNext}\n                data-testid=\"button-mark-review\"\n              >\n                Mark for Review & Next\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleClearResponse}\n                data-testid=\"button-clear\"\n              >\n                Clear Response\n              </Button>\n            </div>\n            \n            <div className=\"flex gap-3\">\n              <Button\n                onClick={handleSaveAndNext}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n                disabled={currentQuestionIndex >= questions.length - 1}\n                data-testid=\"button-save-next\"\n              >\n                Save & Next\n              </Button>\n              <Button\n                onClick={() => {\n                  flushPendingSave();\n                  setViewState(\"summary\");\n                }}\n                variant=\"outline\"\n                className=\"border-emerald-600 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-950\"\n                data-testid=\"button-submit\"\n              >\n                Submit\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Question Palette Sidebar */}\n        <QuestionPalette\n          questions={questions}\n          currentIndex={currentQuestionIndex}\n          answers={answers}\n          markedForReview={markedForReview}\n          visitedQuestions={visitedQuestions}\n          onQuestionSelect={handleQuestionSelect}\n        />\n      </div>\n\n      {/* Calculator Dialog */}\n      <CalculatorDialog\n        open={showCalculator}\n        onOpenChange={setShowCalculator}\n      />\n    </div>\n  );\n}\n","size_bytes":19801},"server/casl/abilities.ts":{"content":"import { AbilityBuilder, createMongoAbility, MongoAbility } from '@casl/ability';\nimport type { User, Permission, Role } from '@shared/schema';\n\n// Define the app actions and subjects\nexport type Action = 'create' | 'read' | 'update' | 'delete' | 'publish' | 'manage' | 'assign' | 'revoke' | 'export' | 'moderate';\nexport type Subject = 'Question' | 'Test' | 'Topic' | 'User' | 'Role' | 'Permission' | 'Analytics' | 'Discussion' | 'TestSeries' | 'Payment' | 'AuditLog' | 'all';\n\nexport type AppAbility = MongoAbility<[Action, Subject]>;\n\ninterface UserWithPermissions extends User {\n  permissions?: Permission[];\n}\n\n/**\n * Define abilities for a user based on their role and permissions\n */\nexport function defineAbilitiesFor(user: UserWithPermissions): AppAbility {\n  const { can, cannot, build } = new AbilityBuilder<AppAbility>(createMongoAbility);\n\n  if (!user) {\n    // Anonymous users have no permissions\n    return build();\n  }\n\n  // If user has custom permissions loaded, use them\n  if (user.permissions && user.permissions.length > 0) {\n    user.permissions.forEach((permission) => {\n      const action = permission.action as Action;\n      const subject = permission.subject as Subject;\n      \n      if (permission.conditions) {\n        // Apply with conditions\n        can(action, subject, permission.conditions as any);\n      } else {\n        // Apply without conditions\n        can(action, subject);\n      }\n    });\n  } else {\n    // Fallback to role-based permissions (legacy support)\n    switch (user.role) {\n      case 'admin':\n        // Admins can do everything\n        can('manage', 'all');\n        break;\n\n      case 'moderator':\n        // Moderators can manage questions and tests\n        can(['create', 'read', 'update', 'delete', 'publish'], 'Question');\n        can(['create', 'read', 'update', 'delete', 'publish'], 'Test');\n        can(['create', 'read', 'update', 'delete'], 'Topic');\n        can(['create', 'read', 'update', 'delete', 'moderate'], 'Discussion');\n        can('read', 'Analytics');\n        can('read', 'TestSeries');\n        can('read', 'User');\n        break;\n\n      case 'student':\n        // Students can read content and participate in discussions\n        can('read', ['Question', 'Test', 'Topic', 'TestSeries', 'Discussion', 'Analytics']);\n        can(['create', 'update'], 'Discussion');\n        // Students can read users (for viewing profiles)\n        can('read', 'User');\n        break;\n\n      default:\n        // No permissions for unknown roles\n        break;\n    }\n  }\n\n  return build();\n}\n\n/**\n * Helper to check if a user can perform an action\n */\nexport function canUser(user: UserWithPermissions, action: Action, subject: Subject): boolean {\n  const ability = defineAbilitiesFor(user);\n  return ability.can(action, subject);\n}\n\n/**\n * Serialize ability rules for client-side use\n */\nexport function serializeAbilities(user: UserWithPermissions) {\n  const ability = defineAbilitiesFor(user);\n  return ability.rules;\n}\n","size_bytes":2976},"client/src/components/MarkdownRenderer.tsx":{"content":"import ReactMarkdown from 'react-markdown';\nimport remarkMath from 'remark-math';\nimport remarkGfm from 'remark-gfm';\nimport rehypeKatex from 'rehype-katex';\nimport 'katex/dist/katex.min.css';\n\ninterface MarkdownRendererProps {\n  content: string;\n  className?: string;\n}\n\nexport function MarkdownRenderer({ content, className = \"\" }: MarkdownRendererProps) {\n  return (\n    <div className={`markdown-content prose prose-sm dark:prose-invert max-w-none ${className}`}>\n      <ReactMarkdown\n        remarkPlugins={[remarkMath, remarkGfm]}\n        rehypePlugins={[rehypeKatex]}\n        components={{\n          code({ node, inline, className, children, ...props }: any) {\n            const match = /language-(\\w+)/.exec(className || '');\n            return !inline && match ? (\n              <pre className=\"bg-slate-900 dark:bg-slate-950 text-slate-50 p-4 rounded-lg overflow-x-auto my-4\">\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              </pre>\n            ) : (\n              <code className=\"px-1.5 py-0.5 rounded bg-muted font-mono text-sm\" {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n    </div>\n  );\n}\n","size_bytes":1283},"client/src/pages/Shop.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Loader2, ShoppingCart, Clock, CheckCircle, BookOpen, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface TestSeries {\n  id: string;\n  title: string;\n  description: string;\n  price: number;\n  validityDays: number;\n  tier: string;\n  isActive: boolean;\n  testCount?: number;\n}\n\ninterface UserPurchase {\n  id: string;\n  testSeriesId: string;\n  expiryDate: string;\n  status: string;\n}\n\nexport default function Shop() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [purchasingSeriesId, setPurchasingSeriesId] = useState<string | null>(null);\n\n  const { data: testSeriesList, isLoading: isLoadingTestSeries, error: testSeriesError } = useQuery<TestSeries[]>({\n    queryKey: [\"/api/test-series\"],\n    enabled: true,\n  });\n\n  const { data: purchases, error: purchasesError } = useQuery<UserPurchase[]>({\n    queryKey: [\"/api/payments/purchases\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: razorpayConfig, isLoading: isLoadingRazorpay, error: razorpayError } = useQuery<{ key: string }>({\n    queryKey: [\"/api/payments/key\"],\n    enabled: true,\n  });\n\n  useEffect(() => {\n    if (razorpayError) {\n      toast({\n        title: \"Payment System Error\",\n        description: \"Payment system is currently unavailable\",\n        variant: \"destructive\",\n      });\n    }\n  }, [razorpayError, toast]);\n\n  useEffect(() => {\n    if (purchasesError && isAuthenticated) {\n      toast({\n        title: \"Error Loading Purchases\",\n        description: \"Unable to load your purchase history\",\n        variant: \"destructive\",\n      });\n    }\n  }, [purchasesError, isAuthenticated, toast]);\n\n  const handlePurchase = async (testSeries: TestSeries) => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    if (!razorpayConfig?.key) {\n      toast({\n        title: \"Payment System Unavailable\",\n        description: \"Unable to process payments at this time. Please try again later.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setPurchasingSeriesId(testSeries.id);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/payments/create-order\", {\n        testSeriesId: testSeries.id,\n        validityDays: testSeries.validityDays,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to create order\");\n      }\n\n      const data = await response.json();\n      const { orderId, amount } = data;\n\n      if (!orderId || !amount) {\n        throw new Error(\"Invalid order details received\");\n      }\n\n      const options = {\n        key: razorpayConfig?.key || \"\",\n        amount,\n        currency: \"INR\",\n        name: \"GATE And Tech\",\n        description: testSeries.title,\n        order_id: orderId,\n        handler: async (response: any) => {\n          try {\n            const verifyResponse = await apiRequest(\"POST\", \"/api/payments/verify\", response);\n\n            if (!verifyResponse.ok) {\n              const errorData = await verifyResponse.json();\n              throw new Error(errorData.error || \"Verification failed\");\n            }\n\n            // Invalidate purchases query to reflect new purchase\n            queryClient.invalidateQueries({ queryKey: [\"/api/payments/purchases\"] });\n\n            toast({\n              title: \"Purchase Successful!\",\n              description: `You now have access to ${testSeries.title}`,\n            });\n\n            setLocation(\"/my-purchases\");\n          } catch (error: any) {\n            toast({\n              title: \"Verification Failed\",\n              description: error.message || \"Please contact support\",\n              variant: \"destructive\",\n            });\n          }\n        },\n        prefill: {\n          name: user?.name,\n          email: user?.email,\n        },\n        theme: {\n          color: \"#10b981\",\n        },\n      };\n\n      const razorpay = new (window as any).Razorpay(options);\n      razorpay.open();\n    } catch (error: any) {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Unable to initiate payment\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setPurchasingSeriesId(null);\n    }\n  };\n\n  const isPurchased = (testSeriesId: string) => {\n    return purchases?.some(\n      (p) => p.testSeriesId === testSeriesId && p.status === \"active\"\n    );\n  };\n\n  if (isLoadingTestSeries || isLoadingRazorpay) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" data-testid=\"loader-shop\" />\n      </div>\n    );\n  }\n\n  if (testSeriesError) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive text-lg mb-4\" data-testid=\"text-error\">\n            Failed to load test series\n          </p>\n          <Button onClick={() => window.location.reload()} data-testid=\"button-retry\">\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const activeTestSeries = testSeriesList?.filter((ts) => ts.isActive) || [];\n  const freeTestSeries = activeTestSeries.filter((ts) => ts.tier === \"free\");\n  const paidTestSeries = activeTestSeries.filter((ts) => ts.tier !== \"free\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-shop-title\">Test Series Shop</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-shop-subtitle\">\n            Choose from our comprehensive test series to ace your GATE exam\n          </p>\n        </div>\n\n        {(razorpayError || !razorpayConfig?.key) && (\n          <Alert variant=\"destructive\" className=\"mb-6\" data-testid=\"alert-payment-unavailable\">\n            <XCircle className=\"h-4 w-4\" />\n            <AlertTitle>Payment System Unavailable</AlertTitle>\n            <AlertDescription>\n              Our payment system is currently unavailable. You can browse test series, but purchases are temporarily disabled.\n              Please try again later.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {freeTestSeries.length > 0 && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-semibold mb-6 flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-base\" data-testid=\"badge-free-section\">\n                Free Test Series\n              </Badge>\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {freeTestSeries.map((testSeries) => (\n                <Card key={testSeries.id} className=\"hover-elevate flex flex-col\" data-testid={`card-test-series-${testSeries.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between gap-2 mb-2\">\n                      <CardTitle className=\"text-xl\" data-testid={`text-title-${testSeries.id}`}>\n                        {testSeries.title}\n                      </CardTitle>\n                      <Badge variant=\"outline\" className=\"shrink-0\" data-testid={`badge-tier-${testSeries.id}`}>\n                        Free\n                      </Badge>\n                    </div>\n                    <CardDescription data-testid={`text-description-${testSeries.id}`}>\n                      {testSeries.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"flex-1\">\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <BookOpen className=\"w-4 h-4\" />\n                        <span data-testid={`text-test-count-${testSeries.id}`}>\n                          {testSeries.testCount || 0} Tests\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                  <CardFooter>\n                    <Button\n                      className=\"w-full\"\n                      variant=\"outline\"\n                      onClick={() => setLocation(\"/tests\")}\n                      data-testid={`button-view-tests-${testSeries.id}`}\n                    >\n                      View Tests\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {paidTestSeries.length > 0 && (\n          <div>\n            <h2 className=\"text-2xl font-semibold mb-6 flex items-center gap-2\">\n              <Badge className=\"text-base\" data-testid=\"badge-premium-section\">\n                Premium Test Series\n              </Badge>\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {paidTestSeries.map((testSeries) => {\n                const purchased = isPurchased(testSeries.id);\n                const isPurchasing = purchasingSeriesId === testSeries.id;\n\n                return (\n                  <Card\n                    key={testSeries.id}\n                    className={`hover-elevate flex flex-col ${\n                      testSeries.tier === \"pro\" ? \"border-primary\" : \"\"\n                    }`}\n                    data-testid={`card-test-series-${testSeries.id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between gap-2 mb-2\">\n                        <CardTitle className=\"text-xl\" data-testid={`text-title-${testSeries.id}`}>\n                          {testSeries.title}\n                        </CardTitle>\n                        <Badge\n                          variant={testSeries.tier === \"pro\" ? \"default\" : \"secondary\"}\n                          data-testid={`badge-tier-${testSeries.id}`}\n                        >\n                          {testSeries.tier === \"pro\" ? \"Pro\" : \"Premium\"}\n                        </Badge>\n                      </div>\n                      <CardDescription data-testid={`text-description-${testSeries.id}`}>\n                        {testSeries.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"flex-1\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-baseline gap-1\">\n                          <span className=\"text-3xl font-bold\" data-testid={`text-price-${testSeries.id}`}>\n                            ₹{testSeries.price}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-4 h-4\" />\n                            <span data-testid={`text-validity-${testSeries.id}`}>\n                              {testSeries.validityDays} days\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <BookOpen className=\"w-4 h-4\" />\n                            <span data-testid={`text-test-count-${testSeries.id}`}>\n                              {testSeries.testCount || 0} Tests\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                    <CardFooter>\n                      {purchased ? (\n                        <Button\n                          className=\"w-full\"\n                          variant=\"outline\"\n                          onClick={() => setLocation(\"/my-purchases\")}\n                          data-testid={`button-view-purchase-${testSeries.id}`}\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          Purchased\n                        </Button>\n                      ) : (\n                        <Button\n                          className=\"w-full\"\n                          onClick={() => handlePurchase(testSeries)}\n                          disabled={isPurchasing || !razorpayConfig?.key}\n                          data-testid={`button-purchase-${testSeries.id}`}\n                        >\n                          {isPurchasing ? (\n                            <>\n                              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                              Processing...\n                            </>\n                          ) : !razorpayConfig?.key ? (\n                            <>\n                              <XCircle className=\"w-4 h-4 mr-2\" />\n                              Payment Unavailable\n                            </>\n                          ) : (\n                            <>\n                              <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                              Purchase Now\n                            </>\n                          )}\n                        </Button>\n                      )}\n                    </CardFooter>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {activeTestSeries.length === 0 && (\n          <div className=\"text-center py-16\">\n            <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-series\">\n              No test series available at the moment\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14264},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Play } from \"lucide-react\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"relative min-h-[90vh] flex items-center pt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-24\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 items-center\">\n          <div className=\"space-y-8\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-bold tracking-tight leading-tight\">\n              Turn exam anxiety into{\" \"}\n              <span className=\"bg-gradient-to-r from-primary via-chart-2 to-chart-3 bg-clip-text text-transparent\">\n                focused confidence\n              </span>\n            </h1>\n            \n            <p className=\"text-lg sm:text-xl text-muted-foreground max-w-2xl leading-relaxed\">\n              Adaptive mock tests and insights that fuel growth.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Button\n                size=\"lg\"\n                className=\"shadow-lg shadow-primary/30 text-base\"\n                data-testid=\"button-get-started-hero\"\n              >\n                Get Started Free\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"text-base\"\n                data-testid=\"button-watch-tour\"\n              >\n                <Play className=\"w-4 h-4 mr-2\" />\n                Watch 90-sec Tour\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"relative\">\n            <div className=\"relative rounded-xl overflow-hidden shadow-2xl shadow-primary/20 border border-border/50 transform hover:scale-[1.02] transition-transform duration-300\">\n              <div className=\"aspect-[4/3] bg-gradient-to-br from-card via-card to-accent p-8\">\n                <div className=\"h-full bg-gradient-to-br from-primary/20 via-chart-2/10 to-chart-3/20 rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div className=\"bg-card/50 backdrop-blur-sm p-4 rounded-lg border border-border/30\">\n                        <div className=\"h-16 bg-gradient-to-t from-primary/40 to-primary/10 rounded\"></div>\n                      </div>\n                      <div className=\"bg-card/50 backdrop-blur-sm p-4 rounded-lg border border-border/30\">\n                        <div className=\"h-20 bg-gradient-to-t from-chart-2/40 to-chart-2/10 rounded\"></div>\n                      </div>\n                      <div className=\"bg-card/50 backdrop-blur-sm p-4 rounded-lg border border-border/30\">\n                        <div className=\"h-12 bg-gradient-to-t from-chart-3/40 to-chart-3/10 rounded\"></div>\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground font-mono\">Dashboard Analytics</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3182},"client/src/components/examples/EmailSignupSection.tsx":{"content":"import EmailSignupSection from '../EmailSignupSection';\n\nexport default function EmailSignupSectionExample() {\n  return <EmailSignupSection />;\n}\n","size_bytes":146},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/examples/QuizDemo.tsx":{"content":"import QuizDemo from '../QuizDemo';\n\nexport default function QuizDemoExample() {\n  return <QuizDemo />;\n}\n","size_bytes":106},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"replit.md":{"content":"# GATE And Tech - Exam Preparation Platform\n\n## Overview\nGATE And Tech is a comprehensive exam preparation platform for GATE (Graduate Aptitude Test in Engineering) aspirants. It aims to provide a robust learning environment with features like full authentication, an extensive question bank, a realistic mock testing engine, detailed analytics, and community interaction. The platform is built with an Express + Vite + React stack and focuses on delivering a high-quality, secure, and user-friendly experience to help students excel in their GATE examinations.\n\n## User Preferences\nNone set yet.\n\n## System Architecture\n\n### UI/UX Decisions\nThe platform features a clean, responsive design using `shadcn/ui` components and Tailwind CSS. The mock test engine is specifically designed to mimic the authentic GATE exam interface, including a color-coded question palette, real-time timer, and detailed instructions. Dashboards and analytics leverage `recharts` for clear data visualization. Role-switching capabilities are implemented for admins and moderators to manage content effectively.\n\n### Technical Implementations\n- **Authentication**: Implemented using Passport.js with local (email/password) and OAuth (Google, GitHub) strategies. Features include secure registration/login, session management, and role-based access control. Two-Factor Authentication (TOTP) is integrated for enhanced security. Password reset functionality uses cryptographically secure tokens with 1-hour expiry, email enumeration prevention, and dev-only console logging (production requires email service integration).\n- **CASL Permission System**: Dynamic, granular permission management using @casl/ability. Admins can create custom roles, assign specific permissions (create, read, update, delete) to roles, and track all changes via audit logs. System roles (student, moderator, admin) are protected from modification. Permissions cover all major resources (Question, Test, Topic, User, Role, Permission, Discussion, TestSeries, Analytics, AuditLog). Fallback role-based logic ensures backward compatibility. Admin UI at `/admin/roles` provides comprehensive role and permission management.\n- **Question Bank Management**: Supports multiple question types (MCQ, MSQ, Numerical) with varying difficulty levels, rich content, explanations, and topic-based categorization. Access control enforced via CASL permissions (create:Question, read:Question, update:Question, delete:Question).\n- **Mock Test Engine**: Provides an authentic GATE-style testing experience with real-time response persistence, automatic scoring (including negative marking), and a comprehensive exam summary. Numerical input handling includes debouncing to prevent race conditions.\n- **Test Series & Purchase Model**: One-time purchase model with validity duration. Test series (collections of tests) can have tiers (free, premium, pro). Students purchase test series via Razorpay integration. Free tests (not in any test series) are accessible to all students. Purchased test series grant access until expiry date.\n- **Tier-based Access Control**: Multi-layer access control system. First layer: CASL permission checks (read:Test, create:Test, update:Test, delete:Test). Second layer: purchase-based access control ensures students can only access free tests or tests from purchased test series with active status. Admin/moderator have full access to all tests via CASL permissions.\n- **Analytics & Performance Tracking**: Offers detailed insights into user performance through an analytics dashboard. Metrics include overall performance, topic-wise accuracy, difficulty-wise performance, and score trends.\n- **Discussion Forum**: A Q&A system allowing all authenticated users to create threads and post answers, fostering a community learning environment.\n- **Scalability Infrastructure**: Redis-based caching and BullMQ job queues for handling 10K+ concurrent users. Gracefully degrades to synchronous processing when Redis is unavailable. Supports TLS (rediss://) for secure managed Redis providers. Non-blocking cache operations using SCAN instead of KEYS.\n- **Database Optimization**: Production-ready indexing strategy for 10K+ concurrent users. 44 optimized composite indexes covering all hot query paths (discussions, test attempts, purchases, notifications, questions, tests). Eliminated redundant indexes on unique columns and low-selectivity boolean-only indexes to minimize write amplification. Composite indexes precisely match storage layer filter+sort patterns for optimal query performance.\n\n### Feature Specifications\n- **User Management**: Dynamic role-based access control with CASL. Admins can create custom roles and assign granular permissions.\n- **Permission Management**: Create, read, update, delete permissions for all resources. System roles (student, moderator, admin) are immutable. Audit logging tracks all permission changes.\n- **Authentication**: Local, OAuth (Google, GitHub), 2FA/TOTP, password reset.\n- **Question Management**: CRUD operations for questions, topics, difficulty, type, and status. Protected by CASL permissions.\n- **Test Management**: Test creation, scheduling, test series support, and attempt tracking. Protected by CASL permissions with additional purchase-based access control.\n- **Test Series Shop**: Browse and purchase test series with Razorpay integration, order verification, and persistent error handling.\n- **My Purchases**: View purchased test series with status tracking (active/expired) and validity information.\n- **Tier-based Access Control**: Multi-layer: CASL permission checks + purchase-based access for students.\n- **Performance Analytics**: Overall, topic-wise, difficulty-wise, and trend analysis.\n- **Community**: Discussion forums/Q&A system.\n- **Security**: CASL permission system, strict schema validation, password hashing (bcrypt), secure session management, audit logging, and system role protection.\n\n### System Design Choices\n- **Backend**: Node.js with Express.js for RESTful API services. Routes are modularized by domain for maintainability:\n  - `server/routes/auth.routes.ts` - Authentication, OAuth, 2FA, password reset\n  - `server/routes/user.routes.ts` - User profile management\n  - `server/routes/topic.routes.ts` - Topic operations (CASL protected)\n  - `server/routes/question.routes.ts` - Question bank management (CASL protected)\n  - `server/routes/test.routes.ts` - Test and test attempt operations (CASL protected with purchase-based access)\n  - `server/routes/role.routes.ts` - Role and permission management (CASL admin UI backend)\n  - `server/routes/payment.routes.ts` - Razorpay payment integration, order creation/verification, test series purchases\n  - `server/routes/discussion.routes.ts` - Discussion forum\n  - `server/routes/analytics.routes.ts` - Performance analytics\n  - `server/routes/index.ts` - Route aggregator\n  - `server/casl/abilities.ts` - CASL ability definitions and permission logic\n  - `server/middleware/permissions.ts` - CASL permission middleware (can/canAny/canAll)\n  - `server/redis.ts` - Redis client configuration with TLS support, optional initialization, SCAN-based cache helpers\n  - `server/queue.ts` - BullMQ queue setup for background jobs (test scoring, reports, analytics, invoices), graceful degradation when Redis unavailable\n- **Storage Layer**: Modularized data access layer for better maintainability:\n  - `server/storage/user.storage.ts` (175 lines) - User, session, and authentication token operations\n  - `server/storage/question.storage.ts` (126 lines) - Question and topic CRUD operations\n  - `server/storage/test.storage.ts` (163 lines) - Test, attempt, and response management\n  - `server/storage/payment.storage.ts` (206 lines) - Test series, purchases, and transaction operations\n  - `server/storage/discussion.storage.ts` (298 lines) - Discussion threads, posts, and analytics\n  - `server/storage/role.storage.ts` - Role, permission, role-permission assignment, and audit log operations\n  - `server/storage/index.ts` (483 lines) - Main aggregator maintaining IStorage interface for backward compatibility\n- **Frontend**: React.js with Vite for a fast and reactive user interface. Large components have been refactored for maintainability:\n  - `client/src/pages/TakeTest.tsx` (549 lines) - Main test taking logic, state management, and API integration\n  - `client/src/pages/RoleManagement.tsx` - CASL admin UI for role and permission management (admin only)\n  - `client/src/components/test/QuestionPalette.tsx` (152 lines) - Question navigation sidebar with status indicators\n  - `client/src/components/test/TestInstructions.tsx` (123 lines) - Pre-test instructions and rules\n  - `client/src/components/test/TestSummary.tsx` (143 lines) - Pre-submission summary view\n  - `client/src/components/test/CalculatorDialog.tsx` (31 lines) - Calculator popup component\n- **Database**: PostgreSQL for robust data storage, managed with Drizzle ORM for type-safe interactions.\n- **State Management**: React Context API for authentication, TanStack Query for data fetching and caching.\n- **Routing**: Wouter for client-side navigation.\n\n## External Dependencies\n\n- **Database**: PostgreSQL (hosted on Neon)\n- **ORM**: Drizzle ORM\n- **Authentication**: Passport.js (with `passport-google-oauth20`, `passport-github2`, `passport-local`)\n- **Caching & Queues**: Redis (ioredis) with BullMQ for background job processing\n- **UI Components**: shadcn/ui\n- **Styling**: Tailwind CSS\n- **Charting**: recharts\n- **2FA**: speakeasy, qrcode\n- **Hashing**: bcrypt","size_bytes":9541},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/TestResults.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Loader2, CheckCircle2, XCircle, Clock, Award, Target } from \"lucide-react\";\nimport type { Test, TestAttempt, TestResponse, Question } from \"@shared/schema\";\n\nexport default function TestResults() {\n  const [, params] = useRoute(\"/attempts/:id/results\");\n  const [, navigate] = useLocation();\n  const attemptId = params?.id;\n\n  const { data: attempt, isLoading: isLoadingAttempt } = useQuery<TestAttempt>({\n    queryKey: [\"/api/attempts\", attemptId],\n  });\n\n  const { data: responses } = useQuery<TestResponse[]>({\n    queryKey: [\"/api/attempts\", attemptId, \"responses\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/attempts/${attemptId}/responses`);\n      if (!response.ok) throw new Error(\"Failed to fetch responses\");\n      return response.json();\n    },\n    enabled: !!attemptId,\n  });\n\n  const { data: test } = useQuery<Test>({\n    queryKey: [\"/api/tests\", attempt?.testId],\n    enabled: !!attempt?.testId,\n  });\n\n  const { data: questions } = useQuery<Question[]>({\n    queryKey: [\"/api/tests\", attempt?.testId, \"questions\"],\n    enabled: !!attempt?.testId,\n  });\n\n  if (isLoadingAttempt) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (!attempt) {\n    return (\n      <div className=\"container mx-auto py-8 px-4 text-center\">\n        <p className=\"text-muted-foreground\">Test attempt not found</p>\n      </div>\n    );\n  }\n\n  const scorePercentage = attempt.maxScore ? (attempt.score! / attempt.maxScore) * 100 : 0;\n  const correctCount = responses?.filter(r => r.isCorrect).length || 0;\n  const incorrectCount = responses?.filter(r => !r.isCorrect && r.selectedAnswer).length || 0;\n  const unattemptedCount = responses?.filter(r => !r.selectedAnswer).length || 0;\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 max-w-6xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">Test Results</h1>\n        <p className=\"text-muted-foreground\">{test?.title}</p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Your Score</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-score\">\n              {attempt.score} / {attempt.maxScore}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {scorePercentage.toFixed(1)}%\n            </p>\n            <Progress value={scorePercentage} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Time Taken</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-time-taken\">\n              {Math.floor((attempt.timeTaken || 0) / 60)} min\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {attempt.timeTaken || 0} seconds total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Accuracy</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-accuracy\">\n              {responses?.length ? ((correctCount / responses.length) * 100).toFixed(1) : 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {correctCount} correct out of {responses?.length || 0}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Question Analysis</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n              <span data-testid=\"text-correct-count\">Correct: {correctCount}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <XCircle className=\"h-5 w-5 text-destructive\" />\n              <span data-testid=\"text-incorrect-count\">Incorrect: {incorrectCount}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"h-5 w-5 rounded-full border-2 border-muted-foreground\" />\n              <span data-testid=\"text-unattempted-count\">Unattempted: {unattemptedCount}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed Solutions</CardTitle>\n          <CardDescription>Review your answers and explanations</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {questions?.map((question, index) => {\n            const response = responses?.find(r => r.questionId === question.id);\n            const isCorrect = response?.isCorrect || false;\n\n            return (\n              <div key={question.id} className=\"space-y-3\" data-testid={`solution-${question.id}`}>\n                <div className=\"flex items-start gap-3\">\n                  <Badge variant={isCorrect ? \"default\" : response?.selectedAnswer ? \"destructive\" : \"outline\"}>\n                    Q{index + 1}\n                  </Badge>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium mb-2\">{question.content}</p>\n                    \n                    {question.type === \"numerical\" ? (\n                      <div className=\"space-y-2\">\n                        <div>\n                          <span className=\"text-sm text-muted-foreground\">Your answer: </span>\n                          <span className={isCorrect ? \"text-green-600 font-medium\" : \"text-destructive font-medium\"}>\n                            {response?.selectedAnswer || \"Not attempted\"}\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-sm text-muted-foreground\">Correct answer: </span>\n                          <span className=\"text-green-600 font-medium\">{question.correctAnswer}</span>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        {(question.options as any)?.map((option: any) => {\n                          const isSelected = response?.selectedAnswer === option.id;\n                          const isCorrectOption = option.isCorrect;\n\n                          return (\n                            <div\n                              key={option.id}\n                              className={`p-3 rounded-md border ${\n                                isCorrectOption\n                                  ? \"bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800\"\n                                  : isSelected\n                                  ? \"bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800\"\n                                  : \"bg-card\"\n                              }`}\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"font-medium\">{option.id}.</span>\n                                <span>{option.text}</span>\n                                {isCorrectOption && (\n                                  <CheckCircle2 className=\"h-4 w-4 text-green-600 ml-auto\" />\n                                )}\n                                {isSelected && !isCorrectOption && (\n                                  <XCircle className=\"h-4 w-4 text-destructive ml-auto\" />\n                                )}\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n\n                    {question.explanation && (\n                      <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                        <p className=\"text-sm font-medium mb-1\">Explanation:</p>\n                        <p className=\"text-sm text-muted-foreground\">{question.explanation}</p>\n                      </div>\n                    )}\n\n                    <div className=\"flex items-center gap-4 mt-3 text-sm text-muted-foreground\">\n                      <span>Marks: {question.marks}</span>\n                      {response?.marksAwarded !== undefined && (\n                        <span>Awarded: {response.marksAwarded}</span>\n                      )}\n                      {response?.timeTaken && (\n                        <span>Time: {response.timeTaken}s</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                {index < questions.length - 1 && <Separator />}\n              </div>\n            );\n          })}\n        </CardContent>\n      </Card>\n\n      <div className=\"mt-8 flex gap-4\">\n        <Button onClick={() => navigate(\"/tests\")} data-testid=\"button-back-to-tests\">\n          Back to Tests\n        </Button>\n        <Button onClick={() => navigate(\"/dashboard\")} variant=\"outline\" data-testid=\"button-dashboard\">\n          Go to Dashboard\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10222},"client/src/pages/LandingPage.tsx":{"content":"import Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport HeroSection from \"@/components/HeroSection\";\nimport YouTubeSection from \"@/components/YouTubeSection\";\nimport QuizDemo from \"@/components/QuizDemo\";\nimport FeaturesSection from \"@/components/FeaturesSection\";\nimport TestimonialsSection from \"@/components/TestimonialsSection\";\nimport PricingSection from \"@/components/PricingSection\";\nimport FAQSection from \"@/components/FAQSection\";\nimport EmailSignupSection from \"@/components/EmailSignupSection\";\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Navbar />\n      <main>\n        <HeroSection />\n        <YouTubeSection />\n        <QuizDemo />\n        <FeaturesSection />\n        <TestimonialsSection />\n        <PricingSection />\n        <FAQSection />\n        <EmailSignupSection />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":951},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/SubjectManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Plus, Edit, Trash2, BookOpen } from \"lucide-react\";\nimport type { Subject, Topic } from \"@shared/schema\";\n\nexport default function SubjectManagement() {\n  const { toast } = useToast();\n  const [isSubjectDialogOpen, setIsSubjectDialogOpen] = useState(false);\n  const [isTopicDialogOpen, setIsTopicDialogOpen] = useState(false);\n  const [editingSubject, setEditingSubject] = useState<Subject | null>(null);\n  const [editingTopic, setEditingTopic] = useState<Topic | null>(null);\n  const [selectedSubject, setSelectedSubject] = useState<Subject | null>(null);\n\n  const { data: subjects, isLoading } = useQuery<Subject[]>({\n    queryKey: [\"/api/subjects\"],\n  });\n\n  const { data: topics } = useQuery<Topic[]>({\n    queryKey: [\"/api/topics\", selectedSubject?.id],\n    enabled: !!selectedSubject,\n    queryFn: async () => {\n      const response = await fetch(`/api/topics?subjectId=${selectedSubject?.id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch topics\");\n      return response.json();\n    },\n  });\n\n  const createSubjectMutation = useMutation({\n    mutationFn: async (data: { name: string; slug: string; description?: string; displayOrder?: number }) => {\n      return apiRequest(\"POST\", \"/api/subjects\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subjects\"] });\n      setIsSubjectDialogOpen(false);\n      toast({ title: \"Subject created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create subject\", variant: \"destructive\" });\n    },\n  });\n\n  const updateSubjectMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Subject> }) => {\n      return apiRequest(\"PATCH\", `/api/subjects/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subjects\"] });\n      setIsSubjectDialogOpen(false);\n      setEditingSubject(null);\n      toast({ title: \"Subject updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update subject\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteSubjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/subjects/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subjects\"] });\n      toast({ title: \"Subject deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete subject\", variant: \"destructive\" });\n    },\n  });\n\n  const createTopicMutation = useMutation({\n    mutationFn: async (data: { name: string; slug: string; subjectId: string; description?: string }) => {\n      return apiRequest(\"POST\", \"/api/topics\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics\"] });\n      setIsTopicDialogOpen(false);\n      toast({ title: \"Topic created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create topic\", variant: \"destructive\" });\n    },\n  });\n\n  const updateTopicMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Topic> }) => {\n      return apiRequest(\"PATCH\", `/api/topics/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics\"] });\n      setIsTopicDialogOpen(false);\n      setEditingTopic(null);\n      toast({ title: \"Topic updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update topic\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteTopicMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/topics/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics\"] });\n      toast({ title: \"Topic deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete topic\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubjectSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get(\"name\") as string,\n      slug: formData.get(\"slug\") as string,\n      description: formData.get(\"description\") as string || undefined,\n      displayOrder: parseInt(formData.get(\"displayOrder\") as string) || 0,\n    };\n\n    if (editingSubject) {\n      updateSubjectMutation.mutate({ id: editingSubject.id, data });\n    } else {\n      createSubjectMutation.mutate(data);\n    }\n  };\n\n  const handleTopicSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get(\"name\") as string,\n      slug: formData.get(\"slug\") as string,\n      subjectId: selectedSubject?.id || \"\",\n      description: formData.get(\"description\") as string || undefined,\n    };\n\n    if (editingTopic) {\n      updateTopicMutation.mutate({ id: editingTopic.id, data });\n    } else {\n      createTopicMutation.mutate(data);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\" data-testid=\"loading-subjects\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Subject & Topic Management</h1>\n          <p className=\"text-muted-foreground\">Manage GATE subjects and their topics</p>\n        </div>\n        <Button \n          onClick={() => {\n            setEditingSubject(null);\n            setIsSubjectDialogOpen(true);\n          }}\n          data-testid=\"button-add-subject\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Subject\n        </Button>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Subjects ({subjects?.length || 0})</CardTitle>\n            <CardDescription>All GATE subjects</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            {subjects?.map((subject) => (\n              <div\n                key={subject.id}\n                className={`p-3 border rounded-lg hover:bg-accent cursor-pointer transition-colors ${\n                  selectedSubject?.id === subject.id ? \"bg-accent\" : \"\"\n                }`}\n                onClick={() => setSelectedSubject(subject)}\n                data-testid={`subject-item-${subject.id}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\" data-testid={`subject-name-${subject.id}`}>\n                      {subject.name}\n                    </h3>\n                    {subject.description && (\n                      <p className=\"text-sm text-muted-foreground\">{subject.description}</p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setEditingSubject(subject);\n                        setIsSubjectDialogOpen(true);\n                      }}\n                      data-testid={`button-edit-subject-${subject.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        if (confirm(\"Are you sure you want to delete this subject?\")) {\n                          deleteSubjectMutation.mutate(subject.id);\n                        }\n                      }}\n                      data-testid={`button-delete-subject-${subject.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <CardTitle>\n                  {selectedSubject ? `Topics in ${selectedSubject.name}` : \"Topics\"}\n                </CardTitle>\n                <CardDescription>\n                  {selectedSubject ? `${topics?.length || 0} topics` : \"Select a subject to view topics\"}\n                </CardDescription>\n              </div>\n              {selectedSubject && (\n                <Button\n                  size=\"sm\"\n                  onClick={() => {\n                    setEditingTopic(null);\n                    setIsTopicDialogOpen(true);\n                  }}\n                  data-testid=\"button-add-topic\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Topic\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            {!selectedSubject ? (\n              <div className=\"flex flex-col items-center justify-center py-12 text-muted-foreground\">\n                <BookOpen className=\"h-12 w-12 mb-4\" />\n                <p>Select a subject to view and manage topics</p>\n              </div>\n            ) : topics && topics.length > 0 ? (\n              <div className=\"space-y-2\">\n                {topics.map((topic) => (\n                  <div\n                    key={topic.id}\n                    className=\"p-3 border rounded-lg hover:bg-accent\"\n                    data-testid={`topic-item-${topic.id}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\" data-testid={`topic-name-${topic.id}`}>\n                          {topic.name}\n                        </h4>\n                        {topic.description && (\n                          <p className=\"text-sm text-muted-foreground\">{topic.description}</p>\n                        )}\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setEditingTopic(topic);\n                            setIsTopicDialogOpen(true);\n                          }}\n                          data-testid={`button-edit-topic-${topic.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (confirm(\"Are you sure you want to delete this topic?\")) {\n                              deleteTopicMutation.mutate(topic.id);\n                            }\n                          }}\n                          data-testid={`button-delete-topic-${topic.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-destructive\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <p>No topics yet. Click \"Add Topic\" to create one.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={isSubjectDialogOpen} onOpenChange={setIsSubjectDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingSubject ? \"Edit Subject\" : \"Add Subject\"}</DialogTitle>\n            <DialogDescription>\n              {editingSubject ? \"Update the subject details\" : \"Create a new GATE subject\"}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubjectSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Subject Name</Label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                defaultValue={editingSubject?.name || \"\"}\n                required\n                data-testid=\"input-subject-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"slug\">Slug</Label>\n              <Input\n                id=\"slug\"\n                name=\"slug\"\n                defaultValue={editingSubject?.slug || \"\"}\n                required\n                data-testid=\"input-subject-slug\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                name=\"description\"\n                defaultValue={editingSubject?.description || \"\"}\n                rows={3}\n                data-testid=\"input-subject-description\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"displayOrder\">Display Order</Label>\n              <Input\n                id=\"displayOrder\"\n                name=\"displayOrder\"\n                type=\"number\"\n                defaultValue={editingSubject?.displayOrder || 0}\n                data-testid=\"input-subject-display-order\"\n              />\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsSubjectDialogOpen(false)}\n                data-testid=\"button-cancel-subject\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createSubjectMutation.isPending || updateSubjectMutation.isPending}\n                data-testid=\"button-save-subject\"\n              >\n                {createSubjectMutation.isPending || updateSubjectMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  \"Save\"\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isTopicDialogOpen} onOpenChange={setIsTopicDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingTopic ? \"Edit Topic\" : \"Add Topic\"}</DialogTitle>\n            <DialogDescription>\n              {editingTopic ? \"Update the topic details\" : `Create a new topic in ${selectedSubject?.name}`}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleTopicSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"topic-name\">Topic Name</Label>\n              <Input\n                id=\"topic-name\"\n                name=\"name\"\n                defaultValue={editingTopic?.name || \"\"}\n                required\n                data-testid=\"input-topic-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"topic-slug\">Slug</Label>\n              <Input\n                id=\"topic-slug\"\n                name=\"slug\"\n                defaultValue={editingTopic?.slug || \"\"}\n                required\n                data-testid=\"input-topic-slug\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"topic-description\">Description</Label>\n              <Textarea\n                id=\"topic-description\"\n                name=\"description\"\n                defaultValue={editingTopic?.description || \"\"}\n                rows={3}\n                data-testid=\"input-topic-description\"\n              />\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsTopicDialogOpen(false)}\n                data-testid=\"button-cancel-topic\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createTopicMutation.isPending || updateTopicMutation.isPending}\n                data-testid=\"button-save-topic\"\n              >\n                {createTopicMutation.isPending || updateTopicMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  \"Save\"\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":17581},"server/migrations/add-subjects.ts":{"content":"import { db } from '../db';\nimport { subjects, topics } from '@/shared/schema';\nimport { sql } from 'drizzle-orm';\n\nconst GATE_SUBJECTS = [\n  { name: 'Discrete Mathematics', slug: 'discrete-mathematics', description: 'Set Theory, Logic, Combinatorics, Graph Theory', displayOrder: 1 },\n  { name: 'Engineering Mathematics', slug: 'engineering-mathematics', description: 'Linear Algebra, Calculus, Probability, Statistics', displayOrder: 2 },\n  { name: 'C Programming', slug: 'c-programming', description: 'Programming Basics, Arrays, Pointers, Structures', displayOrder: 3 },\n  { name: 'Data Structures', slug: 'data-structures', description: 'Arrays, Linked Lists, Stacks, Queues, Trees, Graphs', displayOrder: 4 },\n  { name: 'Algorithms', slug: 'algorithms', description: 'Sorting, Searching, Greedy, Dynamic Programming, Graph Algorithms', displayOrder: 5 },\n  { name: 'Theory of Computation', slug: 'theory-of-computation', description: 'Automata, Regular Languages, Context-Free Grammars, Turing Machines', displayOrder: 6 },\n  { name: 'Compiler Design', slug: 'compiler-design', description: 'Lexical Analysis, Parsing, Code Generation, Optimization', displayOrder: 7 },\n  { name: 'Digital Logic', slug: 'digital-logic', description: 'Boolean Algebra, Logic Gates, Combinational & Sequential Circuits', displayOrder: 8 },\n  { name: 'Computer Organisation and Architecture', slug: 'computer-organisation-architecture', description: 'Memory Hierarchy, CPU, Pipelining, I/O Systems', displayOrder: 9 },\n  { name: 'Computer Networks', slug: 'computer-networks', description: 'OSI Model, TCP/IP, Routing, Network Security', displayOrder: 10 },\n  { name: 'Operating System', slug: 'operating-system', description: 'Process Management, Memory Management, File Systems, Scheduling', displayOrder: 11 },\n  { name: 'Database Management System', slug: 'database-management-system', description: 'SQL, Normalization, Transactions, Indexing, Query Optimization', displayOrder: 12 },\n];\n\nexport async function migrateSubjects() {\n  console.log('Starting subjects migration...');\n\n  try {\n    // Step 1: Create subjects table if it doesn't exist\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS subjects (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name TEXT NOT NULL UNIQUE,\n        slug TEXT NOT NULL UNIQUE,\n        description TEXT,\n        display_order INTEGER NOT NULL DEFAULT 0,\n        created_at TIMESTAMP NOT NULL DEFAULT NOW()\n      )\n    `);\n    console.log('✓ Subjects table created');\n\n    // Step 2: Create index on display_order\n    await db.execute(sql`\n      CREATE INDEX IF NOT EXISTS subjects_display_order_idx ON subjects(display_order)\n    `);\n    console.log('✓ Index created on subjects.display_order');\n\n    // Step 3: Insert GATE subjects\n    for (const subject of GATE_SUBJECTS) {\n      await db.execute(sql`\n        INSERT INTO subjects (name, slug, description, display_order)\n        VALUES (${subject.name}, ${subject.slug}, ${subject.description}, ${subject.displayOrder})\n        ON CONFLICT (name) DO NOTHING\n      `);\n    }\n    console.log('✓ GATE subjects inserted');\n\n    // Step 4: Add subject_id column to topics if it doesn't exist\n    await db.execute(sql`\n      DO $$\n      BEGIN\n        IF NOT EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'topics' AND column_name = 'subject_id'\n        ) THEN\n          ALTER TABLE topics ADD COLUMN subject_id VARCHAR;\n        END IF;\n      END $$;\n    `);\n    console.log('✓ subject_id column added to topics');\n\n    // Step 5: Add foreign key constraint\n    await db.execute(sql`\n      DO $$\n      BEGIN\n        IF NOT EXISTS (\n          SELECT 1 FROM information_schema.table_constraints \n          WHERE constraint_name = 'topics_subject_id_subjects_id_fk'\n        ) THEN\n          ALTER TABLE topics \n          ADD CONSTRAINT topics_subject_id_subjects_id_fk \n          FOREIGN KEY (subject_id) REFERENCES subjects(id) ON DELETE CASCADE;\n        END IF;\n      END $$;\n    `);\n    console.log('✓ Foreign key constraint added');\n\n    // Step 6: Create index on subject_id\n    await db.execute(sql`\n      CREATE INDEX IF NOT EXISTS topics_subject_idx ON topics(subject_id)\n    `);\n    console.log('✓ Index created on topics.subject_id');\n\n    // Step 7: Migrate existing data if old 'subject' column exists\n    const hasOldColumn = await db.execute(sql`\n      SELECT EXISTS (\n        SELECT 1 FROM information_schema.columns \n        WHERE table_name = 'topics' AND column_name = 'subject'\n      )\n    `);\n\n    if (hasOldColumn.rows[0]?.exists) {\n      console.log('Old subject column found, migrating data...');\n      \n      // Get all existing topics with subject values\n      const existingTopics = await db.execute(sql`\n        SELECT id, subject FROM topics WHERE subject IS NOT NULL AND subject_id IS NULL\n      `);\n\n      // For each topic, try to match to a subject or create a default\n      for (const topic of existingTopics.rows) {\n        // Try to find matching subject\n        const matchingSubject = await db.execute(sql`\n          SELECT id FROM subjects \n          WHERE LOWER(name) = LOWER(${topic.subject})\n          LIMIT 1\n        `);\n\n        if (matchingSubject.rows.length > 0) {\n          await db.execute(sql`\n            UPDATE topics \n            SET subject_id = ${matchingSubject.rows[0].id} \n            WHERE id = ${topic.id}\n          `);\n        } else {\n          // Use first subject as default\n          const firstSubject = await db.execute(sql`\n            SELECT id FROM subjects ORDER BY display_order LIMIT 1\n          `);\n          if (firstSubject.rows.length > 0) {\n            await db.execute(sql`\n              UPDATE topics \n              SET subject_id = ${firstSubject.rows[0].id} \n              WHERE id = ${topic.id}\n            `);\n          }\n        }\n      }\n\n      // Drop old subject column\n      await db.execute(sql`\n        ALTER TABLE topics DROP COLUMN IF EXISTS subject\n      `);\n      console.log('✓ Old subject column dropped');\n    }\n\n    // Step 8: Make subject_id NOT NULL after migration\n    await db.execute(sql`\n      DO $$\n      BEGIN\n        ALTER TABLE topics ALTER COLUMN subject_id SET NOT NULL;\n      EXCEPTION\n        WHEN others THEN\n          RAISE NOTICE 'Could not set subject_id to NOT NULL - there may be null values';\n      END $$;\n    `);\n    console.log('✓ subject_id set to NOT NULL');\n\n    // Step 9: Create unique constraint on slug+subject_id\n    await db.execute(sql`\n      DO $$\n      BEGIN\n        IF NOT EXISTS (\n          SELECT 1 FROM pg_constraint \n          WHERE conname = 'topics_slug_subject_id_unique'\n        ) THEN\n          ALTER TABLE topics ADD CONSTRAINT topics_slug_subject_id_unique UNIQUE (slug, subject_id);\n        END IF;\n      END $$;\n    `);\n    console.log('✓ Unique constraint created on topics(slug, subject_id)');\n\n    console.log('\\n✅ Migration completed successfully!');\n  } catch (error) {\n    console.error('❌ Migration failed:', error);\n    throw error;\n  }\n}\n\n// Run immediately\nmigrateSubjects()\n  .then(() => {\n    console.log('Migration script completed');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('Migration script failed:', error);\n    process.exit(1);\n  });\n","size_bytes":7289}},"version":2}